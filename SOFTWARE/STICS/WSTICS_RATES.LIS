                                                                 6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page   1
1.14                                                             6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	      1 CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
	      2       PROGRAM WSTICS_RATES
	      3 C This program reads a WIND L1 data file and prompts the user to select rates. 
	      4 C These rates are decompressed, averaged over a given number of Science Records
	      5 C for each voltage step, then each  rate per spin is averaged over
	      6 C all voltage steps for the given Science Record interval. So over a given time
	      7 C each rate is written as counts/spin averaged over all voltage steps. The rates
	      8 C are then written to a file against the interval end time and solar wind speed.
	      9 C 
	     10 C  STICS_RATE_TABLE   Created 	3-NOV-1994	JOHN PAQUETTE
	     11 C                              21-FEB-1995      most recent version
	     12 C
	     13 C  CHOOSE_STICS_RATES Created from above  13-MAR-1995      K. CHOTOO
	     14 C
	     15 C Revision history:
	     16 C	16-MAR-1995	K. CHOTOO	TGS mode check done every spin,N=>J,
	     17 C					also if HDB flag is bad, skip entire Sci Rec
	     18 C	17-APR-1995	K. CHOTOO	Do averages also at End Time and at EOF.
	     19 C					Rates are given as counts/spin averaged over
	     20 C					all voltage steps.
	     21 C	16-AUG-1995	K. CHOTOO	Added solar wind speed to output file
	     22 C       21-AUG-1995     K. CHOTOO	Output file rates rounded off to 4 decimal places 
	     23 C       22-AUG-1995     K. CHOTOO       Routine can now work for more than one day
	     24 C       29-SEP-1995     K. CHOTOO       Add new routine to calculate efficiencies for OMR1-19
	     25 C        1-OCT-1995     K. CHOTOO	Change output file format from F10.4 to E13.7
	     26 C        1-DEC-1995     K. CHOTOO    	User can now give output filename if desired
	     27 C   	14-MAY-1996     K. CHOTOO	Write both H and He average speeds to output file
	     28 C  	15-MAY-1996	K. CHOTOO       Corrected values will be omni-directional flux in 
	     29 C					units of  { counts/(cm2-sec-sr-keV/amu) }. Output 
	     30 C					file now has run time.
	     31 C	20-SEP-1996	K. CHOTOO	Add check for bad Science Record number
	     32 C	10-OCT-1996	K. CHOTOO	Interval END time replaced with interval START time.
	     33 C	11-NOV-1996	K. CHOTOO	Changed MASS subroutine for getting speed
	     34 C
	     35 CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
	     36 CDEC$ IDENT '1.14'
	     37       INCLUDE	'INC_DIR:EDBDEF.INC/NOLIST'

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page   2
1.14                                                             6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	    575       INCLUDE   'INC_DIR:L1FMT.INC/NOLIST'
	    707       INCLUDE   '($RMSDEF)'
    1	    708 !*** MODULE $RMSDEF ***
    1	    709 CDEC$ OPTIONS/ALIGN=(RECORDS=PACKED,COMMONS=PACKED)
    1	    710  ! 
    1	    711  !  This SDL File Generated by VAX-11 Message V04-00 on 26-JAN-1994 13:51:15.86
    1	    712  ! 
    1	    713  ! 	.TITLE	RMSMSG -RMS COMPLETION CODES
    1	    714  !  *************************************************************************
    1	    715  !  *                                                                       *
    1	    716  !  * COPYRIGHT (C) DIGITAL EQUIPMENT CORPORATION, 1976, 1977, 1978, 1979,  *
    1	    717  !  * 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,     *
    1	    718  !  * 1991,1992                                                             *
    1	    719  !  * ALL RIGHTS RESERVED.                                                  *
    1	    720  !  * UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT LAWS  OF  THE  UNITED *
    1	    721  !  * STATES.                                                               *
    1	    722  !  *                                                                       *
    1	    723  !  * THE SOFTWARE CONTAINED ON THIS MEDIA IS PROPRIETARY TO  AND  EMBODIES *
    1	    724  !  * THE   CONFIDENTIAL   TECHNOLOGY  OF  DIGITAL  EQUIPMENT  CORPORATION. *
    1	    725  !  * POSSESSION, USE, DUPLICATION OR DISSEMINATION  OF  THE  SOFTWARE  AND *
    1	    726  !  * MEDIA  IS  AUTHORIZED  ONLY  PURSUANT TO A VALID WRITTEN LICENSE FROM *
    1	    727  !  * DIGITAL EQUIPMENT CORPORATION.                                        *
    1	    728  !  *                                                                       *
    1	    729  !  * RESTRICTED RIGHTS LEGEND USE, DUPLICATION, OR DISCLOSURE BY THE  U.S. *
    1	    730  !  * GOVERNMENT  IS  SUBJECT  TO RESTRICTIONS AS SET FORTH IN SUBPARAGRAPH *
    1	    731  !  * (C)(1)(II) OF DFARS 252.227-7013, OR IN FAR 52.227-19, AS APPLICABLE. *
    1	    732  !  *                                                                       *
    1	    733  !  *************************************************************************
    1	    734  ! ++
    1	    735  !  FACILITY: RMS
    1	    736  ! 
    1	    737  !  ABSTRACT:
    1	    738  ! 
    1	    739  ! 	THIS MODULE DEFINES ALL RMS COMPLETION CODES.
    1	    740  ! 
    1	    741  !  ENVIRONMENT:
    1	    742  ! 
    1	    743  ! 	THE MESSAGE TRANSLATOR MUST BE USED TO CONVERT RMSMSG.MSG INTO
    1	    744  ! 	RMSMSG.SDL.  THE SDL TRANSLATOR MUST THEN BE USED TO CONVERT
    1	    745  ! 	RMSMSG.SDL INTO RMSMSG.MAR (AND RMSMSG.B32).
    1	    746  ! 
    1	    747  !  AUTHOR: LEO F. LAVERDURE,	CREATION DATE:  10-DEC-1976
    1	    748  ! 
    1	    749  !  MODIFIED BY:
    1	    750  ! 
    1	    751  !                DEE RYAN                                30-SEP-1993
    1	    752  !                CORRECTED USE OF DIGITAL PRODUCT NAMES.
    1	    753  ! 
    1	    754  ! 	X-5	EMW		ELINOR M. WOODS		28-SEP-1993
    1	    755  ! 		MERGE IN OPENVMS VAX CORAL FIX:
    1	    756  ! 
    1	    757  ! 		X-10	EMW0019  ELINOR M. WOODS  	21-SEP-1993
    1	    758  ! 		ADD ONE NEW USER-REPORTABLE ERROR STATUS (WITH AN
    1	    759  ! 		ASSOCIATED STV): NETBTS.  RELOCATE NEW IDXSEARCH STATUS
    1	    760  ! 		(SEE X-9) FROM "ERROR with STV" SECTION TO "ERROR WITHOUT 
    1	    761  ! 		STV" section.  Expand "WITH STV' AND "without STV"
    1	    762  ! 		COMMENTS TO CLARIFY DIFFERENCE BETWEEN TWO.

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page   3
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    763  ! 
    1	    764  ! 	X-4	EMW0016		ELINOR M. WOODS		10-AUG-1993
    1	    765  ! 		MERGE IN CORAL FIX:
    1	    766  ! 
    1	    767  ! 		MODIFY SEVERITY OF TWO DTF ERROR CODES (DTFACC AND
    1	    768  ! 		DTFCRE) FROM FATAL TO ERROR, AS REQUESTED BY SNA/DTF
    1	    769  ! 		FACILITY.		
    1	    770  ! 
    1	    771  ! 		ALSO MOVE NEW IDXSEARCH STATUS FROM ERROR WITH NO 
    1	    772  ! 		STV GROUPING TO ERROR WITH STV GROUPING.
    1	    773  ! 
    1	    774  ! 	X-3	EMW0010		ELINOR M. WOODS		02-JUL-1993
    1	    775  ! 		TO SUPPORT NEW KEY-LESS-THAN FUNCTIONALITY, ADDITION 
    1	    776  ! 		OF ONE USER-REPORTABLE ERROR STATUS:  IDXSEARCH, AND
    1	    777  ! 		TWO NEW RMS-INTERNAL ERROR STATUSES:  LSCAN AND 
    1	    778  ! 		ROOTSRCH.		
    1	    779  ! 
    1	    780  ! 	X-2	CW0019		CHRIS WHITAKER		11-NOV-1992
    1	    781  ! 		MERGE IN OPENVMS VAX V6.0 CHANGES
    1	    782  ! 
    1	    783  ! 		X-8	JM0012	JOHN MUNZER		11-NOV-1992
    1	    784  ! 		CHANGE TEXT FOR RMS$_LNE.
    1	    785  ! 
    1	    786  ! 		X-7	JM0006	JOHN MUNZER		17-APR-1992
    1	    787  ! 		ADD !XL PARAMETER TO RMS$_BUG TO REPORT R2.
    1	    788  ! 
    1	    789  ! 	X-1	RAB		RICHARD A. BISHOP	24-JUN-1991
    1	    790  ! 		MOVED TO [STARLET] FACILITY
    1	    791  ! 
    1	    792  ! 	==================================
    1	    793  ! 	OLD AUDIT TRAIL FOLLOWS:
    1	    794  ! 
    1	    795  ! 	X-33	LSS0154		LEONARD S. SZUBOWICZ	 4-APR-1990
    1	    796  ! 		ALTER TEXT AND FAO PARAMETERS OF RMS$_RUH AND RMS$_BUG
    1	    797  ! 		CONDITION VALUES FOR RMS/DDTM SUPPORT.
    1	    798  ! 
    1	    799  ! 	X-32	PJH		PAUL J. HOULIHAN	17-JAN-1990
    1	    800  ! 		CHANGE TEXT FOR RMS$_INCOMPSHR ERROR MESSAGE.
    1	    801  ! 
    1	    802  ! 	X-31	LSS0130		LEONARD S. SZUBOWICZ	12-OCT-1989
    1	    803  ! 		MERGE OF RMS/DDTM GENERATION X-30D2.
    1	    804  ! 		ADD GENERAL DDTM_ERR ERROR MESSAGE FOR DDTM SERVICE FAILURES;
    1	    805  ! 		STV WILL CONTAIN THE FAILING SYSTEM SERVICE CONDITION VALUE.
    1	    806  ! 
    1	    807  ! 	X-30	LSS0080		LEONARD S. SZUBOWICZ	06-OCT-1988
    1	    808  ! 		ADD RMS$_OK_ACT MESSAGE FOR USE BY FUTURE WORK TO $DISPLAY.
    1	    809  ! 		THIS IS PART OF LATENT SUPPORT FOR RMS/DDTM.
    1	    810  ! 
    1	    811  ! 	X-29	GJA0080		GARY J. ALLISON		06-JUN-1988
    1	    812  ! 		CHANGE TEXT OF SEMANTICS MESSAGE.
    1	    813  ! 
    1	    814  ! 	X-28	GJA0072		GARY J. ALLISON		02-MAR-1988
    1	    815  ! 		ADD EXT_ERR, OPNOTSUP, EXTNOTFOU, AND SEMANTICS MESSAGES.
    1	    816  ! 
    1	    817  ! 	X-27	PMV0072		PETER M. VATNE		08-OCT-1987
    1	    818  ! 		CHANGE RMS$_NOJNLLIC TO RMS$_JNLNOTAUTH.
    1	    819  ! 

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page   4
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    820  !  	X-26	LSS0057		LEONARD S. SZUBOWICZ	15-SEP-1987
    1	    821  ! 		CHANGE TEXT FOR THE RMS$_OK_DUP STATUS SUCH THAT THE MESSAGE
    1	    822  ! 		IS APPLICABLE TO $GET AS WELL AS $PUT.
    1	    823  ! 
    1	    824  ! 	X-25	PMV0068		PETER M. VATNE		11-SEP-1987
    1	    825  ! 		ADD RMS$_NOJNLLIC, NO RMS JOURNALING LICENSE, FOR LMF.
    1	    826  ! 
    1	    827  ! 	X-24	RNM0026		RUSSELL N. MURRAY	15-AUG-1987
    1	    828  ! 		ADD RMS$_SYNCH MESSAGE FOR NOTIFICATION OF SYNCHRONOUS
    1	    829  ! 		COMPLETION.
    1	    830  ! 
    1	    831  ! 	X-23	JEJ0479		JAMES E JOHNSON		13-AUG-1987
    1	    832  ! 		ADD RMS$_IVATRACE MESSAGE.
    1	    833  ! 
    1	    834  ! 	X-22	PMV0061		PETER M. VATNE		03-AUG-1987
    1	    835  ! 		CHANGE RESERVED MESSAGE RMS$_BUG_XX5 TO RMS$_BUG_RU_COMMIT_FAIL
    1	    836  ! 		TO CORRESPOND TO POSITIVE RMS BUGCHECK FTL$_RU_COMMIT_FAIL.
    1	    837  ! 
    1	    838  !  	X-21	LSS0042		LEONARD S. SZUBOWICZ	13-MAY-1987
    1	    839  ! 		CHANGE RESERVED MESSAGE RMS$_BUG_XX4 TO RMS$_BUG_RU_ABORT_FAIL
    1	    840  ! 		TO CORRESPOND TO POSITIVE RMS BUGCHECK FTL$_RU_ABORT_FAIL
    1	    841  ! 	
    1	    842  ! 	X-20	SAD0034		STUART A. DAVIDSON	12-MAR-1987 
    1	    843  ! 		DROP QUOTES FROM SNADTF MESSAGE TEXT.
    1	    844  ! 
    1	    845  ! 	X-19	PJH		PAUL J. HOULIHAN	19-JAN-1987
    1	    846  ! 		MERGE IN 17J1.
    1	    847  ! 
    1	    848  ! 		X-17J1	PJH		PAUL J. HOULIHAN	15-JAN-1987
    1	    849  ! 			FIX SEVERAL SMALL JNL PROBLEMS.
    1	    850  ! 			ADD RMS$_BUG_FLUSH_JNL_FAILED CODE.
    1	    851  ! 
    1	    852  ! 	X-18	KPS0148		KENNETH P. SIEGEL	04-DEC-1986
    1	    853  ! 		ADDED SNPPF (STATISTICS MONITORING NOT SUPPORTED FOR
    1	    854  ! 		PROCESS PERMANENT FILES) ERROR MESSAGE.
    1	    855  ! 
    1	    856  ! 	X-17	PMV0025		PETER M. VATNE		24-NOV-1986
    1	    857  ! 		ADD NEW MESSAGE, RMS$_NOTSAMEJNL.  THIS STATUS IS
    1	    858  ! 		USED TO RESTRICT AI/BI WITH RU JOURNALING TO A
    1	    859  ! 		SINGLE LONG-TERM JOURNAL FILE.
    1	    860  ! 
    1	    861  ! 	X-16	DAS		DAVID A. SOLOMON	18-NOV-1986
    1	    862  ! 		ADD NEW MESSAGE, RMS$_DELJNS. REMOVE RMS$_XCR (BY REPLACING IT
    1	    863  ! 		WITH A PLACEHOLDER), AS JOURNALING BITS ARE NO LONGER
    1	    864  ! 		SPECIFIED IN THE $XABJNL. SLIGHT WORDING CHANGE ON DETACHED
    1	    865  ! 		RU RECOVERY ERROR MESSAGES.
    1	    866  ! 
    1	    867  ! 	X-15	DAS		DAVID A. SOLOMON	12-NOV-1986
    1	    868  ! 		FIX ERROR IN X-5/X-6: JOURNALING VARIANT NOT MERGED
    1	    869  ! 		CORRECTLY, RESULTING IN SEVERAL JOURNALING MESSAGES NUMBERS
    1	    870  ! 		BEING DIFFERENT IN THE MAININE THAN WHAT THEY WERE ON THE
    1	    871  ! 		JOURNALING VARIANT. ALSO, MOVE NEW SNADTF MESSAGES TO RE-USE
    1	    872  ! 		AVAILABLE UNUSED MESSAGE NUMBERS, INSTEAD OF GENERATING NEW
    1	    873  ! 		ONES. FINALLY, CHANGE RMS$_BUG_ABORT TO RMS$_BUG_RU_ACTIVE.
    1	    874  ! 
    1	    875  ! 	X-14	SAD0014		STUART A. DAVIDSON	 4-NOV-1986
    1	    876  ! 		SNADTF - FIX TYPO IN DTFACC, DTFCRE

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page   5
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    877  ! 
    1	    878  ! 	X-13	SAD0014		STUART A. DAVIDSON	 3-NOV-1986
    1	    879  ! 		SNADTF - FIX TYPO, ADD 2 ADDITIONAL MESSAGES.
    1	    880  ! 
    1	    881  ! 	X-12	JEJ0377		JAMES E JOHNSON		29-OCT-1986
    1	    882  ! 		ADD NOEXTEND ERROR CODE TO FLAG FAILED RELATIVE FILE
    1	    883  ! 		EXTENDS DUE TO PREVIOUS FAILURES.
    1	    884  ! 
    1	    885  ! 	X-11	KPS0131		KENNETH P. SIEGEL	25-OCT-1986
    1	    886  ! 		ADDED SNS ERROR CODE FOR STATISTICS NOT SUPPORT ON
    1	    887  ! 		NON-DISK DEVICES.
    1	    888  ! 
    1	    889  ! 	X-10	SAD009		STUART A. DAVIDSON	06-OCT-1986
    1	    890  ! 		ADD COMPLETION CODES FOR SNADTF (IBM DATA XFER)
    1	    891  ! 
    1	    892  ! 	X-9	GJA0003		GARY J. ALLISON		29-SEP-1986
    1	    893  ! 		ADD DETACHED RECOVERY ERROR MESSAGES
    1	    894  ! 
    1	    895  ! 	X-8	PMV0008		PETER M. VATNE		24-SEP-1986
    1	    896  ! 		MODIFY RMS$_ACC_AIJ, RMS$_ACC_BIJ, AND RMS$_ACC_ATJ
    1	    897  ! 		TO ALSO OUTPUT THE STV.
    1	    898  ! 
    1	    899  ! 	X-7	JWT0243		JIM TEAGUE		 2-SEP-1986
    1	    900  ! 		ADD NEW ERRORS FOR COLLATED KEYS.
    1	    901  ! 
    1	    902  ! 	X-6	GJA		GARY J. ALLISON		29-JUL-1986
    1	    903  ! 		REMOVE DUPS FROM JNL MERGE.
    1	    904  ! 
    1	    905  ! 	X-5	GJA		GARY J. ALLISON		29-JUL-1986
    1	    906  ! 		MERGE JOURNALING INTO MAINLINE
    1	    907  ! 
    1	    908  ! 		X-3J6	DAS		DAVID A. SOLOMON	14-APR-1986
    1	    909  ! 			REMOVE RMS$_RUH_FILE (USING A GENERAL RUF MESSAGE INSTEAD).
    1	    910  ! 			CHANGE RMS$_RUH TEXT TO NOT HAVE FAO PARAMETERS. ADD
    1	    911  ! 			RMS$_BUG_RURECERR.
    1	    912  ! 	
    1	    913  ! 		X-3J5	JEJ0302		JAMES E JOHNSON		 4-APR-1986
    1	    914  ! 			ADD RMS$_RRF (ERROR DURING RU RECOVERY) AND
    1	    915  ! 			RMS$_RUH/RMS$_RUH_FILE (USED TO FORM TEXT OF RU HANDLER ERRORS
    1	    916  ! 			SENT TO OPCOM).
    1	    917  ! 	
    1	    918  ! 		X-3J4	JEJ0272		JAMES E JOHNSON		11-FEB-1986
    1	    919  ! 			ADD RMS$_RUF, RMS$_BUG_ABORT CODES.
    1	    920  ! 	
    1	    921  ! 		X-3J3	JEJ0237		JAMES E JOHNSON		16-DEC-1985
    1	    922  ! 			ADD RMS$_RUNDOWN CODE
    1	    923  ! 	
    1	    924  ! 		X-3J2	JEJ0205		JAMES E JOHNSON		25-OCT-1985
    1	    925  ! 			ADD JOURNAL SPECIFIC WRTJNL_XXJ ERROR CODES TO REPLACE
    1	    926  ! 			THE GENERIC ERRWRTJNL CODE.
    1	    927  ! 
    1	    928  ! 	X-4	JEJ0216		JAMES E JOHNSON		18-NOV-1985
    1	    929  ! 		MERGE X-3J2 INTO MAIN LINE FOR V4.4.
    1	    930  ! 
    1	    931  ! 		X-3J2	JEJ0205		JAMES E JOHNSON		25-OCT-1985
    1	    932  ! 			ADD JOURNAL SPECIFIC WRTJNL_XXJ ERROR CODES TO REPLACE
    1	    933  ! 			THE GENERIC ERRWRTJNL CODE.

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page   6
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    934  ! 
    1	    935  ! 	X-3	JEJ0161		JAMES E JOHNSON		 9-SEP-1985
    1	    936  ! 		UPDATE RMS JOURNALING MESSAGES.
    1	    937  ! 
    1	    938  ! 	X-2	JWT0212		JIM TEAGUE		 4-SEP-1985
    1	    939  ! 		ADD (WHAT IS FOR NOW) AN INTERNAL STATUS CODE TO 
    1	    940  ! 		DIFFERENTIATE BETWEEN FINDING A DELETED RECORD (DEL)
    1	    941  ! 		AND FINDING IT BUT WITH A DIFFERENT KEY (KEY_MISMATCH).
    1	    942  ! 		
    1	    943  ! 	V03-024	RAS0314		RON SCHAEFER		21-JUN-1984
    1	    944  ! 		WORK OVER THE MESSAGES ONE MORE TIME:  FIX TYPO IN OK_RNF,
    1	    945  ! 		DELETE ACPEOF ERROR, DELETE WSF ERROR.
    1	    946  ! 
    1	    947  ! 	V03-023	RAS0282		RON SCHAEFER		28-MAR-1984
    1	    948  ! 		MINOR TEXT CHANGES AND COMMENTS ADDED.
    1	    949  ! 		DELETE RMS$_COP ERROR.
    1	    950  ! 
    1	    951  ! 	V03-022	DAS0005		DAVID SOLOMON		19-MAR-1984
    1	    952  ! 		REMOVE RMS$_ECHO (NO LONGER NEEDED AS A RESULT OF NEW
    1	    953  ! 		IMPLEMENTATION FOR ECHO SYS$INPUT -> SYS$OUTPUT).
    1	    954  ! 
    1	    955  ! 	V03-021	JWT0150		JIM TEAGUE		01-FEB-1984
    1	    956  ! 		ADD RMS$_IFF FOR TRYING TO WRITE-ACCESS A FILE ON 
    1	    957  ! 		MAGTAPE THAT HAS NON-0 VALUE FOR ANSI BUFFER OFFSET.
    1	    958  ! 
    1	    959  ! 	V03-020	RAS0233		RON SCHAEFER		 9-JAN-1984
    1	    960  ! 		ADD RMS$_NOVALPRS ERROR FOR $SEARCH NOT PRECEDED BY
    1	    961  ! 		VALID $PARSE.
    1	    962  ! 
    1	    963  ! 	V03-019	JWT0148		JIM TEAGUE		20-DEC-1983
    1	    964  ! 		ADD A JNL XAB ERROR FOR CONFLICTING RU ATTRIBUTES
    1	    965  ! 		ON $CREATE: RMS$_XCR.
    1	    966  ! 
    1	    967  ! 	V03-018	RAS0171		RON SCHAEFER		28-JUL-1983
    1	    968  ! 		ADD RMS$_BUSY; A STRUCTURE-LESS ERROR (R0-ONLY STATUS)
    1	    969  ! 		REPLACING TEMP3.
    1	    970  ! 
    1	    971  ! 	V03-017	DAS0004		DAVID SOLOMON		28-JUN-1983
    1	    972  ! 		ADD RMS$_FILEPURGED; ADD RMS$_ACPEOF FOR ZALEWSKI.
    1	    973  ! 
    1	    974  ! 	V03-016	KPL0007		PETER LIEBERWIRTH	 8-JUN-1983
    1	    975  ! 		FIX SPELLING IN JNL ERROR MESSAGES, ADD CJF ERROR WHICH
    1	    976  ! 		WILL SOON SUBSUME COP AND CQE.
    1	    977  ! 
    1	    978  ! 	V03-015	DAS0003		DAVID SOLOMON		18-FEB-1983
    1	    979  ! 		ADD XNF (REPLACING TEMP9), TMR (NEW), LWC (NEW).
    1	    980  ! 
    1	    981  ! 	V03-014	KBT0497		KEITH B. THOMPSON	18-FEB-1983
    1	    982  ! 		ADD INCOMPSHR ERROR (REUSE OF TEMP1 SLOT)
    1	    983  ! 
    1	    984  ! 	V03-013	RAS0120		RON SCHAEFER		 2-FEB-1983
    1	    985  ! 		ADD ECHO PSEUDO-STATUS TO SUPPORT ECHO OF SYS$INPUT
    1	    986  ! 		TO SYS$OUTPUT.
    1	    987  ! 
    1	    988  ! 	V03-012	JWH0174		JEFFRY W. HORN		24-JAN-1983
    1	    989  ! 		ADD CQE AND COP ERRORS.
    1	    990  ! 

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page   7
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    991  ! 	V03-011	KPL0006		PETER LIEBERWIRTH	 7-JAN-1983
    1	    992  ! 		ADD OK_RULK FOR RECOVERY UNIT SUPPORT.
    1	    993  ! 
    1	    994  ! 		ADD REENT ERROR FOR $RENAME.
    1	    995  ! 		
    1	    996  ! 	V03-009	JWH0153		JEFFREY W. HORN		 8-DEC-1982
    1	    997  ! 		ADD NRU ERROR.
    1	    998  ! 
    1	    999  ! 	V03-008	JWH0152		JEFFREY W. HORN		 8-DEC-1982
    1	   1000  ! 		ADD JNS ERROR.
    1	   1001  ! 
    1	   1002  ! 	V03-007 MCN0002		MARIA DEL C. NASR	15-NOV-1982
    1	   1003  ! 		REPLACE ORD ERROR CODE ELIMINATED BY MCN0001, SINCE
    1	   1004  ! 		THE NETWORK CODE REFERENCES IT.
    1	   1005  ! 
    1	   1006  ! 	V03-006 MCN0001		MARIA DEL C. NASR	26-OCT-1982
    1	   1007  ! 		PRINT KEY OF REFERENCE OR AREA IDENTIFICATION NUMBER
    1	   1008  ! 		INSTEAD OF XAB ADDRESS FOR ERRORS RETURNED DURING
    1	   1009  ! 		INDEXED FILE CREATION.  ALSO RENAME ALL UNUSED ERROR
    1	   1010  ! 		CODES TO TEMP.
    1	   1011  ! 
    1	   1012  ! 	V03-005	JWH0102		JEFFREY W. HORN		24-SEP-1982
    1	   1013  ! 		ADD RUP ERROR.
    1	   1014  ! 
    1	   1015  ! 	V03-004	RAS0095		RON SCHAEFER		 7-SEP-1982
    1	   1016  ! 		ADD OVRDSKQUOTA ERROR.
    1	   1017  ! 
    1	   1018  ! 	V03-002	JWH0002		JEFFREY W. HORN		26-JUL-1982
    1	   1019  ! 		CONVERT TO .MSG FORMAT.   ADD RUM ERROR.
    1	   1020  ! 
    1	   1021  ! 	V03-001	JWH0001		JEFFREY W. HORN		20-JUL-1982
    1	   1022  ! 		ADD JNF, JOP, AND NOJ ERRORS.
    1	   1023  ! 
    1	   1024  ! 	V02-042	KPL0005		PETER LIEBERWIRTH	 4-FEB-1982
    1	   1025  ! 		ADD ERROR MESSAGES RMS$_EXENQLM AND RMS$_DEADLOCK
    1	   1026  ! 		CORRECTLY.
    1	   1027  ! 
    1	   1028  ! 	V02-041	CDS0001		C D SAETHER	24-JAN-1982
    1	   1029  ! 		ADD GBC AND CRMP ERRORS.
    1	   1030  ! 
    1	   1031  ! 	V02-040	JAK0069		J A KRYCKA	15-JAN-1982
    1	   1032  ! 		ADD SUPPORT AND NETFAIL ERROR CODES.
    1	   1033  ! 
    1	   1034  ! 	V02-039	JAK0068		J A KRYCKA	31-DEC-1981
    1	   1035  ! 		MODIFY TEXT FOR SUP, NET, BUG_DAP, AND ENV ERROR MESSAGES.
    1	   1036  ! 
    1	   1037  ! 	V02-038 LJA0001		LAURIE ANDERSON 20-DEC-1981
    1	   1038  ! 		MODIFIED SOME MESSAGES TO READ BETTER.
    1	   1039  ! 
    1	   1040  ! 	V02-037	JAK0063		J A KRYCKA	31-AUG-1981
    1	   1041  ! 		ADD CRE_STM SUCCESS CODE.
    1	   1042  ! 
    1	   1043  ! 	V02-036	KPL0004		PETER LIEBERWIRTH	13-JAN-1981
    1	   1044  ! 		ADD ENQ SEVERE ERROR MESSAGE, TO INDICATE $ENQ/$DEQ FAILURE.
    1	   1045  ! 		ALSO ADD SUCCESS CODES OK_RRL, AND OK_WAT.
    1	   1046  ! 
    1	   1047  ! 	V02-035	REFORMAT	J A KRYCKA	30-JUL-1980

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page   8
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1048  ! 
    1	   1049  ! --
    1	   1050 	PARAMETER RMS$_FACILITY = '00000001'X
    1	   1051 	PARAMETER RMS$V_STVSTATUS = '0000000E'X	 !  MOVE TO BIT 14 OF THE
    1	   1052  !  STATUS CODE IT INDICATES
    1	   1053  !  THAT STV CONTAINS A SECONDARY
    1	   1054  !  STATUS CODE.
    1	   1055 	PARAMETER RMS$_SUC = '00010001'X
    1	   1056 	PARAMETER RMS$_NORMAL = '00010001'X
    1	   1057  ! +
    1	   1058  ! 
    1	   1059  ! 	SUCCESS CODES
    1	   1060  ! 
    1	   1061  ! -
    1	   1062  !  BIT 16 = BIT 15 = 1
    1	   1063 	PARAMETER RMS$_STALL = '00018001'X
    1	   1064  !  (NOTE: USER NEVER RECEIVES THIS CODE)
    1	   1065 	PARAMETER RMS$_PENDING = '00018009'X
    1	   1066 	PARAMETER RMS$_OK_DUP = '00018011'X
    1	   1067 	PARAMETER RMS$_OK_IDX = '00018019'X
    1	   1068  !   (RECORD HAS BEEN INSERTED, BUT INDEX STRUCTURE IS NO LONGER
    1	   1069  !   OPTIMAL.)
    1	   1070 	PARAMETER RMS$_OK_RLK = '00018021'X
    1	   1071  !  (BECAUSE LOCKER SET RLK IN ROP FIELD WHEN RECORD WAS LOCKED.)
    1	   1072 	PARAMETER RMS$_OK_RRL = '00018029'X
    1	   1073  !  (BECAUSE READER SET RRL IN ROP FIELD WHEN ACCESSING RECORD.)
    1	   1074  !  (THIS CODE USED TO BE OK_RRV)
    1	   1075  ! OK_RRV	;MSG <record was inserted successfully in primary>
    1	   1076  !   (BUT IT MAY NOT BE ACCESSIBLE VIA ONE-OR-MORE SECONDARY KEYS,
    1	   1077  !   AND NOT BY RFA ADDRESSING. FILE RE-ORGANIZATION RECOMMENDED!)
    1	   1078 	PARAMETER RMS$_KFF = '00018031'X
    1	   1079 	PARAMETER RMS$_OK_ALK = '00018039'X
    1	   1080 	PARAMETER RMS$_OK_DEL = '00018041'X
    1	   1081 	PARAMETER RMS$_OK_RNF = '00018049'X
    1	   1082 	PARAMETER RMS$_OK_LIM = '00018051'X
    1	   1083 	PARAMETER RMS$_OK_NOP = '00018059'X
    1	   1084 	PARAMETER RMS$_OK_WAT = '00018061'X
    1	   1085  !  (BECAUSE WAT BIT IN ROP WAS SET AND RECORD WAS ALREADY
    1	   1086  !  LOCKED.)
    1	   1087 	PARAMETER RMS$_CRE_STM = '00018069'X
    1	   1088 	PARAMETER RMS$_OK_RULK = '00018071'X
    1	   1089 	PARAMETER RMS$_SYNCH = '00018079'X
    1	   1090 	PARAMETER RMS$_OK_ACT = '00018081'X
    1	   1091 	PARAMETER RMS$_OK_NOCURTID = '00018089'X
    1	   1092  ! +
    1	   1093  ! 
    1	   1094  ! 	SUCCESS CODES PASSED THRU FROM DRIVERS AND ACP -	BIT 15 = 0
    1	   1095  ! 
    1	   1096  ! -
    1	   1097 	PARAMETER RMS$_CONTROLC = '00010651'X	 !  TERMINAL I/O ABORTED DUE TO CTRL/C
    1	   1098 	PARAMETER RMS$_CONTROLO = '00010609'X
    1	   1099  !  TERMINAL I/O ABORTED DUE TO CTRL/O
    1	   1100 	PARAMETER RMS$_CONTROLY = '00010611'X
    1	   1101  !  TERMINAL I/O ABORTED DUE TO CTRL/Y
    1	   1102 	PARAMETER RMS$_CREATED = '00010619'X
    1	   1103  !  FILE WAS CREATED, NOT OPENED
    1	   1104 	PARAMETER RMS$_SUPERSEDE = '00010631'X

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page   9
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1105  !  CREATED FILE SUPERSEDED EXISTING VERSION
    1	   1106 	PARAMETER RMS$_OVRDSKQUOTA = '00010669'X
    1	   1107  !  DISK USAGE EXCEEDS DISK QUOTA
    1	   1108 	PARAMETER RMS$_FILEPURGED = '00010679'X
    1	   1109  !  CREATE FILE CAUSED OLDEST FILE
    1	   1110  !  VERSION TO BE PURGED
    1	   1111  ! +
    1	   1112  ! 
    1	   1113  ! 	WARNING CODES
    1	   1114  ! 
    1	   1115  ! -
    1	   1116  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1117 	PARAMETER RMS$_BOF = '00018198'X
    1	   1118 	PARAMETER RMS$_RNL = '000181A0'X
    1	   1119 	PARAMETER RMS$_RTB = '000181A8'X
    1	   1120 	PARAMETER RMS$_TMO = '000181B0'X
    1	   1121 	PARAMETER RMS$_TNS = '000181B8'X
    1	   1122 	PARAMETER RMS$_BES = '000181C0'X
    1	   1123 	PARAMETER RMS$_PES = '000181C8'X
    1	   1124  ! +
    1	   1125  ! 
    1	   1126  ! 	ERROR CODES - WITHOUT STV (THAT IS, STV MAY BE USED BUT NO ASSOCIATED
    1	   1127  ! 		      CONDITION CODE IS IN STV)
    1	   1128  ! 
    1	   1129  ! -
    1	   1130  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1131 	PARAMETER RMS$_ACT = '0001825A'X
    1	   1132 	PARAMETER RMS$_DEL = '00018262'X
    1	   1133 	PARAMETER RMS$_INCOMPSHR = '0001826A'X
    1	   1134 	PARAMETER RMS$_DNR = '00018272'X
    1	   1135 	PARAMETER RMS$_EOF = '0001827A'X
    1	   1136 	PARAMETER RMS$_FEX = '00018282'X
    1	   1137 	PARAMETER RMS$_FLK = '0001828A'X
    1	   1138 	PARAMETER RMS$_FNF = '00018292'X
    1	   1139 	PARAMETER RMS$_PRV = '0001829A'X
    1	   1140 	PARAMETER RMS$_REX = '000182A2'X
    1	   1141 	PARAMETER RMS$_RLK = '000182AA'X
    1	   1142 	PARAMETER RMS$_RNF = '000182B2'X
    1	   1143  !   (RECORD NEVER WAS IN FILE, OR HAS BEEN DELETED.)
    1	   1144 	PARAMETER RMS$_WLK = '000182BA'X
    1	   1145 	PARAMETER RMS$_EXP = '000182C2'X
    1	   1146 	PARAMETER RMS$_NMF = '000182CA'X
    1	   1147 	PARAMETER RMS$_SUP = '000182D2'X
    1	   1148  !  (NOTE THAT SUPPORT HAS REPLACED SUP EXCEPT WHEN RMS CANNOT
    1	   1149  !  MAP THE DAP STATUS CODE INTO A FAL STATUS CODE.)
    1	   1150  !  (NOTE ALSO THAT SUP SHOULD HAVE BEEN DEFINED AS A SEVERE
    1	   1151  !  ERROR CODE. HOWEVER, SUPPORT IS A SEVERE ERROR CODE.)
    1	   1152 	PARAMETER RMS$_RSA = '000182DA'X
    1	   1153 	PARAMETER RMS$_CRC = '000182E2'X
    1	   1154 	PARAMETER RMS$_WCC = '000182EA'X
    1	   1155 	PARAMETER RMS$_IDR = '000182F2'X
    1	   1156 	PARAMETER RMS$_LWC = '000182FA'X
    1	   1157 	PARAMETER RMS$_UNUSED1 = '00018302'X
    1	   1158 	PARAMETER RMS$_NOVALPRS = '0001830A'X
    1	   1159 	PARAMETER RMS$_KEY_MISMATCH = '00018312'X
    1	   1160 	PARAMETER RMS$_RUH = '0001831A'X
    1	   1161 	PARAMETER RMS$_JND = '00018322'X

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  10
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1162 	PARAMETER RMS$_BADPHASE = '0001832A'X
    1	   1163 	PARAMETER RMS$_TOWDR = '00018332'X
    1	   1164 	PARAMETER RMS$_NEXDR = '0001833A'X
    1	   1165 	PARAMETER RMS$_INVDRMSG = '00018342'X
    1	   1166 	PARAMETER RMS$_RU_ACTIVE = '0001834A'X
    1	   1167 	PARAMETER RMS$_UNKRUFAC = '00018352'X
    1	   1168 	PARAMETER RMS$_LIMBO = '0001835A'X
    1	   1169 	PARAMETER RMS$_IVATRACE = '00018362'X
    1	   1170 	PARAMETER RMS$_OPNOTSUP = '0001836A'X
    1	   1171 	PARAMETER RMS$_EXTNOTFOU = '00018372'X
    1	   1172 	PARAMETER RMS$_EXT_ERR = '0001837A'X
    1	   1173 	PARAMETER RMS$_SEMANTICS = '00018382'X
    1	   1174 	PARAMETER RMS$_LSCAN = '0001838A'X
    1	   1175 	PARAMETER RMS$_ROOTSRCH = '00018392'X
    1	   1176 	PARAMETER RMS$_IDXSEARCH = '0001839A'X
    1	   1177 	PARAMETER RMS$_NETBTS = '000183A2'X
    1	   1178  ! +
    1	   1179  ! 
    1	   1180  ! 	ERROR CODES - WITH STV ERROR CODE (THAT IS, STV CONTAINS AN ASSOCIATED CONDITION CODE)
    1	   1181  ! 
    1	   1182  ! -
    1	   1183  !  BIT 16 = BIT 15 = BIT 14 = 1
    1	   1184 	PARAMETER RMS$_ACC = '0001C002'X
    1	   1185 	PARAMETER RMS$_CRE = '0001C00A'X
    1	   1186 	PARAMETER RMS$_DAC = '0001C012'X
    1	   1187 	PARAMETER RMS$_ENT = '0001C01A'X
    1	   1188 	PARAMETER RMS$_EXT = '0001C022'X
    1	   1189 	PARAMETER RMS$_FND = '0001C02A'X
    1	   1190 	PARAMETER RMS$_MKD = '0001C032'X
    1	   1191 	PARAMETER RMS$_DPE = '0001C03A'X
    1	   1192 	PARAMETER RMS$_SPL = '0001C042'X
    1	   1193 	PARAMETER RMS$_DNF = '0001C04A'X
    1	   1194 	PARAMETER RMS$_RUF = '0001C052'X
    1	   1195 	PARAMETER RMS$_WRTJNL_AIJ = '0001C05A'X
    1	   1196 	PARAMETER RMS$_WRTJNL_BIJ = '0001C062'X
    1	   1197 	PARAMETER RMS$_WRTJNL_ATJ = '0001C06A'X
    1	   1198 	PARAMETER RMS$_WRTJNL_RUJ = '0001C072'X
    1	   1199 	PARAMETER RMS$_RRF = '0001C07A'X
    1	   1200 	PARAMETER RMS$_DDTM_ERR = '0001C082'X
    1	   1201  ! +
    1	   1202  ! 
    1	   1203  ! 	SEVERE ERROR CODES - WITHOUT STV (THAT IS, STV MAY BE USED BUT NO ASSOCIATED
    1	   1204  ! 			     CONDITION CODE IS IN STV)
    1	   1205  ! 
    1	   1206  ! -
    1	   1207  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1208 	PARAMETER RMS$_DTFCDDREC = '000183EC'X
    1	   1209 	PARAMETER RMS$_AID = '000183F4'X
    1	   1210 	PARAMETER RMS$_ALN = '000183FC'X
    1	   1211 	PARAMETER RMS$_ALQ = '00018404'X
    1	   1212 	PARAMETER RMS$_ANI = '0001840C'X
    1	   1213 	PARAMETER RMS$_AOP = '00018414'X
    1	   1214 	PARAMETER RMS$_BKS = '0001841C'X
    1	   1215 	PARAMETER RMS$_BKZ = '00018424'X
    1	   1216 	PARAMETER RMS$_BLN = '0001842C'X
    1	   1217 	PARAMETER RMS$_BUG = '00018434'X
    1	   1218 	PARAMETER RMS$_BUG_DDI = '0001843C'X

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  11
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1219 	PARAMETER RMS$_BUG_DAP = '00018444'X
    1	   1220 	PARAMETER RMS$_BUG_RU_ACTIVE = '0001844C'X
    1	   1221 	PARAMETER RMS$_BUG_RURECERR = '00018454'X
    1	   1222 	PARAMETER RMS$_BUG_FLUSH_JNL_FAILED = '0001845C'X
    1	   1223 	PARAMETER RMS$_BUG_RU_ABORT_FAIL = '00018464'X
    1	   1224 	PARAMETER RMS$_BUG_RU_COMMIT_FAIL = '0001846C'X
    1	   1225 	PARAMETER RMS$_BUG_XX6 = '00018474'X
    1	   1226 	PARAMETER RMS$_BUG_XX7 = '0001847C'X
    1	   1227 	PARAMETER RMS$_BUG_XX8 = '00018484'X
    1	   1228 	PARAMETER RMS$_BUSY = '0001848C'X
    1	   1229 	PARAMETER RMS$_CCR = '00018494'X
    1	   1230 	PARAMETER RMS$_CHG = '0001849C'X
    1	   1231 	PARAMETER RMS$_CHK = '000184A4'X
    1	   1232 	PARAMETER RMS$_COD = '000184AC'X
    1	   1233 	PARAMETER RMS$_CUR = '000184B4'X
    1	   1234 	PARAMETER RMS$_DAN = '000184BC'X
    1	   1235 	PARAMETER RMS$_DEV = '000184C4'X
    1	   1236 	PARAMETER RMS$_DIR = '000184CC'X
    1	   1237 	PARAMETER RMS$_DME = '000184D4'X
    1	   1238 	PARAMETER RMS$_DNA = '000184DC'X
    1	   1239 	PARAMETER RMS$_DTP = '000184E4'X
    1	   1240 	PARAMETER RMS$_DUP = '000184EC'X
    1	   1241 	PARAMETER RMS$_DVI = '000184F4'X
    1	   1242 	PARAMETER RMS$_ESA = '000184FC'X
    1	   1243 	PARAMETER RMS$_ESS = '00018504'X
    1	   1244 	PARAMETER RMS$_FAB = '0001850C'X
    1	   1245 	PARAMETER RMS$_FAC = '00018514'X
    1	   1246 	PARAMETER RMS$_FLG = '0001851C'X
    1	   1247 	PARAMETER RMS$_FNA = '00018524'X
    1	   1248 	PARAMETER RMS$_FNM = '0001852C'X
    1	   1249 	PARAMETER RMS$_FSZ = '00018534'X
    1	   1250 	PARAMETER RMS$_FOP = '0001853C'X
    1	   1251 	PARAMETER RMS$_FUL = '00018544'X
    1	   1252 	PARAMETER RMS$_IAL = '0001854C'X
    1	   1253 	PARAMETER RMS$_IAN = '00018554'X
    1	   1254 	PARAMETER RMS$_IDX = '0001855C'X
    1	   1255 	PARAMETER RMS$_IFI = '00018564'X
    1	   1256 	PARAMETER RMS$_IMX = '0001856C'X
    1	   1257 	PARAMETER RMS$_IOP = '00018574'X
    1	   1258 	PARAMETER RMS$_IRC = '0001857C'X
    1	   1259 	PARAMETER RMS$_ISI = '00018584'X
    1	   1260 	PARAMETER RMS$_KBF = '0001858C'X
    1	   1261 	PARAMETER RMS$_KEY = '00018594'X
    1	   1262 	PARAMETER RMS$_KRF = '0001859C'X
    1	   1263 	PARAMETER RMS$_KSZ = '000185A4'X
    1	   1264 	PARAMETER RMS$_LAN = '000185AC'X
    1	   1265 	PARAMETER RMS$_RUNDOWN = '000185B4'X
    1	   1266 	PARAMETER RMS$_LNE = '000185BC'X
    1	   1267 	PARAMETER RMS$_DTFCVT = '000185C4'X
    1	   1268 	PARAMETER RMS$_MRN = '000185CC'X
    1	   1269 	PARAMETER RMS$_MRS = '000185D4'X
    1	   1270 	PARAMETER RMS$_NAM = '000185DC'X
    1	   1271 	PARAMETER RMS$_NEF = '000185E4'X
    1	   1272 	PARAMETER RMS$_DTFQUASYN = '000185EC'X
    1	   1273 	PARAMETER RMS$_NOD = '000185F4'X
    1	   1274 	PARAMETER RMS$_NPK = '000185FC'X
    1	   1275 	PARAMETER RMS$_ORD = '00018604'X	 ! ! NOT USED AS OF V4

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  12
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1276 	PARAMETER RMS$_ORG = '0001860C'X
    1	   1277 	PARAMETER RMS$_PBF = '00018614'X
    1	   1278 	PARAMETER RMS$_PLG = '0001861C'X
    1	   1279 	PARAMETER RMS$_POS = '00018624'X
    1	   1280 	PARAMETER RMS$_DTFQUAVAL = '0001862C'X
    1	   1281 	PARAMETER RMS$_QUO = '00018634'X
    1	   1282 	PARAMETER RMS$_RAB = '0001863C'X
    1	   1283 	PARAMETER RMS$_RAC = '00018644'X
    1	   1284 	PARAMETER RMS$_RAT = '0001864C'X
    1	   1285 	PARAMETER RMS$_RBF = '00018654'X
    1	   1286 	PARAMETER RMS$_RFA = '0001865C'X
    1	   1287 	PARAMETER RMS$_RFM = '00018664'X
    1	   1288 	PARAMETER RMS$_RHB = '0001866C'X
    1	   1289 	PARAMETER RMS$_RLF = '00018674'X
    1	   1290 	PARAMETER RMS$_ROP = '0001867C'X
    1	   1291 	PARAMETER RMS$_RRV = '00018684'X
    1	   1292 	PARAMETER RMS$_RVU = '0001868C'X
    1	   1293 	PARAMETER RMS$_RSS = '00018694'X
    1	   1294 	PARAMETER RMS$_RST = '0001869C'X
    1	   1295 	PARAMETER RMS$_RSZ = '000186A4'X
    1	   1296 	PARAMETER RMS$_SEQ = '000186AC'X
    1	   1297 	PARAMETER RMS$_SHR = '000186B4'X
    1	   1298 	PARAMETER RMS$_SIZ = '000186BC'X
    1	   1299 	PARAMETER RMS$_SQO = '000186C4'X
    1	   1300 	PARAMETER RMS$_DTFSESEST = '000186CC'X
    1	   1301 	PARAMETER RMS$_SYN = '000186D4'X
    1	   1302 	PARAMETER RMS$_TRE = '000186DC'X
    1	   1303 	PARAMETER RMS$_TYP = '000186E4'X
    1	   1304 	PARAMETER RMS$_UBF = '000186EC'X
    1	   1305 	PARAMETER RMS$_USZ = '000186F4'X
    1	   1306 	PARAMETER RMS$_VER = '000186FC'X
    1	   1307 	PARAMETER RMS$_XNF = '00018704'X
    1	   1308 	PARAMETER RMS$_XAB = '0001870C'X
    1	   1309 	PARAMETER RMS$_ESL = '00018714'X
    1	   1310 	PARAMETER RMS$_DTFSESTER = '0001871C'X
    1	   1311 	PARAMETER RMS$_ENV = '00018724'X
    1	   1312 	PARAMETER RMS$_PLV = '0001872C'X
    1	   1313 	PARAMETER RMS$_MBC = '00018734'X
    1	   1314 	PARAMETER RMS$_RSL = '0001873C'X
    1	   1315 	PARAMETER RMS$_WLD = '00018744'X
    1	   1316 	PARAMETER RMS$_NET = '0001874C'X	 !  (NOTE THAT NETFAIL HAS REPLACED NET EXCEPT WHEN RMS CANNOT
    1	   1317  !  MAP THE DAP STATUS CODE INTO A FAL STATUS CODE.)
    1	   1318 	PARAMETER RMS$_IBF = '00018754'X
    1	   1319 	PARAMETER RMS$_REF = '0001875C'X
    1	   1320 	PARAMETER RMS$_IFL = '00018764'X
    1	   1321 	PARAMETER RMS$_DFL = '0001876C'X
    1	   1322 	PARAMETER RMS$_KNM = '00018774'X
    1	   1323 	PARAMETER RMS$_IBK = '0001877C'X
    1	   1324 	PARAMETER RMS$_KSI = '00018784'X
    1	   1325 	PARAMETER RMS$_LEX = '0001878C'X
    1	   1326 	PARAMETER RMS$_SEG = '00018794'X
    1	   1327 	PARAMETER RMS$_SNE = '0001879C'X	 ! ! NOT USED AS OF V4
    1	   1328 	PARAMETER RMS$_SPE = '000187A4'X	 ! ! NOT USED AS OF V4
    1	   1329 	PARAMETER RMS$_UPI = '000187AC'X
    1	   1330 	PARAMETER RMS$_ACS = '000187B4'X
    1	   1331 	PARAMETER RMS$_STR = '000187BC'X
    1	   1332 	PARAMETER RMS$_FTM = '000187C4'X

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  13
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1333 	PARAMETER RMS$_GBC = '000187CC'X
    1	   1334 	PARAMETER RMS$_DEADLOCK = '000187D4'X
    1	   1335 	PARAMETER RMS$_EXENQLM = '000187DC'X
    1	   1336 	PARAMETER RMS$_JOP = '000187E4'X
    1	   1337 	PARAMETER RMS$_RUM = '000187EC'X
    1	   1338 	PARAMETER RMS$_JNS = '000187F4'X
    1	   1339 	PARAMETER RMS$_NRU = '000187FC'X
    1	   1340 	PARAMETER RMS$_IFF = '00018804'X
    1	   1341 	PARAMETER RMS$_DTFTRATBL = '0001880C'X
    1	   1342 	PARAMETER RMS$_DTFUNSTYP = '00018814'X
    1	   1343 	PARAMETER RMS$_DTFVERMIS = '0001881C'X
    1	   1344  ! +
    1	   1345  ! 
    1	   1346  ! 	ERROR CODES - WITHOUT STV
    1	   1347  ! 
    1	   1348  ! 	  DTFACC AND DTFCRE WERE ORIGINALLY INCLUDED IN THIS FATAL SEVERITY 
    1	   1349  ! 	  (NO STV) GROUPING.  IN ORDER TO CHANGE THEIR SEVERITY TO ERROR 
    1	   1350  ! 	  (NO STV) AND RETAIN THE SAME MESSAGE CODE VALUE, THE FOLLOWING 
    1	   1351  ! 	  SHIFTS IN SEVERITY FROM FATAL TO ERROR AND THEN BACK AGAIN ARE
    1	   1352  ! 	  DONE, WHILE RETAINING THE SAME ORIGINAL BASE ASSOCIATED WITH EACH.
    1	   1353  ! 
    1	   1354  ! -
    1	   1355  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1356 	PARAMETER RMS$_DTFACC = '00018822'X
    1	   1357  ! +
    1	   1358  ! 
    1	   1359  ! 	SEVERE ERROR CODES - WITHOUT STV
    1	   1360  ! 
    1	   1361  ! -
    1	   1362  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1363 	PARAMETER RMS$_BOGUSCOL = '0001882C'X
    1	   1364 	PARAMETER RMS$_ERRREADCOL = '00018834'X
    1	   1365 	PARAMETER RMS$_ERRWRITECOL = '0001883C'X
    1	   1366 	PARAMETER RMS$_SNS = '00018844'X
    1	   1367 	PARAMETER RMS$_NOEXTEND = '0001884C'X	 ! +
    1	   1368  ! 
    1	   1369  ! 	ERROR CODES - WITHOUT STV
    1	   1370  ! 
    1	   1371  ! -
    1	   1372  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1373 	PARAMETER RMS$_DTFCRE = '00018852'X
    1	   1374  ! +
    1	   1375  ! 
    1	   1376  ! 	SEVERE ERROR CODES - WITHOUT STV
    1	   1377  ! 
    1	   1378  ! -
    1	   1379  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1380 	PARAMETER RMS$_DELJNS = '0001885C'X
    1	   1381 	PARAMETER RMS$_NOTSAMEJNL = '00018864'X
    1	   1382 	PARAMETER RMS$_SNPPF = '0001886C'X
    1	   1383  ! +
    1	   1384  ! 
    1	   1385  ! 	SEVERE ERRORS - WITH STV ERROR CODE (THAT IS, STV CONTAINS AN ASSOCIATED CONDITION CODE)
    1	   1386  ! 
    1	   1387  ! -
    1	   1388  !  BIT 16 = BIT 15 = BIT 14 = 1
    1	   1389 	PARAMETER RMS$_ATR = '0001C0CC'X

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  14
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1390 	PARAMETER RMS$_ATW = '0001C0D4'X
    1	   1391 	PARAMETER RMS$_CCF = '0001C0DC'X
    1	   1392 	PARAMETER RMS$_CDA = '0001C0E4'X
    1	   1393 	PARAMETER RMS$_CHN = '0001C0EC'X
    1	   1394 	PARAMETER RMS$_RER = '0001C0F4'X
    1	   1395 	PARAMETER RMS$_RMV = '0001C0FC'X
    1	   1396 	PARAMETER RMS$_RPL = '0001C104'X
    1	   1397 	PARAMETER RMS$_SYS = '0001C10C'X
    1	   1398 	PARAMETER RMS$_WER = '0001C114'X
    1	   1399 	PARAMETER RMS$_WPL = '0001C11C'X
    1	   1400 	PARAMETER RMS$_IFA = '0001C124'X
    1	   1401 	PARAMETER RMS$_WBE = '0001C12C'X
    1	   1402 	PARAMETER RMS$_ENQ = '0001C134'X
    1	   1403 	PARAMETER RMS$_NETFAIL = '0001C13C'X
    1	   1404 	PARAMETER RMS$_SUPPORT = '0001C144'X
    1	   1405 	PARAMETER RMS$_CRMP = '0001C14C'X
    1	   1406 	PARAMETER RMS$_DTFCFGFIL = '0001C154'X
    1	   1407 	PARAMETER RMS$_REENT = '0001C15C'X
    1	   1408 	PARAMETER RMS$_ACC_RUJ = '0001C164'X
    1	   1409 	PARAMETER RMS$_TMR = '0001C16C'X
    1	   1410 	PARAMETER RMS$_ACC_AIJ = '0001C174'X
    1	   1411 	PARAMETER RMS$_ACC_BIJ = '0001C17C'X
    1	   1412 	PARAMETER RMS$_ACC_ATJ = '0001C184'X
    1	   1413 	PARAMETER RMS$_DTFDEFFIL = '0001C18C'X
    1	   1414 	PARAMETER RMS$_DTFREGFIL = '0001C194'X
    1	   1415 	PARAMETER RMS$_JNLNOTAUTH = '0001C19C'X
    1	   1416 CDEC$ END OPTIONS
    1	   1417 
	   1418       INTEGER*4 STATUS,L1_LUN/19/,STICS_RATES(179),D_RATES(17)
	   1419       INTEGER*4 WIND_DECOMPRESS,VSTEP,MONTH,DAYOFMONTH
	   1420       REAL*4 D1/6.190722/,D2/1.1225857/      ! Default values used for E/Q calculation
	   1421       REAL*4 E_OVER_Q
	   1422       CHARACTER L1FILENAME*80, HMRNAME*16, SMRNAME*19, BRNAME*9
	   1423       CHARACTER FULL_L1_NAME*80, FIFO*3, TGS*3, RATEFLAG*1
	   1424       CHARACTER*17 MODE(10) /'Science mode     ','Engineering mode ',
	   1425      &                       'Maneuver mode    ','Contingency mode ',
	   1426      &                       'Science mode     ','Engineering mode ',
	   1427      &                       'Maneuver mode    ','Contingency mode ',
	   1428      &                       'Transitional mode','Unknown mode     '/,
	   1429      &             MODE_AT_START
	   1430       LOGICAL*1 BITRATE
	   1431       LOGICAL STARTFOUND,ENDFOUND,USE_SC_CLOCK,COMPARE_TIME_GE,GOODSPIN
	   1432       INTEGER I,J,K,L,M,N,NN,P,CNTR,ITEMP,ITEMP2,NAMELEN,YR2DIGIT,INCREMENT,SUMBR(0:2),SUMHMR,SUMSMR
	   1433       LOGICAL CODE_C,CODE_C2,COMP_CODE  !Compression codes 
	   1434       REAL*4  AVERAGE_RATES(0:31,1:12),	!Array for averaging rates per voltage step
	   1435      .	      BULK_SPEED,		!Solar wind speed
	   1436      .	      BULK_UNCER,		!Uncertainty in solar wind speed
	   1437      .        DVS_HITS(0:31),		!Counts # of hits for each voltage step
	   1438      .        DVS_STEPS,		!Counts number of voltage steps used
	   1439      .        MR_EFF(0:31,1:178),	!Efficiencies for rates at each voltage step
	   1440      .        RATE_DATA(12),    	!Stores average rates per spin averaged over all voltage step
	   1441      .	      SPEED_AVG,		!Average speed over interval
	   1442      .	      SPEED_HITS,		!Number of valid speeds over interval
	   1443      .        SPEED_SUM,		!Sum of speeds over interval
	   1444      .        SUM_RATES(0:31,1:12),	!Sums rates over Science Record interval
	   1445      .	      UNCER_AVG,		!Average error in speed
	   1446      .	      UNCER_SUM			!Sum of speed uncertainties

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  15
1.14                                                             6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   1447 
	   1448 C S/C position
	   1449       REAL*4 X1_GSE,Y1_GSE,Z1_GSE,     	!Start position
	   1450      .       X2_GSE,Y2_GSE,Z2_GSE,	!Stop position
	   1451      .       Re/6371.0/			!1 Re = 6371 km            
	   1452 
	   1453       INTEGER*4 EFF_REPLY,              !User response for raw counts or corrected counts
	   1454      .		ERR_SPD_FLAG,		!Set to 1 for bad speed
	   1455      .		FIRSTSPEED/0/,		!Set to -1 after getting speed at start time
	   1456      .          IFILE,			!Number of L1 files used
	   1457      .          INTERVAL,               !Number of Science Records for interval
	   1458      .          OFILE,			!Output file unit number
	   1459      .          PICKS(12),		!Selection numbers for STICS rates
	   1460      .          OPENMODE,		!Variable for opening next file
	   1461      .          Q,			!Increments for each new interval or data gap
	   1462      .          RATENUM,		!Number of rates selected
	   1463      .          SR_INTERVAL,		!Boundary for Science Record interval
	   1464      .          STX_RATE(12)		!Selected STICS rates
	   1465 C     naming the output file
	   1466       LOGICAL BRACK                     !A variable which is .TRUE. if there is
	   1467 C                                       a set of square brackets in the input file name.
	   1468 C                                       If there is, they, and everything between them,
	   1469 C                                       will be stripped out so that the output file is
	   1470 C                                       created in the user's account and not on the
	   1471 C                                       account from which we read the data.
	   1472       INTEGER*4 NINDEX,                 !used in rearranging the input file name to
	   1473 C                                       create the output file name.
	   1474      .          JSAVE                   !used in rearranging the input file name to
	   1475 C                                       create the output file name.
	   1476       CHARACTER*90 LISFIL               !holds the name of the input file
	   1477       CHARACTER INPUTFILES(1:100)*90, 	!L1 filename array for multiple inputs   
	   1478      .          OUTFILENAME*90
	   1479       CHARACTER USERNAME*40,		!User defined output filename
	   1480      .		ERR_MESSAGE*80		!Error message for bad speed
	   1481 
	   1482       CHARACTER RUN_TIME*8, RUN_DATE*9	!run time and date
	   1483  
	   1484       LOGICAL FIRSTFILE,		!Set to true if this is the 1st input file
	   1485      .	      FIRST_TIME		!Set to true for 1st time interval
	   1486 C
	   1487       RECORD /CORE/ SCI
	   1488       RECORD /HDBstr/ HDB
	   1489       RECORD /ST_RATE/ STICS_RATE
	   1490       RECORD /ST_PHA/ STICS_PHA
	   1491       RECORD /T/ START, END, TIME_TO_USE, INT_START_TIME
	   1492 
	   1493       RECORD /MA_RATE/ MASS_RATE   ! receives data on rates from MASS sensor
	   1494       RECORD /MA_PHA/ MASS_PHA     ! receives data on tof's from the mass sensor
	   1495 
	   1496 C
	   1497 C Get input L1 filename
	   1498 C
	   1499       L1FILENAME = 'DATA_DIR:WI*L1*.DAT'
	   1500       CALL WIND_GET_FILENAME(L1FILENAME, STATUS)
	   1501       IF(STATUS.NE.1)STOP
	   1502 
	   1503       FIRSTFILE = .TRUE.

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  16
1.14                                                             6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   1504       FIRST_TIME = .TRUE.
	   1505 C
	   1506 C Prompt user for start and stop times
	   1507 C
	   1508       TYPE 10
	   1509   10  FORMAT(' Enter Start time( -1/ means whole file) - Year,Month,Day,Hour,Min,Sec: '$) 
	   1510       ACCEPT*, START.YEAR,MONTH,DAYOFMONTH,START.HR,START.MIN,START.SEC
	   1511       IF(START.YEAR.GE.0)THEN
	   1512 C
	   1513 C Convert month and day to day of year.
	   1514 C
	   1515         CALL CNVRT_T_YRMONDAY_TO_YEARDAY( START, MONTH, DAYOFMONTH)
	   1516         IF(START.YEAR.LT.100)START.YEAR=START.YEAR+1900        ! Allow for 2-digit years
	   1517         IF(START.YEAR.LT.1980)START.YEAR=START.YEAR+100        ! Allow for years beyond 1999
	   1518         TYPE 12
	   1519   12    FORMAT(' Enter End time - Year,Month,Day,Hour,Min,Sec: '$) 
	   1520         ACCEPT*, END.YEAR,MONTH,DAYOFMONTH,END.HR,END.MIN,END.SEC
	   1521 C
	   1522 C Convert month and day to day of year.
	   1523 C
	   1524         CALL CNVRT_T_YRMONDAY_TO_YEARDAY( END, MONTH, DAYOFMONTH)
	   1525         IF(END.YEAR.LT.100)END.YEAR=END.YEAR+1900        ! Allow for 2-digit years
	   1526         IF(END.YEAR.LT.1980)END.YEAR=END.YEAR+100        ! Allow for years beyond 1999
	   1527       ELSE
	   1528         END.YEAR=3000
	   1529       ENDIF
	   1530 C 
	   1531 C Find out whether user wants raw counts or corrected counts
	   1532 C
	   1533       WRITE(6,*)' FOR RAW COUNTS, ENTER 1'
	   1534       WRITE(6,*)' FOR OMNI-DIRECTIONAL FLUX [#/(cm2-sec-sr-keV/amu)], ENTER 2'
	   1535       READ(5,*)EFF_REPLY
	   1536 C
	   1537 C Get Science Record Interval to average rates over
	   1538 C
	   1539       WRITE(6,*) 'ENTER SCIENCE RECORD INTERVAL'
	   1540       READ(5,*) INTERVAL
	   1541 C
	   1542 C Prompt user for output filename
	   1543 C
	   1544       WRITE(6,*)'Enter name for output file or <RETURN> for default name'
	   1545       READ(5,'(A)') USERNAME
	   1546 
	   1547 C   **********************************************************
	   1548 C   *                                                        *
	   1549 C   *                   CREATE OUTPUT FILE NAME              *
	   1550 C   *                                                        *
	   1551 C   **********************************************************
	   1552 C
	   1553 C   Strip the extension off of the input file name so
	   1554 C   that we can give a new extension to the output file
	   1555 C
	   1556       NINDEX  = 80
	   1557       DO WHILE (L1FILENAME(NINDEX:NINDEX) .NE. '_')
	   1558          NINDEX = NINDEX - 1
	   1559       END DO
	   1560 C

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  17
1.14                                                             6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   1561 C   Find out if the input file name contains some directory
	   1562 C   designation.  This, if it exists, it will also be stripped off.
	   1563 C
	   1564       I = 1
	   1565       DO WHILE (.NOT. BRACK .AND. I .LT. NINDEX)
	   1566          IF (L1FILENAME(I:I) .EQ. '[') BRACK = .TRUE.
	   1567          I = I + 1
	   1568       END DO
	   1569 C
	   1570 C   Now, finally, load the input file name into the output
	   1571 C   file name and add proper extension.
	   1572 C
	   1573       JSAVE = 1
	   1574       DO 3 I = 1, NINDEX
	   1575          IF (BRACK) THEN
	   1576             IF (L1FILENAME(I:I) .EQ. ']') BRACK = .FALSE.
	   1577          ELSE
	   1578             LISFIL(JSAVE:JSAVE) = L1FILENAME(I:I)
	   1579             JSAVE = JSAVE + 1
	   1580          ENDIF
	   1581    3  CONTINUE
	   1582       LISFIL(1:9) = 'WSTX_RATE'
	   1583       IF(EFF_REPLY .EQ. 2) THEN
	   1584          LISFIL(JSAVE+1:JSAVE+7) = 'FLX.TBL'        
	   1585       ELSE
	   1586          LISFIL(JSAVE+1:JSAVE+7) = 'RAW.TBL'
	   1587       ENDIF
	   1588       IF(USERNAME(1:12) .NE. '            ')THEN
	   1589         OUTFILENAME = USERNAME
	   1590       ELSE
	   1591         OUTFILENAME = LISFIL				! default name
	   1592       ENDIF
	   1593 
	   1594 C**********************************************************************
	   1595 
	   1596 C======================================================================
	   1597 C		OPEN L1 INPUT FILE AND READ DATA
	   1598 C======================================================================
	   1599 C
	   1600 C
	   1601 C Open L1 file for input, and read first SR, Core, HDB, and STICS RATES
	   1602 C
	   1603  1000 CONTINUE
	   1604       IF (FIRSTFILE .EQ. .FALSE.) THEN
	   1605         IFILE = IFILE + 1
	   1606 	OPENMODE = 2
	   1607 	CALL WIND_L1_OPEN_NEXT(L1_LUN,OPENMODE,L1FILENAME,L1_FILE_HEADER,STATUS)
	   1608       ELSE
	   1609         IFILE = 1
	   1610         FIRSTFILE = .FALSE.
	   1611         CALL WIND_L1_OPEN( L1_LUN, L1FILENAME, L1_FILE_HEADER, STATUS)
	   1612       ENDIF
	   1613       IF (STATUS .NE. 1) GOTO 9010
	   1614 
	   1615       INQUIRE(FILE=L1FILENAME,NAME=FULL_L1_NAME)
	   1616       INPUTFILES(IFILE) = FULL_L1_NAME
	   1617       WRITE(6,1001) FULL_L1_NAME

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  18
1.14                                                             6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   1618  1001 FORMAT(' OPEN FILE ',A)
	   1619 
	   1620       NAMELEN = INDEX(FULL_L1_NAME,' ') - 1
	   1621       IF (NAMELEN .LT. 1) NAMELEN=LEN(FULL_L1_NAME)
	   1622 
	   1623   13  CALL WIND_L1_READ_SR( L1_LUN, CNTR, L1_SR_HEADER, STATUS )
	   1624       IF(STATUS.EQ.RMS$_EOF)GO TO 1990
	   1625       IF (STATUS .NE. 1) GOTO 9020
	   1626       CALL WIND_L1_GET_BASIC( L1_LUN, SCI, STATUS)
	   1627       IF (STATUS .NE. 1) GOTO 9030
	   1628       CALL WIND_L1_GET_HDB( L1_LUN, HDB, STATUS)
	   1629       IF (STATUS .NE. 1) GOTO 9050
	   1630       CALL WIND_L1_GET_STICS( L1_LUN, STICS_RATE, STICS_PHA, STATUS )
	   1631       IF (STATUS .NE. 1) GOTO 9080
	   1632 
	   1633 C
	   1634 C Find first good spin, get year and DOY from it.
	   1635 C
	   1636       N=0
	   1637       GOODSPIN=.FALSE.
	   1638       DO 14 WHILE(.NOT.GOODSPIN)
	   1639         K=N/32+1
	   1640         NN=MOD(N,32)
	   1641         GOODSPIN=BTEST(L1_SR_HEADER.PRESENT(K),NN) 
	   1642         N=N+1
	   1643         IF(N.GT.59)GOTO 13 ! This SCI-REC all bad; get next
	   1644   14  CONTINUE
	   1645 C
	   1646 C If low bitrate, make sure that N points to an even spin (odd spins 
	   1647 C have been emptied by concatenation).
	   1648 C If high bitrate, decrement because N was incremented after the 1st 
	   1649 C good spin was found.
	   1650 C
	   1651       IF(.NOT.SCI.EDB(N).BITRATE)THEN
	   1652         N=N+MOD(N,2)
	   1653         IF(N.GE.60)GOTO 13
	   1654       ELSE
	   1655         N=N-1
	   1656       ENDIF
	   1657 C
	   1658 c Get S/C position at beginning of time period
	   1659 c
	   1660       IF(IFILE .EQ. 1) THEN
	   1661          X1_GSE = L1_SR_HEADER.GSE_POS.X/Re
	   1662          Y1_GSE = L1_SR_HEADER.GSE_POS.Y/Re
	   1663          Z1_GSE = L1_SR_HEADER.GSE_POS.Z/Re 
	   1664          WRITE(6,*)X1_GSE,Y1_GSE,Z1_GSE
	   1665       ENDIF
	   1666 C
	   1667 C Check FIFO mode, telemetry mode, and TGS mode
	   1668 C
	   1669       ITEMP = HDB.BDH.DAT(221)
	   1670       IF(IBITS(ITEMP,7,1).EQ.1)THEN
	   1671         FIFO='ON '
	   1672       ELSE
	   1673         FIFO='OFF'
	   1674       ENDIF

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  19
1.14                                                             6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   1675 C
	   1676       ITEMP = SCI.EDB(N).TLM_Mode
	   1677       IF(ITEMP.EQ.128)ITEMP=9
	   1678       IF(ITEMP.EQ.256)ITEMP=10
	   1679       IF(ITEMP.EQ.  0)ITEMP=10
	   1680       write(6,*)'mode at start = ',itemp
	   1681       MODE_AT_START = MODE(ITEMP)
	   1682 C
	   1683       ITEMP = STICS_RATE.EDB(N).RATE(179)
	   1684       IF(IBITS(ITEMP,7,1).EQ.1)THEN
	   1685         TGS='ON '
	   1686       ELSE
	   1687         TGS='OFF'
	   1688       ENDIF
	   1689 C
	   1690 C Display Rate Menu and prompt user to select up to 12 rates
	   1691 C
	   1692       IF(IFILE .EQ. 1) CALL RATE_MENU(TGS,PICKS,RATENUM)
	   1693 C
	   1694 C Get matrix rate efficiencies
	   1695 C
	   1696       IF(IFILE .EQ. 1) CALL OMR_EFF(MR_EFF)		!get efficiencies         
	   1697 
	   1698 C    ******************************************************************************
	   1699 C    *										  *
	   1700 C    *                OPEN OUTPUT FILE AND WRITE HEADER INFORMATION               *
	   1701 C    *										  *
	   1702 C    ******************************************************************************
	   1703       IF(IFILE .EQ. 1) THEN
	   1704         OPEN(UNIT= 20, NAME=OUTFILENAME, DEFAULTFILE='TABLE_DIR:', FORM='FORMATTED', 
	   1705      &     TYPE='NEW', RECL=300)
	   1706 
	   1707 	CALL TIME(RUN_TIME)			!Get run time
	   1708 	CALL DATE(RUN_DATE)			!Get run date
	   1709 
	   1710         WRITE(20,30)
	   1711   30    FORMAT(' STICS SELECTED RATES')
	   1712 	WRITE(20,'(A)') ' Run time  '//RUN_TIME//'   '//RUN_DATE
	   1713 
	   1714         WRITE(20,35) FULL_L1_NAME(1:NAMELEN)
	   1715   35    FORMAT(T10,'Input Level 1 Filename: ',A)
	   1716         WRITE(20,37)FIFO,TGS,MODE_AT_START
	   1717   37    FORMAT(T10,'FIFO mode is ',A3,T30,'TGS mode is ',A3,T50,' Telemetry mode is ',A17/)
	   1718 	WRITE(20,*)'Time shown is the START time for each interval'
	   1719 	WRITE(20,*)
	   1720 
	   1721 C
	   1722 C Print names of the selected rates to the output file
	   1723 C
	   1724         OFILE = 20						!Output file unit number
	   1725         CALL RATE_HEADER(OFILE,TGS,PICKS,RATENUM)
	   1726       ENDIF
	   1727 C
	   1728 C Set flags for start and stop
	   1729 C
	   1730       STARTFOUND=.FALSE.
	   1731       ENDFOUND=.FALSE.

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  20
1.14                                                             6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   1732 C
	   1733 C Initialize arrays to 0
	   1734 C
	   1735   50  DO 60 I = 0, 31
	   1736          DVS_HITS(I) = 0
	   1737          DO 70 J = 1,RATENUM
	   1738             SUM_RATES(I,J) = 0
	   1739   70	 CONTINUE
	   1740   60  CONTINUE
	   1741       DVS_STEPS = 0
	   1742       SPEED_HITS = 0
	   1743       SPEED_SUM = 0
	   1744       UNCER_SUM = 0
	   1745 C
	   1746 C Set Sci Rec boundary
	   1747 C
	   1748       SR_INTERVAL = L1_SR_HEADER.SR_COUNT + INTERVAL
	   1749 C
	   1750 C Get the Basic Core data
	   1751 C
	   1752  100  CALL WIND_L1_GET_BASIC( L1_LUN, SCI, STATUS)
	   1753       IF (STATUS .NE. 1) GOTO 9030
	   1754 C
	   1755 C Get Housekeeping Data Block
	   1756 C
	   1757       CALL WIND_L1_GET_HDB( L1_LUN, HDB, STATUS)
	   1758       IF (STATUS .NE. 1) GOTO 9050
	   1759 C
	   1760 C If HDB flag is bad, skip entire science record
	   1761 C
	   1762       IF(HDB.Qual.NE.0)GOTO 905
	   1763 C
	   1764 C Get STICS rates and PHA
	   1765 C
	   1766       CALL WIND_L1_GET_STICS( L1_LUN, STICS_RATE, STICS_PHA, STATUS )
	   1767       IF (STATUS .NE. 1) GOTO 9080
	   1768 
	   1769 C
	   1770 C Get appropriate increment for loop below. At HBR, there is data in every spin; at LBR
	   1771 C there is data only in even-numbered spins.
	   1772 C
	   1773       BITRATE = SCI.EDB(N).BITRATE
	   1774       IF(BITRATE)THEN
	   1775         INCREMENT=1
	   1776       ELSE
	   1777         INCREMENT=2
	   1778       ENDIF
	   1779 C
	   1780 C Decompress STICS rates for one science record and output
	   1781 C
	   1782       DO 900 J=0,59,INCREMENT
	   1783         TIME_TO_USE = SCI.EDB(J).W_TIME
	   1784 C
	   1785 C Compare time read to start time. If the time read is greater than or equal to the user-
	   1786 C specified start time, then begin processing data.
	   1787 C
	   1788         IF(.NOT.STARTFOUND)THEN

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  21
1.14                                                             6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   1789           STARTFOUND=COMPARE_TIME_GE(TIME_TO_USE,START)
	   1790         ENDIF
	   1791 
	   1792         IF(STARTFOUND)THEN
	   1793 C
	   1794 C Compare time read to end time. If time read is greater than the user-specified end time, 
	   1795 C we're done. Go to the part of the code that closes files and STOP's program.
	   1796 C
	   1797           ENDFOUND=COMPARE_TIME_GE(TIME_TO_USE,END)
	   1798           IF(ENDFOUND)GO TO 907
	   1799 C
	   1800 C Get start time for first interval
	   1801 C
	   1802 	  IF (FIRST_TIME) THEN
	   1803 	    INT_START_TIME = TIME_TO_USE
	   1804 	    FIRST_TIME = .FALSE.
	   1805       	    SR_INTERVAL = L1_SR_HEADER.SR_COUNT + INTERVAL
	   1806 	  ENDIF
	   1807 C
	   1808 C Get MASS Speed at start time and at the beginning of every Sci Record.
	   1809 C 
	   1810 	  IF((J .EQ. 0) .OR. (FIRSTSPEED .EQ. 0)) THEN
	   1811             CALL WIND_L1_GET_MASS(L1_LUN,MASS_RATE,MASS_PHA,STATUS)   ! mass data
	   1812             IF (STATUS .NE. 1) GOTO 9085
	   1813 
	   1814       	    CALL SMS_MASS_SPEED(HDB, MASS_RATE,  	!input
	   1815      .         BULK_SPEED, BULK_UNCER, ERR_SPD_FLAG , ERR_MESSAGE)	!output
	   1816 
	   1817             IF(ERR_SPD_FLAG .EQ. 0) THEN
	   1818 	      IF((BULK_UNCER .GT. 0) .AND. (BULK_UNCER .LT. 150.0)) THEN
	   1819 	        SPEED_HITS = SPEED_HITS + 1.0
	   1820 	        SPEED_SUM  = SPEED_SUM + BULK_SPEED
	   1821 		UNCER_SUM  = UNCER_SUM + BULK_UNCER
	   1822 	      ENDIF
	   1823             ELSE
	   1824 	      WRITE(6,*) ERR_MESSAGE
	   1825             ENDIF
	   1826 	  ENDIF
	   1827 
	   1828   	  FIRSTSPEED = -1		!Change after giving 1st speed
	   1829 
	   1830 C
	   1831 C Check quality flags. If ANY quality flags are bad, skip this spin
	   1832 C
	   1833           IF(BITRATE)THEN
	   1834             IF(SCI.EDB(J).Qual.NE.0)GOTO 900
	   1835           ELSE
	   1836             IF((SCI.EDB(J).Qual.NE.0).OR.(SCI.EDB(J+1).Qual.NE.0))GOTO 900
	   1837           ENDIF
	   1838           IF(SCI.EDB(J).ST_HMR_Qual.NE.0)GOTO 900
	   1839           IF(SCI.EDB(J).ST_SMR_Qual.NE.0)GOTO 900
	   1840           IF(SCI.EDB(J).ST_BR_Qual.NE.0)GOTO 900
	   1841           IF(SCI.EDB(J).ST_OMR_Qual.NE.0)GOTO 900
	   1842           IF(SCI.EDB(J).ST_ER_Qual.NE.0)GOTO 900
	   1843 C
	   1844 C Get voltage step and determine if the deflection systems are on.
	   1845 C

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  22
1.14                                                             6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   1846           ITEMP = STICS_RATE.EDB(J).RATE(179)
	   1847           VSTEP = IBITS(ITEMP,0,5)
	   1848           ITEMP=HDB.BDH.DAT(24)
	   1849           ITEMP2=HDB.BDH.DAT(25)
	   1850 C
	   1851 C The logic that follows assumes that both + and - high voltages are on or both are off.
	   1852 C If both are on, calculate e/q. If both are off, set e/q to 0.
	   1853 C
	   1854           IF(IAND(IBITS(ITEMP,7,1), IBITS(ITEMP2,0,1)).EQ.1)THEN
	   1855             E_OVER_Q = D1 * (D2**VSTEP)
	   1856           ELSE
	   1857             E_OVER_Q = 0
	   1858           ENDIF
	   1859 C
	   1860 C Get bit rate
	   1861 C
	   1862           IF(SCI.EDB(J).BITRATE)THEN
	   1863             RATEFLAG='H'                ! High bit rate
	   1864           ELSEIF(TIME_TO_USE.YEAR.NE.0)THEN
	   1865             RATEFLAG='L'                ! Low bit rate
	   1866           ELSE
	   1867             RATEFLAG='?'                ! Bit rate indeterminate, due to bad quality data
	   1868           ENDIF
	   1869 C
	   1870 C Compression codes for STICS Matrix rates are in the HDB in byte 189, bit 1, and bit 2
	   1871 C for the Engineering rates (except the UFSR, URSR, and TCRs which is in bit 1) 
	   1872 C
	   1873           ITEMP = HDB.BDH.DAT(189)
	   1874           CODE_C = BTEST(ITEMP,1)
	   1875 	  CODE_C2= BTEST(ITEMP,2)
	   1876 C
	   1877 C Get TGS mode
	   1878 C
	   1879           ITEMP = STICS_RATE.EDB(N).RATE(179)
	   1880           IF(IBITS(ITEMP,7,1).EQ.1)THEN
	   1881             TGS='ON '
	   1882           ELSE
	   1883             TGS='OFF'
	   1884           ENDIF
	   1885 c
	   1886 C Decompress only the selected rates
	   1887 C
	   1888           DO 600 K = 1, RATENUM
	   1889 C
	   1890 C Set compression codes for different rates in Normal mode
	   1891 C
	   1892 	    IF(((PICKS(K).GE.1) .AND. (PICKS(K).LE.164)) .OR.
	   1893      +         ((PICKS(K).GE.174) .AND. (PICKS(K).LE.176))) THEN
	   1894                 COMP_CODE = CODE_C
	   1895 	    ELSE
	   1896 	        COMP_CODE = CODE_C2
	   1897 	    ENDIF
	   1898 C     
	   1899 C If TGS mode, make compression code changes, decompress and sum FSR's for each telescope
	   1900 C
	   1901 	    IF(TGS .EQ. 'ON ') THEN
	   1902 		IF((PICKS(K).GE.156) .AND. (PICKS(K).LE.161)) THEN

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  23
1.14                                                             6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   1903 		   COMP_CODE = CODE_C2
	   1904 		   DO 150 I = 155,160
	   1905 		     STICS_RATES(I+1)=WIND_DECOMPRESS(STICS_RATE.EDB(J).RATE(I),COMP_CODE)
	   1906  150		   CONTINUE
	   1907                    STX_RATE(K) = STICS_RATES(PICKS(K)) + STICS_RATES(PICKS(K)+1)  
	   1908 		   GO TO 600
	   1909 	        ENDIF
	   1910                 IF(PICKS(K).EQ. 164) COMP_CODE = CODE_C2
	   1911             ENDIF
	   1912 C
	   1913 C Decompress STICS rates and get sum of HMR's:
	   1914 C
	   1915 	    IF(PICKS(K).EQ.1) THEN
	   1916                SUMHMR = 0
	   1917                DO 200 I=0,95
	   1918                   STICS_RATES(I+1)=WIND_DECOMPRESS(STICS_RATE.EDB(J).RATE(I),COMP_CODE)
	   1919                   SUMHMR = SUMHMR + STICS_RATES(I+1)
	   1920  200           CONTINUE
	   1921 	       STX_RATE(K) = SUMHMR
	   1922                GO TO 600
	   1923             ENDIF
	   1924 C
	   1925 C Decompress STICS rates, and get sum of SMR's:
	   1926 C
	   1927             IF(PICKS(K).EQ.97) THEN
	   1928                SUMSMR = 0
	   1929                DO 210 I=96,119
	   1930                   STICS_RATES(I+1)=WIND_DECOMPRESS(STICS_RATE.EDB(J).RATE(I),COMP_CODE)
	   1931                   SUMSMR = SUMSMR + STICS_RATES(I+1)
	   1932  210           CONTINUE
	   1933                STX_RATE(K) = SUMSMR
	   1934                GO TO 600
	   1935      	    ENDIF
	   1936 C
	   1937 C Decompress STICS rates, and get sum of BR0, BR1 and BR2:
	   1938 C
	   1939             IF((PICKS(K) .GE. 121) .AND. (PICKS(K) .LE. 137)) THEN
	   1940                DO 220 I=120,143
	   1941                   STICS_RATES(I+1)=WIND_DECOMPRESS(STICS_RATE.EDB(J).RATE(I),COMP_CODE)
	   1942  220           CONTINUE
	   1943                DO 230 L=0,2
	   1944                   SUMBR(L) = 0
	   1945                   DO 225 M=1,8
	   1946                     SUMBR(L) = SUMBR(L) + STICS_RATES(120+L*8+M)
	   1947  225             CONTINUE  
	   1948  230          CONTINUE  
	   1949                STX_RATE(K) = SUMBR((PICKS(K) - 121)/8)
	   1950                GO TO 600
	   1951             ENDIF
	   1952 C
	   1953 C Decompress any other STICS rate 
	   1954 C
	   1955             P = PICKS(K) - 1
	   1956             STX_RATE(K)=WIND_DECOMPRESS(STICS_RATE.EDB(J).RATE(P),COMP_CODE)
	   1957  600      CONTINUE	
	   1958 	    
	   1959       

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  24
1.14                                                             6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   1960           DVS_HITS(VSTEP) = DVS_HITS(VSTEP) + 1.0			!Increment voltage step hit counter
	   1961           DO 700 I= 1,RATENUM
	   1962             SUM_RATES(VSTEP,I)=SUM_RATES(VSTEP,I) + STX_RATE(I)	!Sum individual rates for each voltage step
	   1963  700      CONTINUE
	   1964 
	   1965         ENDIF !{startfound}
	   1966 
	   1967  900  CONTINUE
	   1968 C
	   1969 C Read next Science Record
	   1970 C
	   1971  905  CALL WIND_L1_READ_SR( L1_LUN, CNTR, L1_SR_HEADER, STATUS )
	   1972 
	   1973 
	   1974       IF (.NOT. STARTFOUND) GO TO 100
	   1975 
	   1976       IF((ABS(L1_SR_HEADER.SR_COUNT - SR_INTERVAL) .GT. 500) .AND. (STATUS .NE. RMS$_EOF))
	   1977      +     GOTO 905   !In case of bad Sci Rec Num
	   1978 
	   1979 C
	   1980 C Average rates over interval. Average rates if END_TIME reached or at EOF.
	   1981 C
	   1982  907  IF((L1_SR_HEADER.SR_COUNT .GE. SR_INTERVAL) .OR.
	   1983      +   (ENDFOUND) .OR. (STATUS .EQ. RMS$_EOF))THEN
	   1984          Q = Q + 1
	   1985 C
	   1986 C Initialize matrix to zeros
	   1987 C
	   1988          DO 915 K = 1, RATENUM
	   1989            RATE_DATA(K) = 0
	   1990            DO 910 I = 0, 31
	   1991              AVERAGE_RATES(I,K) = 0
	   1992  910       CONTINUE
	   1993  915     CONTINUE
	   1994 
	   1995 C
	   1996 C Find average speed
	   1997 C
	   1998          IF(SPEED_HITS.GT.0) THEN
	   1999 	   SPEED_AVG = SPEED_SUM/SPEED_HITS
	   2000 	   UNCER_AVG = UNCER_SUM/SPEED_HITS
	   2001 	 ELSE 
	   2002 	   SPEED_AVG = 0
	   2003 	   UNCER_AVG = 0
	   2004 	 ENDIF
	   2005 
	   2006 C
	   2007 C Find average of each rate over interval
	   2008 C
	   2009          DO 925 I = 0, 31
	   2010            IF(DVS_HITS(I) .GT. 0) DVS_STEPS = DVS_STEPS + 1.0   !count number of voltage steps used 
	   2011            IF(DVS_HITS(I) .EQ. 0) DVS_HITS(I) = 1.0             !to avoid dividing by 0
	   2012            DO 920 K = 1, RATENUM
	   2013              IF(RATEFLAG .EQ. 'H') THEN				!In High Bit rate, rates are in counts per spin
	   2014                 AVERAGE_RATES(I,K) = SUM_RATES(I,K)/DVS_HITS(I)	!In Low Bit rate, rates are summed over two spins
	   2015              ELSE       				        !We want counts per spin, so divide by 2 in LBR.
	   2016                 AVERAGE_RATES(I,K) = SUM_RATES(I,K)/DVS_HITS(I)/2.0

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  25
1.14                                                             6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   2017              ENDIF
	   2018  920       CONTINUE
	   2019  925     CONTINUE
	   2020 
	   2021 	 WRITE(6,'(F8.1)') DVS_STEPS
	   2022          IF(DVS_STEPS.EQ.0)DVS_STEPS = 1.0			!to avoid dividing by 0 when DPPS stepping is OFF
	   2023 C
	   2024 C Correct for efficiencies 
	   2025 C                         
	   2026          IF(EFF_REPLY .EQ. 2) THEN
	   2027            DO 935 K = 1,RATENUM
	   2028              IF((TGS .EQ. 'ON ').AND.(PICKS(K).GE.156).AND.(PICKS(K).LE.164))GOTO 935
	   2029              DO 930 I = 0,31
	   2030                IF(MR_EFF(I,PICKS(K)).GT.0) AVERAGE_RATES(I,K) = AVERAGE_RATES(I,K)/MR_EFF(I,PICKS(K))
	   2031  930         CONTINUE
	   2032  935       CONTINUE
	   2033          ENDIF
	   2034 
	   2035 C
	   2036 C Sum each rate over all voltage steps then divide by the total number of voltage steps
	   2037 C
	   2038          DO 937 K = 1,RATENUM
	   2039            DO 936 I = 0,31
	   2040              RATE_DATA(K) = RATE_DATA(K) + AVERAGE_RATES(I,K)
	   2041  936       CONTINUE
	   2042            RATE_DATA(K) = RATE_DATA(K)/DVS_STEPS
	   2043  937     CONTINUE
	   2044 C
	   2045 C Write rates and interval end time to output file
	   2046 C
	   2047          WRITE(20,940)INT_START_TIME.YEAR,INT_START_TIME.DOY,INT_START_TIME.HR,
	   2048      +                INT_START_TIME.MIN,INT_START_TIME.SEC,SPEED_AVG,UNCER_AVG,
	   2049      +                (RATE_DATA(K),K=1,RATENUM)
	   2050  940     FORMAT(1X,I4,1X,I3,1X,I2,':',I2.2,':',I2.2,2X,F6.1,4X,F6.1,2X,12(2X,E13.7))
	   2051 
	   2052 	 INT_START_TIME = TIME_TO_USE 
	   2053 
	   2054          IF(ENDFOUND) GO TO 2000
	   2055          IF(STATUS.EQ.RMS$_EOF)GO TO 1990
	   2056          GO TO 50
	   2057       ENDIF !{L1_SR_HEADER.SR_COUNT...}
	   2058 
	   2059       IF (STATUS .NE. 1) GOTO 9020
	   2060          
	   2061       GO TO 100
	   2062 C
	   2063 C Close files and STOP
	   2064 C
	   2065 1990  IF(START.YEAR .GE. 0)GO TO 1000
	   2066 2000  CALL WIND_L1_CLOSE( L1_LUN, STATUS )      ! Close input file
	   2067       IF (STATUS .NE. 1) GOTO 9090
	   2068 c
	   2069 c Get S/C position at end of time period
	   2070 c
	   2071       X2_GSE = L1_SR_HEADER.GSE_POS.X/Re
	   2072       Y2_GSE = L1_SR_HEADER.GSE_POS.Y/Re 
	   2073       Z2_GSE = L1_SR_HEADER.GSE_POS.Z/Re 

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  26
1.14                                                             6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   2074       WRITE(6,*)X2_GSE,Y2_GSE,Z2_GSE
	   2075 
	   2076       CLOSE(UNIT=20)                            ! Close output file
	   2077       STOP
	   2078 C
	   2079 C Come here for errors
	   2080 C
	   2081 9010  TYPE *,'ERROR OPENING L1 FILE; STATUS=',STATUS
	   2082       STOP
	   2083 9020  TYPE *,'ERROR READING SCIENCE RECORD ',CNTR,'; STATUS=',STATUS
	   2084       STOP
	   2085 9030  TYPE *,'ERROR GETTING BASIC CORE; STATUS=',STATUS
	   2086       STOP
	   2087 9050  TYPE *,'ERROR GETTING HDB; STATUS=',STATUS
	   2088       STOP
	   2089 9080  TYPE *,'ERROR GETTING STICS DATA; STATUS=',STATUS
	   2090       STOP
	   2091 9085  TYPE *,'ERROR GETTING MASS DATA; STATUS=',STATUS
	   2092       STOP
	   2093 9090  TYPE *,'ERROR CLOSING L1 FILE; STATUS=',STATUS
	   2094       STOP
	   2095       END


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1904 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               143252 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              2368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               17112   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2177 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               167457


ENTRY POINTS

    Address   Type  Name        
                                
  4-00000000        WSTICS_RATES


VARIABLES

    Address   Type  Name              Address   Type  Name              Address   Type  Name         
                                                                                                     
REG-00000000  L*1   BITRATE         0-00000050  L*4   COMP_CODE       2-00000D2C  I*4   ERR_SPD_FLAG 
  2-00000D40# L*4   BRACK           1-000006AC  R*4   D1                  **      R*4   E_OVER_Q     
  2-00000D70  CHAR  BRNAME          1-000006B0  R*4   D2              2-00000CC8  CHAR  FIFO         
  2-00000D20  R*4   BULK_SPEED      2-00000D10  I*4   DAYOFMONTH      0-00000048  L*4   FIRSTFILE    
  2-00000D24  R*4   BULK_UNCER      0-00000040# R*4   DVS_STEPS       1-000006B8  I*4   FIRSTSPEED   
  2-00000D18  I*4   CNTR            2-00000D28  I*4   EFF_REPLY       0-0000004C  L*4   FIRST_TIME   
REG-0000000E  L*4   CODE_C          0-00000068  L*4   ENDFOUND        2-00007690  CHAR  FULL_L1_NAME 
REG-00000004  L*4   CODE_C2         2-00009AC8  CHAR  ERR_MESSAGE   REG-########  L*4   GOODSPIN     

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  27
1.14                            Symbol Table                     6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

    Address   Type  Name              Address   Type  Name              Address   Type  Name         
                                                                                                     
  2-00000D48  CHAR  HMRNAME       REG-00000009  I*4   NAMELEN         0-00000054  L*4   STARTFOUND   
REG-########  I*4   I             REG-00000001  I*4   NINDEX          2-00000D08  I*4   STATUS       
  2-00000D30  I*4   IFILE         REG-########  I*4   NN            REG-0000000B  I*4   SUMHMR       
REG-00000010  I*4   INCREMENT       0-00000054  I*4   OFILE         REG-00000003  I*4   SUMSMR       
  2-00000D34  I*4   INTERVAL        0-00000054  I*4   OPENMODE        2-00000CD0  CHAR  TGS          
  0-00000044# I*4   ITEMP           2-00009A68  CHAR  OUTFILENAME     0-00000038# R*4   UNCER_AVG    
      **      I*4   ITEMP2        REG-00000009  I*4   P             REG-00000025  R*4   UNCER_SUM    
  0-00000080# I*4   J               2-00000D38  I*4   Q               2-00000D98  CHAR  USERNAME     
REG-00000017  I*4   JSAVE           2-00000CD8  CHAR  RATEFLAG        2-00000D14  L*4   USE_SC_CLOCK 
REG-########  I*4   K               2-00000D3C  I*4   RATENUM         0-00000084  I*4   VSTEP        
REG-00000001  I*4   L               1-000006B4  R*4   RE              0-00000054  R*4   X1_GSE       
  2-00007640  CHAR  L1FILENAME      2-00000DC0  CHAR  RUN_DATE        0-00000048  R*4   X2_GSE       
  1-000006A8  I*4   L1_LUN          2-00000CE0  CHAR  RUN_TIME        0-00000058  R*4   Y1_GSE       
  2-000076E0  CHAR  LISFIL          2-00000D58  CHAR  SMRNAME         0-0000004C  R*4   Y2_GSE       
REG-00000014  I*4   M               0-0000003C# R*4   SPEED_AVG       2-00000D1C  I*4   YR2DIGIT     
  2-00000D80  CHAR  MODE_AT_START REG-00000023  R*4   SPEED_HITS      0-0000005C  R*4   Z1_GSE       
  2-00000D0C  I*4   MONTH         REG-00000024  R*4   SPEED_SUM       0-00000050  R*4   Z2_GSE       
REG-########  I*4   N               0-0000006C  I*4   SR_INTERVAL                                    


RECORDS

    Address   Name            Structure                Bytes     Address   Name            Structure                Bytes
                                                                                                                         
  2-00000CF0  END             T                            8   2-00009B18  SCI             CORE                      7384
  2-0000B7F0  HDB             HDBSTR                     324   2-00000CE8  START           T                            8
  2-00000D00  INT_START_TIME  T                            8   2-0000E458  STICS_PHA       ST_PHA                   36720
  6-00000000  L1_FILE_HEADER  ST_L1_FILE_HEADER          400   2-0000B938  STICS_RATE      ST_RATE                  11040
  6-00000190  L1_SR_HEADER    ST_L1_SR_HEADER            244   2-00000CF8  TIME_TO_USE     T                            8
  2-00017B48  MASS_PHA        MA_PHA                   45960                                                             
  2-000173C8  MASS_RATE       MA_RATE                   1920                                                             


ARRAYS

     Address  Type  Name                 Bytes  Dimensions

  2-00001140  R*4   AVERAGE_RATES         1536  (0:31, 12)
  2-00022F14  R*4   DVS_HITS               128  (0:31)
  2-00022ED0  I*4   D_RATES                 68  (17)
  2-00007740  CHAR  INPUTFILES            9000  (100)
  1-000006C0  CHAR  MODE                   170  (10)
  2-00001740  R*4   MR_EFF               22784  (0:31, 178)
  2-00000E0C  I*4   PICKS                   48  (12)
  2-00000DDC  R*4   RATE_DATA               48  (12)
  2-00000E70  I*4   STICS_RATES            716  (179)
  2-00000E3C  I*4   STX_RATE                48  (12)
  2-00000DD0  I*4   SUMBR                   12  (0:2)
  2-00007040  R*4   SUM_RATES             1536  (0:31, 12)




WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  28
1.14                            Symbol Table                     6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

LABELS

    Address   Label     Address   Label     Address   Label     Address   Label     Address   Label     Address   Label
                                                                                                                       
  4-00000874   3      4-000013E8   50     4-00000000   225        **       915    4-00000990   1000       **       9080
      **       10     4-00001528   60         **       230    4-000023A0   920        **       1001       **       9085
      **       12     4-00000000   70     4-00001EC4   600    4-000023AC   925    4-000027B4   1990       **       9090
      **       13         **       100    4-00000000   700    4-000024E4   930        **       2000                    
      **       14     4-00000000   150    4-000020A4   900    4-000024F0   935        **       9010                    
      **       30     4-00000000   200    4-000020D0   905    4-00000000   936        **       9020                    
      **       35     4-00000000   210    4-0000213C   907    4-00000000   937        **       9030                    
      **       37     4-00000000   220    4-00000000   910        **       940        **       9050                    


FUNCTIONS AND SUBROUTINES REFERENCED

  Type  Name                                Type  Name                                Type  Name                             
                                                                                                                             
        CNVRT_T_YRMONDAY_TO_YEARDAY         I*4   WIND_DECOMPRESS                           WIND_L1_GET_STICS                
  L*4   COMPARE_TIME_GE                           WIND_GET_FILENAME                         WIND_L1_OPEN                     
        OMR_EFF                                   WIND_L1_CLOSE                             WIND_L1_OPEN_NEXT                
        RATE_HEADER                               WIND_L1_GET_BASIC                         WIND_L1_READ_SR                  
        RATE_MENU                                 WIND_L1_GET_HDB                                                            
        SMS_MASS_SPEED                            WIND_L1_GET_MASS                                                           

WSTICS_RATES                                                     6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  29
1.14                            Symbol Table                     6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   2096 
	   2097 
	   2098 
	   2099 C*****************************************************************************80
	   2100       SUBROUTINE RATE_MENU(TGS_MODE,SELECTION,NUM)
	   2101 C This subroutine displays a menu of the available rates and prompts the user
	   2102 C to choose the ones required. Or the user can go with a list of pre-selected
	   2103 C rates. When TGS is on there are no Silicon 8, Silicon 9 nor any Iron rates.
	   2104 C Instead there are more Engineering rates, UFSR, URSR, MFSR, MRSR.....
	   2105 C
	   2106 C Created  7-MAR-1995	by  K. CHOTOO
	   2107 C
	   2108 
	   2109       IMPLICIT NONE
	   2110 
	   2111       INTEGER NUM,				!counts number of selections made
	   2112      +        I,				!subscript
	   2113      +        SELECTION(12)			!array to store selections
	   2114       CHARACTER*1 REPLY          		!answer for another selection
	   2115       CHARACTER*3 TGS_MODE      		!TGS on/off
	   2116 C
	   2117       SELECTION(1) = 97
	   2118       SELECTION(2) =  1 
	   2119       SELECTION(3) = 145 
	   2120       SELECTION(4) = 121   
	   2121       SELECTION(5) = 129  
	   2122       SELECTION(6) = 137   
	   2123       SELECTION(7) = 165  
	   2124       SELECTION(8) = 166   
	   2125       SELECTION(9) = 167  
	   2126       SELECTION(10) = 151   
	   2127       SELECTION(11) = 150
	   2128       SELECTION(12) = 149 
	   2129       
	   2130       IF(TGS_MODE .EQ. 'ON ')THEN
	   2131          SELECTION(7)  = 156			!make changes to default list		
	   2132          SELECTION(8)  = 158			!for TGS ON
	   2133          SELECTION(9)  = 160
	   2134       ENDIF
	   2135       WRITE(6,*)'TGS IS ',TGS_MODE
	   2136       TYPE 315
	   2137  315  FORMAT(//,1X,'The following is a list of rates that',
	   2138      +    ' will be printed out:'//
	   2139      +     5X,' (1) H      ',5X,' (2) He2    ',5X,' (3) He1    '/
	   2140      +     5X,' (4) BR0    ',5X,' (5) BR1    ',5X,' (6) BR2    '/
	   2141      +     5X,' (7) FSR12  ',5X,' (8) FSR34  ',5X,' (9) FSR56  '/
	   2142      +     5X,'(10) O1     ',5X,'(11) O6     ',5X,'(12) O7     '//
	   2143      +     1X,'Would you like to make your own list [Y/N]?  /N/'/)
	   2144            READ(5,'(A1)')REPLY
	   2145 
	   2146       NUM = 12
	   2147       IF((REPLY .EQ. 'Y') .OR. (REPLY .EQ. 'y')) NUM = 0
	   2148       DO WHILE (((REPLY .EQ. 'Y') .OR. (REPLY .EQ. 'y'))
	   2149      +           .AND. (NUM .LE. 12)) 
	   2150       NUM = NUM + 1
	   2151 C        main menu
	   2152  320     TYPE 330

RATE_MENU                                                        6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  30
1.14                            Symbol Table                     6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   2153  330     FORMAT(/,32X,'MATRIX RATES'/
	   2154      +     9X,'  [1] He2  ',8X,' [97] H    ',8X,
	   2155      +        '[121] BR0  ',8X,'[129] BR1  '/
	   2156      +     9X,'[137] BR2  ',8X,'[145] He1  ',8X,
	   2157      +        '[146] C6	 ',8X,'[147] C5   '/
	   2158      +     9X,'[148] C4   ',8X,'[149] O7   ',8X,
	   2159      +        '[150] O6   ',8X,'[151] O1   '/
	   2160      +     9X,'[152] Ne8  ',8X,'[153] Mg10 ',8X,	
	   2161      +        '[154] Mg8  ',8X,'[155] Si12 ')
	   2162 
	   2163 	 IF(TGS_MODE .EQ. 'OFF') THEN	!Normal mode
	   2164           TYPE 340
	   2165  340      FORMAT(
	   2166      +     9X,'[156] Si9  ',8X,'[157] Si8  ',8X,	
	   2167      +        '[158] Fe16 ',8X,'[159] Fe14 '/
	   2168      +     9X,'[160] Fe12 ',8X,'[161] Fe11 ',8X,
	   2169      +        '[162] Fe10 ',8X,'[163] Fe9'/	
	   2170      +     9X '[164] Fe8  '/
	   2171      +     32X,'ENGINEERING RATES'/
	   2172      +     9X,'[165] FSR12',8X,'[166] FSR34',8X,	
	   2173      +        '[167] FSR56',8X,'[168] RSR1 '/
	   2174      +     9X,'[169] RSR2 ',8X,'[170] RSR3 ',8X,
	   2175      +        '[171] DCR1 ',8X,'[172] DCR2 '/
	   2176      +     9X,'[173] DCR3 ',8X,'[174] TCR1 ',8X,	
	   2177      +        '[175] TCR2 ',8X,'[176] TCR3 '/
	   2178      +     9X,'[177] SSD1 ',8X,'[178] SSD2 ',8X,	
	   2179      +        '[179] SSD3 '/)
	   2180 
	   2181          ELSE				!TGS Mode
	   2182           TYPE 350
	   2183  350      FORMAT(/,32X,'ENGINEERING RATES'/
	   2184      +     9X,'[156] FSR12',8X,'[158] FSR34',8X,	
	   2185      +        '[160] FSR56',8X,'[162] UFSR '/
	   2186      +     9X,'[163] URSR ',8X,'[164] MFSR ',8X,	
	   2187      +        '[165] MRSR ',8X,'[166] MPF  '/
	   2188      +     9X,'[167] MPR  ',8X,'[168] RSR1 ',8X,	
	   2189      +        '[169] RSR2 ',8X,'[170] RSR3 '/
	   2190      +     9X,'[171] DCR1 ',8X,'[172] DCR2 ',8X,	
	   2191      +        '[173] DCR3 ',8X,'[174] TCR1 '/
	   2192      +     9X,'[175] TCR2 ',8X,'[176] TCR3 ',8X,
	   2193      +        '[177] SSD1 ',8X,'[178] SSD2 '/
	   2194      +     9X,'[179] SSD3 ',/) 
	   2195 	 
	   2196          ENDIF
	   2197 
	   2198 	 WRITE(6,*) 'Enter rate number'
	   2199          READ(5,*) SELECTION(NUM)
	   2200 C
	   2201 C Check to make sure selection number is valid.
	   2202 C
	   2203          IF(TGS_MODE .EQ. 'OFF') THEN
	   2204           IF(((SELECTION(NUM).GT.1).AND.(SELECTION(NUM).LT.97)).OR.
	   2205      +      ((SELECTION(NUM).GT.97).AND.(SELECTION(NUM).LT.121)).OR.
	   2206      +      ((SELECTION(NUM).GT.121).AND.(SELECTION(NUM).LT.129)).OR.
	   2207      +      ((SELECTION(NUM).GT.129).AND.(SELECTION(NUM).LT.137)).OR.
	   2208      +      ((SELECTION(NUM).GT.137).AND.(SELECTION(NUM).LT.145)).OR.
	   2209      +       (SELECTION(NUM).GT.179))THEN

RATE_MENU                                                        6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  31
1.14                            Symbol Table                     6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   2210               WRITE(6,*)'Ambiguous selection number, please try again'
	   2211               GO TO 320
	   2212           ENDIF
	   2213          ENDIF
	   2214 
	   2215          IF(TGS_MODE .EQ. 'ON ') THEN
	   2216           IF(((SELECTION(NUM).GT.1).AND.(SELECTION(NUM).LT.97)).OR.
	   2217      +      ((SELECTION(NUM).GT.97).AND.(SELECTION(NUM).LT.121)).OR.
	   2218      +      ((SELECTION(NUM).GT.121).AND.(SELECTION(NUM).LT.129)).OR.
	   2219      +      ((SELECTION(NUM).GT.129).AND.(SELECTION(NUM).LT.137)).OR.
	   2220      +      ((SELECTION(NUM).GT.137).AND.(SELECTION(NUM).LT.145)).OR.
	   2221      +      (SELECTION(NUM).EQ.157).OR. (SELECTION(NUM).EQ.159) .OR.
	   2222      +      (SELECTION(NUM).EQ.161).OR.(SELECTION(NUM).GT.179))THEN
	   2223               WRITE(6,*)'Ambiguous selection number, please try again'
	   2224               GO TO 320
	   2225           ENDIF
	   2226          ENDIF
	   2227 
	   2228          WRITE(6,*) 'Selections already made:'
	   2229          DO 380 I = 1, NUM
	   2230          WRITE(6,*)SELECTION(I)
	   2231  380     CONTINUE
	   2232          WRITE(6,*) 'You may chose up to ',12 - NUM,' more rates.'
	   2233  390 	 WRITE(6,*) 'Would you like to make another selection [Y/N]?'
	   2234          READ(5,'(A1)') REPLY
	   2235 C
	   2236 C Check for valid reply
	   2237 C
	   2238 	 IF((REPLY .NE. 'Y') .AND. (REPLY .NE. 'y') .AND. (REPLY .NE. 'N')
	   2239      +       .AND. (REPLY .NE. 'n')) THEN
	   2240             WRITE(6,*) 'Ambiguos answer. Please try again'
	   2241             GO TO 390
	   2242          ENDIF
	   2243          
	   2244       END DO
	   2245  
	   2246       RETURN
	   2247       END

RATE_MENU                                                        6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  32
1.14                            Symbol Table                     6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1904 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               143252 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              2368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               17112   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2177 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               167457


ENTRY POINTS

    Address   Type  Name     
                             
  4-00003080        RATE_MENU


VARIABLES

    Address   Type  Name         Address   Type  Name    
                                                         
REG-0000000E  I*4   I          2-00000CC0  CHAR  REPLY   
      **      I*4   NUM            **      CHAR  TGS_MODE


ARRAYS

     Address  Type  Name             Bytes  Dimensions

      **      I*4   SELECTION           48  (12)



LABELS

    Address   Label     Address   Label     Address   Label     Address   Label
                                                                               
      **       315        **       330        **       350        **       390 
  4-000032C8   320        **       340    4-00000000   380                     

RATE_MENU                                                        6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  33
1.14                            Symbol Table                     6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   2248 
	   2249 C*******************************************************************************
	   2250       SUBROUTINE RATE_HEADER(OUTFILE,TGS_MODE,CHOICES,NUM_OF_RATES)
	   2251 C This subroutine prints out the header information for the rates that have
	   2252 C already been selected be the user.
	   2253 C
	   2254 C Created 	9-MAR-1995	by 	K. CHOTOO
	   2255 C
	   2256 C
	   2257       IMPLICIT NONE
	   2258       INTEGER I,
	   2259      +        NUM_OF_RATES,						!number of rates to be printed
	   2260      +        POS, 							!position where rate name is written in LINE
	   2261      +        OUTFILE,							!unit number for output file
	   2262      +        CHOICES(12)						!array of rate number to be printed
	   2263       CHARACTER*9 LABELS(179)						!rate names
	   2264       CHARACTER*300 LINE						!stores header labels
	   2265       CHARACTER*3 TGS_MODE						!TGS mode on/off    
	   2266       DATA LABELS/ '     He2 ',95*'         ',  '       H ',23*'         ',!Rate headers in Normal mode
	   2267      +             '     BR0 ', 7*'         ',  '     BR1 ', 7*'         ',
	   2268      +             '     BR2 ', 7*'         ',  '     He1 ',   '      C6 ',
	   2269      +             '      C5 ',   '      C4 ',  '      07 ',   '      O6 ',
	   2270      +             '      O1 ',   '     Ne8 ',  '    Mg10 ',   '     Mg8 ',
	   2271      +		   '    Si12 ',   '     Si9 ',  '     Si8 ',   '    Fe16 ',
	   2272      +		   '    Fe14 ',   '    Fe12 ',  '    Fe11 ',   '    Fe10 ',
	   2273      +             '     Fe9 ',   '     Fe8 ',  '   FSR12 ',   '   FSR34 ',
	   2274      +             '   FSR56 ',   '    RSR1 ',  '    RSR2 ',   '    RSR3 ',
	   2275      +             '    DCR1 ',   '    DCR2 ',  '    DCR3 ',   '    TCR1 ',
	   2276      +             '    TCR2 ',   '    TCR3 ',  '    SSD1 ',   '    SSD2 ',
	   2277      +             '    SSD3 '/
	   2278 
	   2279 
	   2280       DO 300 I = 1,300
	   2281          LINE(I:I) = ' '
	   2282  300  CONTINUE          
	   2283       IF(TGS_MODE .EQ. 'ON ') THEN					!Changes to headers for TGS mode
	   2284         LABELS(156) = '   FSR12 '
	   2285         LABELS(157) = '         '
	   2286         LABELS(158) = '   FSR34 '
	   2287         LABELS(159) = '         '
	   2288         LABELS(160) = '   FSR56 '
	   2289         LABELS(161) = '         '
	   2290         LABELS(162) = '    UFSR '
	   2291         LABELS(163) = '    URSR '
	   2292         LABELS(164) = '    MFSR '
	   2293         LABELS(165) = '    MRSR '
	   2294         LABELS(166) = '     MPF '
	   2295         LABELS(167) = '     MPR '
	   2296       ENDIF
	   2297       WRITE(LINE(1:38),'(A)')' YEAR DOY HR:MN:SC   SPEED     UNCER  '
	   2298       POS = 39
	   2299       DO 400 I = 1, NUM_OF_RATES
	   2300          WRITE(LINE(POS+2:POS+14),'(A)') LABELS(CHOICES(I))
	   2301          POS = POS + 15
	   2302  400  CONTINUE
	   2303       WRITE(OUTFILE,'(A)')LINE(1:POS-1)
	   2304       

RATE_HEADER                                                      6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  34
1.14                            Symbol Table                     6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   2305       RETURN
	   2306       END


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1904 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               143252 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              2368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               17112   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2177 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               167457


ENTRY POINTS

    Address   Type  Name       
                               
  4-00003848        RATE_HEADER


VARIABLES

    Address   Type  Name             Address   Type  Name             Address   Type  Name        
                                                                                                  
REG-########  I*4   I                  **      I*4   NUM_OF_RATES REG-00000009  I*4   POS         
  2-00000000  CHAR  LINE               **      I*4   OUTFILE            **      CHAR  TGS_MODE    


ARRAYS

     Address  Type  Name           Bytes  Dimensions

      **      I*4   CHOICES           48  (12)
  1-00000000  CHAR  LABELS          1611  (179)



LABELS

    Address   Label     Address   Label
                                       
  4-00000000   300    4-00000000   400 

RATE_HEADER                                                      6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  35
1.14                            Symbol Table                     6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   2307 c***************************************************************************************************
	   2308       SUBROUTINE OMR_EFF(EFF_DATA)
	   2309 c***************************************************************************************************
	   2310 C This routine calculates the efficiency for the omni-directional matrix rates (OMR) 1-19 at each
	   2311 C voltage step. These rates are for triple coincidence only, i.e. both mass/charge and non-zero
	   2312 C mass obtained. Efficiencies for all other rates are set to 1.0. 
	   2313 c
	   2314 c Created 27-SEP-1995 	by	K. CHOTOO
	   2315 c
	   2316 C Subroutines called:	WSTICSEFF
	   2317 c Revision History:
	   2318 C
	   2319 C***************************************************************************************************
	   2320 			IMPLICIT NONE
	   2321       REAL*4 DCR_FSR,			!DCR/FSR
	   2322      .       DCR_RSR,			!DCR/RSR
	   2323      .       deltaE,			!Energy bandwidth (=0.019E)
	   2324      .       deltaT,			!Net Time for spin (Spin Period - Deadtime)
	   2325      .       E,				!Energy
	   2326      .       EFF_DATA(0:31,1:178),      !Matrix rate efficiency TCR/Io
	   2327      .       EPQ(0:31),            	!Energy/charge for each voltage step
	   2328      .	     GF,			!Overall geometric factor = 0.059 cm2-sr
	   2329      .       ION_MASS(1:22),		!Mass of ions
	   2330      .       M,				!Mass
	   2331      .       MR_ENERGY(0:31,1:22),	!Total energy at each voltage step for rates
	   2332      .       TCR_FSR			!TCR/FSR             
	   2333 
	   2334       INTEGER I,J			!Counters
	   2335 
	   2336       DATA ION_MASS/11.916,11.916,11.916,15.872,15.872,15.872,20.019,24.112,24.112,27.863,
	   2337      +              27.863,27.863,55.404,55.404,55.404,55.404,55.404,55.404,55.404,
	   2338      +              1.000,3.971,3.971/
	   2339 
	   2340 
	   2341 C		************ STATEMENTS *************
	   2342 
	   2343       deltaT = 2.72		!Spin Period - Deadtime (3.00 -  0.28 = 2.72 secs)
	   2344       GF = 0.059
	   2345       DO 10  I = 0,31
	   2346         EPQ(I) = 6.190722 * (1.1225857**I)
	   2347   10  CONTINUE
	   2348 
	   2349       DO 15 J=1,178			!Initialize efficiency array to 1.0
	   2350         DO 14 I=0,31
	   2351           EFF_DATA(I,J) = 1.0
	   2352   14    CONTINUE
	   2353   15  CONTINUE
	   2354 
	   2355       DO 20  I = 0,31
	   2356         MR_ENERGY(I,1)  = EPQ(I)*6.0	!C+6
	   2357         MR_ENERGY(I,2)  = EPQ(I)*5.0	!C+5
	   2358         MR_ENERGY(I,3)  = EPQ(I)*4.0	!C+4
	   2359         MR_ENERGY(I,4)  = EPQ(I)*7.0	!O+7
	   2360         MR_ENERGY(I,5)  = EPQ(I)*6.0	!O+6
	   2361         MR_ENERGY(I,6)  = EPQ(I)	!O+1
	   2362         MR_ENERGY(I,7)  = EPQ(I)*8.0	!Ne+8
	   2363         MR_ENERGY(I,8)  = EPQ(I)*10.0	!Mg+10

OMR_EFF                                                          6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  36
1.14                            Symbol Table                     6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   2364         MR_ENERGY(I,9)  = EPQ(I)*8.0	!Mg+8
	   2365         MR_ENERGY(I,10) = EPQ(I)*12.0	!Si+12
	   2366         MR_ENERGY(I,11) = EPQ(I)*9.0	!Si+9
	   2367         MR_ENERGY(I,12) = EPQ(I)*8.0	!Si+8
	   2368         MR_ENERGY(I,13) = EPQ(I)*16.0	!Fe+16
	   2369         MR_ENERGY(I,14) = EPQ(I)*14.0	!Fe+14
	   2370         MR_ENERGY(I,15) = EPQ(I)*12.0	!Fe+12
	   2371         MR_ENERGY(I,16) = EPQ(I)*11.0	!Fe+11
	   2372         MR_ENERGY(I,17) = EPQ(I)*10.0	!Fe+10
	   2373         MR_ENERGY(I,18) = EPQ(I)*9.0	!Fe+9
	   2374         MR_ENERGY(I,19) = EPQ(I)*8.0	!Fe+8
	   2375         MR_ENERGY(I,20) = EPQ(I)        !H+
	   2376         MR_ENERGY(I,21) = EPQ(I)*2.0    !He+2
	   2377         MR_ENERGY(I,22) = EPQ(I)        !He+1
	   2378 
	   2379   20  CONTINUE 
	   2380 
	   2381       DO 40 J=1,22
	   2382         DO 30 I=0,31
	   2383           M = ION_MASS(J)
	   2384           E = MR_ENERGY(I,J)
	   2385           deltaE = 0.019*E				!Energy bandwidth
	   2386           CALL WSTICSEFF(E,M,DCR_RSR,TCR_FSR,DCR_FSR)
	   2387 	  IF(J .LE. 19) THEN
	   2388             IF(TCR_FSR*DCR_RSR .GT. 0) THEN
	   2389               EFF_DATA(I,145+J) = TCR_FSR * DCR_RSR * deltaE * deltaT * GF / M	!TCR/Io only for OMR1-19
	   2390             ELSE
	   2391               EFF_DATA(I,145+J) = 1.0
	   2392             ENDIF
	   2393      	  ELSE
	   2394             IF(J .EQ. 20) EFF_DATA(I, 97) = DCR_FSR * DCR_RSR * deltaE * deltaT * GF / M 
	   2395             IF(J .EQ. 21) EFF_DATA(I,  1) = DCR_FSR * DCR_RSR * deltaE * deltaT * GF / M
	   2396             IF(J .EQ. 22) EFF_DATA(I,145) = DCR_FSR * DCR_RSR * deltaE * deltaT * GF / M
	   2397 	  ENDIF
	   2398   30    CONTINUE
	   2399   40  CONTINUE
	   2400 
	   2401       RETURN
	   2402       END

OMR_EFF                                                          6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  37
1.14                            Symbol Table                     6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1904 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               143252 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              2368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               17112   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2177 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               167457


ENTRY POINTS

    Address   Type  Name   
                           
  4-00003DA0        OMR_EFF


VARIABLES

    Address   Type  Name        Address   Type  Name        Address   Type  Name        Address   Type  Name   
                                                                                                               
  2-00000130  R*4   DCR_FSR REG-00000022  R*4   DELTAT  REG-########  I*4   I         2-00000138  R*4   TCR_FSR
  2-00000134  R*4   DCR_RSR   0-0000000C# R*4   E       REG-########  I*4   J                                  
REG-00000027  R*4   DELTAE  REG-00000023  R*4   GF        0-00000008# R*4   M                                  


ARRAYS

     Address  Type  Name             Bytes  Dimensions

      **      R*4   EFF_DATA         22784  (0:31, 178)
  2-00000C40  R*4   EPQ                128  (0:31)
  1-00000650  R*4   ION_MASS            88  (22)
  2-00000140  R*4   MR_ENERGY         2816  (0:31, 22)



LABELS

    Address   Label     Address   Label     Address   Label
                                                           
  4-00000000   10         **       15     4-000041DC   30  
  4-00000000   14     4-00000000   20         **       40  



OMR_EFF                                                          6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  38
1.14                            Symbol Table                     6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

FUNCTIONS AND SUBROUTINES REFERENCED

  Type  Name           
                       
        WSTICSEFF      

OMR_EFF                                                          6-DEC-1996 15:21:19    DEC Fortran V6.2-508                Page  39
1.14                            Symbol Table                     6-DEC-1996 15:18:19    [WIND.SOFTWARE.STICS]WSTICS_RATES.FOR;64

	   2403 


  +---------------------------------------------------+
  |               KEY TO ADDRESS CODE FORMATS         |
  |   ppp-oooooooo  - In Psect ppp, Offset oooooooo   |
  |   ***-********  - External                        |
  |               # - Suffix: Also In Registers       |
  |   REG-rrrrrrrr  - In Register rrrrrrrr            |
  |   REG-########  - In Various Registers            |
  |        **       - Not Used; Not Allocated         |
  +---------------------------------------------------+


COMMAND QUALIFIERS

  /ALIGNMENT=(COMMONS=(PACKED,NOMULTILANGUAGE),RECORDS=PACKED)
  /ASSUME=(ACCURACY_SENSITIVE,BACKSLASH,NODUMMY_ALIASES,NOUNDERSCORE)
  /CHECK=(ASSERTIONS,BOUNDS,FORMAT,FP_EXCEPTIONS,OVERFLOW,NOUNDERFLOW)
  /DEBUG=(NOSYMBOLS,TRACEBACK)
  /DESIGN=(NOCOMMENTS)
  /SHOW=(DICTIONARY,INCLUDE,MAP,PREPROCESSOR)
  /STANDARD=(NOSEMANTIC,NOSOURCE_FORM,NOSYNTAX)
  /WARNINGS=(NOALIGNMENT,NOARGUMENT_CHECKING,NODECLARATIONS,GENERAL,NOTRUNCATED_SOURCE,UNCALLED,
             UNINITIALIZED,UNREACHABLE,UNUSED)
  /NOAUTOMATIC  /BLAS=NOMAPPED  /CONVERT=NATIVE  /NOCROSS_REFERENCE  /NOD_LINES  /ERROR_LIMIT=30  /EXTEND_SOURCE
  /NOPAD_SOURCE  /NOF77  /FLOAT=G_FLOAT  /IEEE_MODE=FAST  /ROUNDING_MODE=NEAREST
  /GRANULARITY=QUADWORD  /INSTRUCTION_SET=FLOATING  /INTEGER_SIZE=32  /NOMACHINE_CODE
  /MATH_LIBRARY=ACCURATE  /NAMES=UPPERCASE  /OPTIMIZE=(LEVEL=4,UNROLL=0)  /REAL_SIZE=32  /NORECURSIVE
  /NOSEPARATE_COMPILATION  /NOSYNCHRONOUS_EXCEPTIONS  /NOSYNTAX_ONLY  /TERMINAL=NOSTATISTICS  /NOTIE  /VMS
  /NOANALYSIS_DATA
  /NODIAGNOSTICS
  /INCLUDE=(.FOR,.f,FORT$INCLUDE:.FOR,FORT$INCLUDE:.f)
  /LIST=SMS1:[WIND.SOFTWARE.STICS]WSTICS_RATES.LIS;53
  /OBJECT=SMS1:[WIND.SOFTWARE.STICS]WSTICS_RATES.OBJ;44
  /NOLIBRARY
   sys$lib=SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1

COMPILER: DEC Fortran V6.2-508-274F

COMPILATION STATISTICS

  CPU time:          6.80 seconds
  Elapsed time:      9.01 seconds
  Pagefaults:         542
  I/O Count:           73
