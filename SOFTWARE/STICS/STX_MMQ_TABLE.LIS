                                                                 5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page   1
1.5                                                              5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	      1 C
	      2       PROGRAM STX_MMQ_TABLE
	      3 C This program reads a WIND L1 data file and dissects the PHA data, printing 
	      4 C it in a table vs time and science record number and calculated m & m/q
	      5 C 
	      6 C STICS_PHA_TABLE Created 	17-NOV-1994	JOHN PAQUETTE
	      7 C				04-JAN-1995	most recent version
	      8 C STICS_MMQ_TABLE created       09-Jan-1995 ABG
	      9 C
	     10 C STX_MMQ_TABLE  CREATED  26-MAR-1997 by   K.CHOTOO  Using STICS_MMQ_TABLE as template
	     11 C
	     12 C Revision history:
	     13 C	 5-APR-1997	K.CHOTOO	Program can now sum different time periods together.
	     14 C                                   
	     15 CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
	     16 CDEC$ IDENT '1.5'
	     17       INCLUDE	'INC_DIR:EDBDEF.INC/NOLIST'

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page   2
1.5                                                              5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	    555       INCLUDE   'INC_DIR:L1FMT.INC/NOLIST'
	    687       INCLUDE   '($RMSDEF)'
    1	    688 !*** MODULE $RMSDEF ***
    1	    689 CDEC$ OPTIONS/ALIGN=(RECORDS=PACKED,COMMONS=PACKED)
    1	    690  ! 
    1	    691  !  This SDL File Generated by VAX-11 Message V04-00 on 26-JAN-1994 13:51:15.86
    1	    692  ! 
    1	    693  ! 	.TITLE	RMSMSG -RMS COMPLETION CODES
    1	    694  !  *************************************************************************
    1	    695  !  *                                                                       *
    1	    696  !  * COPYRIGHT (C) DIGITAL EQUIPMENT CORPORATION, 1976, 1977, 1978, 1979,  *
    1	    697  !  * 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,     *
    1	    698  !  * 1991,1992                                                             *
    1	    699  !  * ALL RIGHTS RESERVED.                                                  *
    1	    700  !  * UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT LAWS  OF  THE  UNITED *
    1	    701  !  * STATES.                                                               *
    1	    702  !  *                                                                       *
    1	    703  !  * THE SOFTWARE CONTAINED ON THIS MEDIA IS PROPRIETARY TO  AND  EMBODIES *
    1	    704  !  * THE   CONFIDENTIAL   TECHNOLOGY  OF  DIGITAL  EQUIPMENT  CORPORATION. *
    1	    705  !  * POSSESSION, USE, DUPLICATION OR DISSEMINATION  OF  THE  SOFTWARE  AND *
    1	    706  !  * MEDIA  IS  AUTHORIZED  ONLY  PURSUANT TO A VALID WRITTEN LICENSE FROM *
    1	    707  !  * DIGITAL EQUIPMENT CORPORATION.                                        *
    1	    708  !  *                                                                       *
    1	    709  !  * RESTRICTED RIGHTS LEGEND USE, DUPLICATION, OR DISCLOSURE BY THE  U.S. *
    1	    710  !  * GOVERNMENT  IS  SUBJECT  TO RESTRICTIONS AS SET FORTH IN SUBPARAGRAPH *
    1	    711  !  * (C)(1)(II) OF DFARS 252.227-7013, OR IN FAR 52.227-19, AS APPLICABLE. *
    1	    712  !  *                                                                       *
    1	    713  !  *************************************************************************
    1	    714  ! ++
    1	    715  !  FACILITY: RMS
    1	    716  ! 
    1	    717  !  ABSTRACT:
    1	    718  ! 
    1	    719  ! 	THIS MODULE DEFINES ALL RMS COMPLETION CODES.
    1	    720  ! 
    1	    721  !  ENVIRONMENT:
    1	    722  ! 
    1	    723  ! 	THE MESSAGE TRANSLATOR MUST BE USED TO CONVERT RMSMSG.MSG INTO
    1	    724  ! 	RMSMSG.SDL.  THE SDL TRANSLATOR MUST THEN BE USED TO CONVERT
    1	    725  ! 	RMSMSG.SDL INTO RMSMSG.MAR (AND RMSMSG.B32).
    1	    726  ! 
    1	    727  !  AUTHOR: LEO F. LAVERDURE,	CREATION DATE:  10-DEC-1976
    1	    728  ! 
    1	    729  !  MODIFIED BY:
    1	    730  ! 
    1	    731  !                DEE RYAN                                30-SEP-1993
    1	    732  !                CORRECTED USE OF DIGITAL PRODUCT NAMES.
    1	    733  ! 
    1	    734  ! 	X-5	EMW		ELINOR M. WOODS		28-SEP-1993
    1	    735  ! 		MERGE IN OPENVMS VAX CORAL FIX:
    1	    736  ! 
    1	    737  ! 		X-10	EMW0019  ELINOR M. WOODS  	21-SEP-1993
    1	    738  ! 		ADD ONE NEW USER-REPORTABLE ERROR STATUS (WITH AN
    1	    739  ! 		ASSOCIATED STV): NETBTS.  RELOCATE NEW IDXSEARCH STATUS
    1	    740  ! 		(SEE X-9) FROM "ERROR with STV" SECTION TO "ERROR WITHOUT 
    1	    741  ! 		STV" section.  Expand "WITH STV' AND "without STV"
    1	    742  ! 		COMMENTS TO CLARIFY DIFFERENCE BETWEEN TWO.

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page   3
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    743  ! 
    1	    744  ! 	X-4	EMW0016		ELINOR M. WOODS		10-AUG-1993
    1	    745  ! 		MERGE IN CORAL FIX:
    1	    746  ! 
    1	    747  ! 		MODIFY SEVERITY OF TWO DTF ERROR CODES (DTFACC AND
    1	    748  ! 		DTFCRE) FROM FATAL TO ERROR, AS REQUESTED BY SNA/DTF
    1	    749  ! 		FACILITY.		
    1	    750  ! 
    1	    751  ! 		ALSO MOVE NEW IDXSEARCH STATUS FROM ERROR WITH NO 
    1	    752  ! 		STV GROUPING TO ERROR WITH STV GROUPING.
    1	    753  ! 
    1	    754  ! 	X-3	EMW0010		ELINOR M. WOODS		02-JUL-1993
    1	    755  ! 		TO SUPPORT NEW KEY-LESS-THAN FUNCTIONALITY, ADDITION 
    1	    756  ! 		OF ONE USER-REPORTABLE ERROR STATUS:  IDXSEARCH, AND
    1	    757  ! 		TWO NEW RMS-INTERNAL ERROR STATUSES:  LSCAN AND 
    1	    758  ! 		ROOTSRCH.		
    1	    759  ! 
    1	    760  ! 	X-2	CW0019		CHRIS WHITAKER		11-NOV-1992
    1	    761  ! 		MERGE IN OPENVMS VAX V6.0 CHANGES
    1	    762  ! 
    1	    763  ! 		X-8	JM0012	JOHN MUNZER		11-NOV-1992
    1	    764  ! 		CHANGE TEXT FOR RMS$_LNE.
    1	    765  ! 
    1	    766  ! 		X-7	JM0006	JOHN MUNZER		17-APR-1992
    1	    767  ! 		ADD !XL PARAMETER TO RMS$_BUG TO REPORT R2.
    1	    768  ! 
    1	    769  ! 	X-1	RAB		RICHARD A. BISHOP	24-JUN-1991
    1	    770  ! 		MOVED TO [STARLET] FACILITY
    1	    771  ! 
    1	    772  ! 	==================================
    1	    773  ! 	OLD AUDIT TRAIL FOLLOWS:
    1	    774  ! 
    1	    775  ! 	X-33	LSS0154		LEONARD S. SZUBOWICZ	 4-APR-1990
    1	    776  ! 		ALTER TEXT AND FAO PARAMETERS OF RMS$_RUH AND RMS$_BUG
    1	    777  ! 		CONDITION VALUES FOR RMS/DDTM SUPPORT.
    1	    778  ! 
    1	    779  ! 	X-32	PJH		PAUL J. HOULIHAN	17-JAN-1990
    1	    780  ! 		CHANGE TEXT FOR RMS$_INCOMPSHR ERROR MESSAGE.
    1	    781  ! 
    1	    782  ! 	X-31	LSS0130		LEONARD S. SZUBOWICZ	12-OCT-1989
    1	    783  ! 		MERGE OF RMS/DDTM GENERATION X-30D2.
    1	    784  ! 		ADD GENERAL DDTM_ERR ERROR MESSAGE FOR DDTM SERVICE FAILURES;
    1	    785  ! 		STV WILL CONTAIN THE FAILING SYSTEM SERVICE CONDITION VALUE.
    1	    786  ! 
    1	    787  ! 	X-30	LSS0080		LEONARD S. SZUBOWICZ	06-OCT-1988
    1	    788  ! 		ADD RMS$_OK_ACT MESSAGE FOR USE BY FUTURE WORK TO $DISPLAY.
    1	    789  ! 		THIS IS PART OF LATENT SUPPORT FOR RMS/DDTM.
    1	    790  ! 
    1	    791  ! 	X-29	GJA0080		GARY J. ALLISON		06-JUN-1988
    1	    792  ! 		CHANGE TEXT OF SEMANTICS MESSAGE.
    1	    793  ! 
    1	    794  ! 	X-28	GJA0072		GARY J. ALLISON		02-MAR-1988
    1	    795  ! 		ADD EXT_ERR, OPNOTSUP, EXTNOTFOU, AND SEMANTICS MESSAGES.
    1	    796  ! 
    1	    797  ! 	X-27	PMV0072		PETER M. VATNE		08-OCT-1987
    1	    798  ! 		CHANGE RMS$_NOJNLLIC TO RMS$_JNLNOTAUTH.
    1	    799  ! 

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page   4
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    800  !  	X-26	LSS0057		LEONARD S. SZUBOWICZ	15-SEP-1987
    1	    801  ! 		CHANGE TEXT FOR THE RMS$_OK_DUP STATUS SUCH THAT THE MESSAGE
    1	    802  ! 		IS APPLICABLE TO $GET AS WELL AS $PUT.
    1	    803  ! 
    1	    804  ! 	X-25	PMV0068		PETER M. VATNE		11-SEP-1987
    1	    805  ! 		ADD RMS$_NOJNLLIC, NO RMS JOURNALING LICENSE, FOR LMF.
    1	    806  ! 
    1	    807  ! 	X-24	RNM0026		RUSSELL N. MURRAY	15-AUG-1987
    1	    808  ! 		ADD RMS$_SYNCH MESSAGE FOR NOTIFICATION OF SYNCHRONOUS
    1	    809  ! 		COMPLETION.
    1	    810  ! 
    1	    811  ! 	X-23	JEJ0479		JAMES E JOHNSON		13-AUG-1987
    1	    812  ! 		ADD RMS$_IVATRACE MESSAGE.
    1	    813  ! 
    1	    814  ! 	X-22	PMV0061		PETER M. VATNE		03-AUG-1987
    1	    815  ! 		CHANGE RESERVED MESSAGE RMS$_BUG_XX5 TO RMS$_BUG_RU_COMMIT_FAIL
    1	    816  ! 		TO CORRESPOND TO POSITIVE RMS BUGCHECK FTL$_RU_COMMIT_FAIL.
    1	    817  ! 
    1	    818  !  	X-21	LSS0042		LEONARD S. SZUBOWICZ	13-MAY-1987
    1	    819  ! 		CHANGE RESERVED MESSAGE RMS$_BUG_XX4 TO RMS$_BUG_RU_ABORT_FAIL
    1	    820  ! 		TO CORRESPOND TO POSITIVE RMS BUGCHECK FTL$_RU_ABORT_FAIL
    1	    821  ! 	
    1	    822  ! 	X-20	SAD0034		STUART A. DAVIDSON	12-MAR-1987 
    1	    823  ! 		DROP QUOTES FROM SNADTF MESSAGE TEXT.
    1	    824  ! 
    1	    825  ! 	X-19	PJH		PAUL J. HOULIHAN	19-JAN-1987
    1	    826  ! 		MERGE IN 17J1.
    1	    827  ! 
    1	    828  ! 		X-17J1	PJH		PAUL J. HOULIHAN	15-JAN-1987
    1	    829  ! 			FIX SEVERAL SMALL JNL PROBLEMS.
    1	    830  ! 			ADD RMS$_BUG_FLUSH_JNL_FAILED CODE.
    1	    831  ! 
    1	    832  ! 	X-18	KPS0148		KENNETH P. SIEGEL	04-DEC-1986
    1	    833  ! 		ADDED SNPPF (STATISTICS MONITORING NOT SUPPORTED FOR
    1	    834  ! 		PROCESS PERMANENT FILES) ERROR MESSAGE.
    1	    835  ! 
    1	    836  ! 	X-17	PMV0025		PETER M. VATNE		24-NOV-1986
    1	    837  ! 		ADD NEW MESSAGE, RMS$_NOTSAMEJNL.  THIS STATUS IS
    1	    838  ! 		USED TO RESTRICT AI/BI WITH RU JOURNALING TO A
    1	    839  ! 		SINGLE LONG-TERM JOURNAL FILE.
    1	    840  ! 
    1	    841  ! 	X-16	DAS		DAVID A. SOLOMON	18-NOV-1986
    1	    842  ! 		ADD NEW MESSAGE, RMS$_DELJNS. REMOVE RMS$_XCR (BY REPLACING IT
    1	    843  ! 		WITH A PLACEHOLDER), AS JOURNALING BITS ARE NO LONGER
    1	    844  ! 		SPECIFIED IN THE $XABJNL. SLIGHT WORDING CHANGE ON DETACHED
    1	    845  ! 		RU RECOVERY ERROR MESSAGES.
    1	    846  ! 
    1	    847  ! 	X-15	DAS		DAVID A. SOLOMON	12-NOV-1986
    1	    848  ! 		FIX ERROR IN X-5/X-6: JOURNALING VARIANT NOT MERGED
    1	    849  ! 		CORRECTLY, RESULTING IN SEVERAL JOURNALING MESSAGES NUMBERS
    1	    850  ! 		BEING DIFFERENT IN THE MAININE THAN WHAT THEY WERE ON THE
    1	    851  ! 		JOURNALING VARIANT. ALSO, MOVE NEW SNADTF MESSAGES TO RE-USE
    1	    852  ! 		AVAILABLE UNUSED MESSAGE NUMBERS, INSTEAD OF GENERATING NEW
    1	    853  ! 		ONES. FINALLY, CHANGE RMS$_BUG_ABORT TO RMS$_BUG_RU_ACTIVE.
    1	    854  ! 
    1	    855  ! 	X-14	SAD0014		STUART A. DAVIDSON	 4-NOV-1986
    1	    856  ! 		SNADTF - FIX TYPO IN DTFACC, DTFCRE

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page   5
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    857  ! 
    1	    858  ! 	X-13	SAD0014		STUART A. DAVIDSON	 3-NOV-1986
    1	    859  ! 		SNADTF - FIX TYPO, ADD 2 ADDITIONAL MESSAGES.
    1	    860  ! 
    1	    861  ! 	X-12	JEJ0377		JAMES E JOHNSON		29-OCT-1986
    1	    862  ! 		ADD NOEXTEND ERROR CODE TO FLAG FAILED RELATIVE FILE
    1	    863  ! 		EXTENDS DUE TO PREVIOUS FAILURES.
    1	    864  ! 
    1	    865  ! 	X-11	KPS0131		KENNETH P. SIEGEL	25-OCT-1986
    1	    866  ! 		ADDED SNS ERROR CODE FOR STATISTICS NOT SUPPORT ON
    1	    867  ! 		NON-DISK DEVICES.
    1	    868  ! 
    1	    869  ! 	X-10	SAD009		STUART A. DAVIDSON	06-OCT-1986
    1	    870  ! 		ADD COMPLETION CODES FOR SNADTF (IBM DATA XFER)
    1	    871  ! 
    1	    872  ! 	X-9	GJA0003		GARY J. ALLISON		29-SEP-1986
    1	    873  ! 		ADD DETACHED RECOVERY ERROR MESSAGES
    1	    874  ! 
    1	    875  ! 	X-8	PMV0008		PETER M. VATNE		24-SEP-1986
    1	    876  ! 		MODIFY RMS$_ACC_AIJ, RMS$_ACC_BIJ, AND RMS$_ACC_ATJ
    1	    877  ! 		TO ALSO OUTPUT THE STV.
    1	    878  ! 
    1	    879  ! 	X-7	JWT0243		JIM TEAGUE		 2-SEP-1986
    1	    880  ! 		ADD NEW ERRORS FOR COLLATED KEYS.
    1	    881  ! 
    1	    882  ! 	X-6	GJA		GARY J. ALLISON		29-JUL-1986
    1	    883  ! 		REMOVE DUPS FROM JNL MERGE.
    1	    884  ! 
    1	    885  ! 	X-5	GJA		GARY J. ALLISON		29-JUL-1986
    1	    886  ! 		MERGE JOURNALING INTO MAINLINE
    1	    887  ! 
    1	    888  ! 		X-3J6	DAS		DAVID A. SOLOMON	14-APR-1986
    1	    889  ! 			REMOVE RMS$_RUH_FILE (USING A GENERAL RUF MESSAGE INSTEAD).
    1	    890  ! 			CHANGE RMS$_RUH TEXT TO NOT HAVE FAO PARAMETERS. ADD
    1	    891  ! 			RMS$_BUG_RURECERR.
    1	    892  ! 	
    1	    893  ! 		X-3J5	JEJ0302		JAMES E JOHNSON		 4-APR-1986
    1	    894  ! 			ADD RMS$_RRF (ERROR DURING RU RECOVERY) AND
    1	    895  ! 			RMS$_RUH/RMS$_RUH_FILE (USED TO FORM TEXT OF RU HANDLER ERRORS
    1	    896  ! 			SENT TO OPCOM).
    1	    897  ! 	
    1	    898  ! 		X-3J4	JEJ0272		JAMES E JOHNSON		11-FEB-1986
    1	    899  ! 			ADD RMS$_RUF, RMS$_BUG_ABORT CODES.
    1	    900  ! 	
    1	    901  ! 		X-3J3	JEJ0237		JAMES E JOHNSON		16-DEC-1985
    1	    902  ! 			ADD RMS$_RUNDOWN CODE
    1	    903  ! 	
    1	    904  ! 		X-3J2	JEJ0205		JAMES E JOHNSON		25-OCT-1985
    1	    905  ! 			ADD JOURNAL SPECIFIC WRTJNL_XXJ ERROR CODES TO REPLACE
    1	    906  ! 			THE GENERIC ERRWRTJNL CODE.
    1	    907  ! 
    1	    908  ! 	X-4	JEJ0216		JAMES E JOHNSON		18-NOV-1985
    1	    909  ! 		MERGE X-3J2 INTO MAIN LINE FOR V4.4.
    1	    910  ! 
    1	    911  ! 		X-3J2	JEJ0205		JAMES E JOHNSON		25-OCT-1985
    1	    912  ! 			ADD JOURNAL SPECIFIC WRTJNL_XXJ ERROR CODES TO REPLACE
    1	    913  ! 			THE GENERIC ERRWRTJNL CODE.

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page   6
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    914  ! 
    1	    915  ! 	X-3	JEJ0161		JAMES E JOHNSON		 9-SEP-1985
    1	    916  ! 		UPDATE RMS JOURNALING MESSAGES.
    1	    917  ! 
    1	    918  ! 	X-2	JWT0212		JIM TEAGUE		 4-SEP-1985
    1	    919  ! 		ADD (WHAT IS FOR NOW) AN INTERNAL STATUS CODE TO 
    1	    920  ! 		DIFFERENTIATE BETWEEN FINDING A DELETED RECORD (DEL)
    1	    921  ! 		AND FINDING IT BUT WITH A DIFFERENT KEY (KEY_MISMATCH).
    1	    922  ! 		
    1	    923  ! 	V03-024	RAS0314		RON SCHAEFER		21-JUN-1984
    1	    924  ! 		WORK OVER THE MESSAGES ONE MORE TIME:  FIX TYPO IN OK_RNF,
    1	    925  ! 		DELETE ACPEOF ERROR, DELETE WSF ERROR.
    1	    926  ! 
    1	    927  ! 	V03-023	RAS0282		RON SCHAEFER		28-MAR-1984
    1	    928  ! 		MINOR TEXT CHANGES AND COMMENTS ADDED.
    1	    929  ! 		DELETE RMS$_COP ERROR.
    1	    930  ! 
    1	    931  ! 	V03-022	DAS0005		DAVID SOLOMON		19-MAR-1984
    1	    932  ! 		REMOVE RMS$_ECHO (NO LONGER NEEDED AS A RESULT OF NEW
    1	    933  ! 		IMPLEMENTATION FOR ECHO SYS$INPUT -> SYS$OUTPUT).
    1	    934  ! 
    1	    935  ! 	V03-021	JWT0150		JIM TEAGUE		01-FEB-1984
    1	    936  ! 		ADD RMS$_IFF FOR TRYING TO WRITE-ACCESS A FILE ON 
    1	    937  ! 		MAGTAPE THAT HAS NON-0 VALUE FOR ANSI BUFFER OFFSET.
    1	    938  ! 
    1	    939  ! 	V03-020	RAS0233		RON SCHAEFER		 9-JAN-1984
    1	    940  ! 		ADD RMS$_NOVALPRS ERROR FOR $SEARCH NOT PRECEDED BY
    1	    941  ! 		VALID $PARSE.
    1	    942  ! 
    1	    943  ! 	V03-019	JWT0148		JIM TEAGUE		20-DEC-1983
    1	    944  ! 		ADD A JNL XAB ERROR FOR CONFLICTING RU ATTRIBUTES
    1	    945  ! 		ON $CREATE: RMS$_XCR.
    1	    946  ! 
    1	    947  ! 	V03-018	RAS0171		RON SCHAEFER		28-JUL-1983
    1	    948  ! 		ADD RMS$_BUSY; A STRUCTURE-LESS ERROR (R0-ONLY STATUS)
    1	    949  ! 		REPLACING TEMP3.
    1	    950  ! 
    1	    951  ! 	V03-017	DAS0004		DAVID SOLOMON		28-JUN-1983
    1	    952  ! 		ADD RMS$_FILEPURGED; ADD RMS$_ACPEOF FOR ZALEWSKI.
    1	    953  ! 
    1	    954  ! 	V03-016	KPL0007		PETER LIEBERWIRTH	 8-JUN-1983
    1	    955  ! 		FIX SPELLING IN JNL ERROR MESSAGES, ADD CJF ERROR WHICH
    1	    956  ! 		WILL SOON SUBSUME COP AND CQE.
    1	    957  ! 
    1	    958  ! 	V03-015	DAS0003		DAVID SOLOMON		18-FEB-1983
    1	    959  ! 		ADD XNF (REPLACING TEMP9), TMR (NEW), LWC (NEW).
    1	    960  ! 
    1	    961  ! 	V03-014	KBT0497		KEITH B. THOMPSON	18-FEB-1983
    1	    962  ! 		ADD INCOMPSHR ERROR (REUSE OF TEMP1 SLOT)
    1	    963  ! 
    1	    964  ! 	V03-013	RAS0120		RON SCHAEFER		 2-FEB-1983
    1	    965  ! 		ADD ECHO PSEUDO-STATUS TO SUPPORT ECHO OF SYS$INPUT
    1	    966  ! 		TO SYS$OUTPUT.
    1	    967  ! 
    1	    968  ! 	V03-012	JWH0174		JEFFRY W. HORN		24-JAN-1983
    1	    969  ! 		ADD CQE AND COP ERRORS.
    1	    970  ! 

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page   7
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    971  ! 	V03-011	KPL0006		PETER LIEBERWIRTH	 7-JAN-1983
    1	    972  ! 		ADD OK_RULK FOR RECOVERY UNIT SUPPORT.
    1	    973  ! 
    1	    974  ! 		ADD REENT ERROR FOR $RENAME.
    1	    975  ! 		
    1	    976  ! 	V03-009	JWH0153		JEFFREY W. HORN		 8-DEC-1982
    1	    977  ! 		ADD NRU ERROR.
    1	    978  ! 
    1	    979  ! 	V03-008	JWH0152		JEFFREY W. HORN		 8-DEC-1982
    1	    980  ! 		ADD JNS ERROR.
    1	    981  ! 
    1	    982  ! 	V03-007 MCN0002		MARIA DEL C. NASR	15-NOV-1982
    1	    983  ! 		REPLACE ORD ERROR CODE ELIMINATED BY MCN0001, SINCE
    1	    984  ! 		THE NETWORK CODE REFERENCES IT.
    1	    985  ! 
    1	    986  ! 	V03-006 MCN0001		MARIA DEL C. NASR	26-OCT-1982
    1	    987  ! 		PRINT KEY OF REFERENCE OR AREA IDENTIFICATION NUMBER
    1	    988  ! 		INSTEAD OF XAB ADDRESS FOR ERRORS RETURNED DURING
    1	    989  ! 		INDEXED FILE CREATION.  ALSO RENAME ALL UNUSED ERROR
    1	    990  ! 		CODES TO TEMP.
    1	    991  ! 
    1	    992  ! 	V03-005	JWH0102		JEFFREY W. HORN		24-SEP-1982
    1	    993  ! 		ADD RUP ERROR.
    1	    994  ! 
    1	    995  ! 	V03-004	RAS0095		RON SCHAEFER		 7-SEP-1982
    1	    996  ! 		ADD OVRDSKQUOTA ERROR.
    1	    997  ! 
    1	    998  ! 	V03-002	JWH0002		JEFFREY W. HORN		26-JUL-1982
    1	    999  ! 		CONVERT TO .MSG FORMAT.   ADD RUM ERROR.
    1	   1000  ! 
    1	   1001  ! 	V03-001	JWH0001		JEFFREY W. HORN		20-JUL-1982
    1	   1002  ! 		ADD JNF, JOP, AND NOJ ERRORS.
    1	   1003  ! 
    1	   1004  ! 	V02-042	KPL0005		PETER LIEBERWIRTH	 4-FEB-1982
    1	   1005  ! 		ADD ERROR MESSAGES RMS$_EXENQLM AND RMS$_DEADLOCK
    1	   1006  ! 		CORRECTLY.
    1	   1007  ! 
    1	   1008  ! 	V02-041	CDS0001		C D SAETHER	24-JAN-1982
    1	   1009  ! 		ADD GBC AND CRMP ERRORS.
    1	   1010  ! 
    1	   1011  ! 	V02-040	JAK0069		J A KRYCKA	15-JAN-1982
    1	   1012  ! 		ADD SUPPORT AND NETFAIL ERROR CODES.
    1	   1013  ! 
    1	   1014  ! 	V02-039	JAK0068		J A KRYCKA	31-DEC-1981
    1	   1015  ! 		MODIFY TEXT FOR SUP, NET, BUG_DAP, AND ENV ERROR MESSAGES.
    1	   1016  ! 
    1	   1017  ! 	V02-038 LJA0001		LAURIE ANDERSON 20-DEC-1981
    1	   1018  ! 		MODIFIED SOME MESSAGES TO READ BETTER.
    1	   1019  ! 
    1	   1020  ! 	V02-037	JAK0063		J A KRYCKA	31-AUG-1981
    1	   1021  ! 		ADD CRE_STM SUCCESS CODE.
    1	   1022  ! 
    1	   1023  ! 	V02-036	KPL0004		PETER LIEBERWIRTH	13-JAN-1981
    1	   1024  ! 		ADD ENQ SEVERE ERROR MESSAGE, TO INDICATE $ENQ/$DEQ FAILURE.
    1	   1025  ! 		ALSO ADD SUCCESS CODES OK_RRL, AND OK_WAT.
    1	   1026  ! 
    1	   1027  ! 	V02-035	REFORMAT	J A KRYCKA	30-JUL-1980

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page   8
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1028  ! 
    1	   1029  ! --
    1	   1030 	PARAMETER RMS$_FACILITY = '00000001'X
    1	   1031 	PARAMETER RMS$V_STVSTATUS = '0000000E'X	 !  MOVE TO BIT 14 OF THE
    1	   1032  !  STATUS CODE IT INDICATES
    1	   1033  !  THAT STV CONTAINS A SECONDARY
    1	   1034  !  STATUS CODE.
    1	   1035 	PARAMETER RMS$_SUC = '00010001'X
    1	   1036 	PARAMETER RMS$_NORMAL = '00010001'X
    1	   1037  ! +
    1	   1038  ! 
    1	   1039  ! 	SUCCESS CODES
    1	   1040  ! 
    1	   1041  ! -
    1	   1042  !  BIT 16 = BIT 15 = 1
    1	   1043 	PARAMETER RMS$_STALL = '00018001'X
    1	   1044  !  (NOTE: USER NEVER RECEIVES THIS CODE)
    1	   1045 	PARAMETER RMS$_PENDING = '00018009'X
    1	   1046 	PARAMETER RMS$_OK_DUP = '00018011'X
    1	   1047 	PARAMETER RMS$_OK_IDX = '00018019'X
    1	   1048  !   (RECORD HAS BEEN INSERTED, BUT INDEX STRUCTURE IS NO LONGER
    1	   1049  !   OPTIMAL.)
    1	   1050 	PARAMETER RMS$_OK_RLK = '00018021'X
    1	   1051  !  (BECAUSE LOCKER SET RLK IN ROP FIELD WHEN RECORD WAS LOCKED.)
    1	   1052 	PARAMETER RMS$_OK_RRL = '00018029'X
    1	   1053  !  (BECAUSE READER SET RRL IN ROP FIELD WHEN ACCESSING RECORD.)
    1	   1054  !  (THIS CODE USED TO BE OK_RRV)
    1	   1055  ! OK_RRV	;MSG <record was inserted successfully in primary>
    1	   1056  !   (BUT IT MAY NOT BE ACCESSIBLE VIA ONE-OR-MORE SECONDARY KEYS,
    1	   1057  !   AND NOT BY RFA ADDRESSING. FILE RE-ORGANIZATION RECOMMENDED!)
    1	   1058 	PARAMETER RMS$_KFF = '00018031'X
    1	   1059 	PARAMETER RMS$_OK_ALK = '00018039'X
    1	   1060 	PARAMETER RMS$_OK_DEL = '00018041'X
    1	   1061 	PARAMETER RMS$_OK_RNF = '00018049'X
    1	   1062 	PARAMETER RMS$_OK_LIM = '00018051'X
    1	   1063 	PARAMETER RMS$_OK_NOP = '00018059'X
    1	   1064 	PARAMETER RMS$_OK_WAT = '00018061'X
    1	   1065  !  (BECAUSE WAT BIT IN ROP WAS SET AND RECORD WAS ALREADY
    1	   1066  !  LOCKED.)
    1	   1067 	PARAMETER RMS$_CRE_STM = '00018069'X
    1	   1068 	PARAMETER RMS$_OK_RULK = '00018071'X
    1	   1069 	PARAMETER RMS$_SYNCH = '00018079'X
    1	   1070 	PARAMETER RMS$_OK_ACT = '00018081'X
    1	   1071 	PARAMETER RMS$_OK_NOCURTID = '00018089'X
    1	   1072  ! +
    1	   1073  ! 
    1	   1074  ! 	SUCCESS CODES PASSED THRU FROM DRIVERS AND ACP -	BIT 15 = 0
    1	   1075  ! 
    1	   1076  ! -
    1	   1077 	PARAMETER RMS$_CONTROLC = '00010651'X	 !  TERMINAL I/O ABORTED DUE TO CTRL/C
    1	   1078 	PARAMETER RMS$_CONTROLO = '00010609'X
    1	   1079  !  TERMINAL I/O ABORTED DUE TO CTRL/O
    1	   1080 	PARAMETER RMS$_CONTROLY = '00010611'X
    1	   1081  !  TERMINAL I/O ABORTED DUE TO CTRL/Y
    1	   1082 	PARAMETER RMS$_CREATED = '00010619'X
    1	   1083  !  FILE WAS CREATED, NOT OPENED
    1	   1084 	PARAMETER RMS$_SUPERSEDE = '00010631'X

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page   9
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1085  !  CREATED FILE SUPERSEDED EXISTING VERSION
    1	   1086 	PARAMETER RMS$_OVRDSKQUOTA = '00010669'X
    1	   1087  !  DISK USAGE EXCEEDS DISK QUOTA
    1	   1088 	PARAMETER RMS$_FILEPURGED = '00010679'X
    1	   1089  !  CREATE FILE CAUSED OLDEST FILE
    1	   1090  !  VERSION TO BE PURGED
    1	   1091  ! +
    1	   1092  ! 
    1	   1093  ! 	WARNING CODES
    1	   1094  ! 
    1	   1095  ! -
    1	   1096  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1097 	PARAMETER RMS$_BOF = '00018198'X
    1	   1098 	PARAMETER RMS$_RNL = '000181A0'X
    1	   1099 	PARAMETER RMS$_RTB = '000181A8'X
    1	   1100 	PARAMETER RMS$_TMO = '000181B0'X
    1	   1101 	PARAMETER RMS$_TNS = '000181B8'X
    1	   1102 	PARAMETER RMS$_BES = '000181C0'X
    1	   1103 	PARAMETER RMS$_PES = '000181C8'X
    1	   1104  ! +
    1	   1105  ! 
    1	   1106  ! 	ERROR CODES - WITHOUT STV (THAT IS, STV MAY BE USED BUT NO ASSOCIATED
    1	   1107  ! 		      CONDITION CODE IS IN STV)
    1	   1108  ! 
    1	   1109  ! -
    1	   1110  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1111 	PARAMETER RMS$_ACT = '0001825A'X
    1	   1112 	PARAMETER RMS$_DEL = '00018262'X
    1	   1113 	PARAMETER RMS$_INCOMPSHR = '0001826A'X
    1	   1114 	PARAMETER RMS$_DNR = '00018272'X
    1	   1115 	PARAMETER RMS$_EOF = '0001827A'X
    1	   1116 	PARAMETER RMS$_FEX = '00018282'X
    1	   1117 	PARAMETER RMS$_FLK = '0001828A'X
    1	   1118 	PARAMETER RMS$_FNF = '00018292'X
    1	   1119 	PARAMETER RMS$_PRV = '0001829A'X
    1	   1120 	PARAMETER RMS$_REX = '000182A2'X
    1	   1121 	PARAMETER RMS$_RLK = '000182AA'X
    1	   1122 	PARAMETER RMS$_RNF = '000182B2'X
    1	   1123  !   (RECORD NEVER WAS IN FILE, OR HAS BEEN DELETED.)
    1	   1124 	PARAMETER RMS$_WLK = '000182BA'X
    1	   1125 	PARAMETER RMS$_EXP = '000182C2'X
    1	   1126 	PARAMETER RMS$_NMF = '000182CA'X
    1	   1127 	PARAMETER RMS$_SUP = '000182D2'X
    1	   1128  !  (NOTE THAT SUPPORT HAS REPLACED SUP EXCEPT WHEN RMS CANNOT
    1	   1129  !  MAP THE DAP STATUS CODE INTO A FAL STATUS CODE.)
    1	   1130  !  (NOTE ALSO THAT SUP SHOULD HAVE BEEN DEFINED AS A SEVERE
    1	   1131  !  ERROR CODE. HOWEVER, SUPPORT IS A SEVERE ERROR CODE.)
    1	   1132 	PARAMETER RMS$_RSA = '000182DA'X
    1	   1133 	PARAMETER RMS$_CRC = '000182E2'X
    1	   1134 	PARAMETER RMS$_WCC = '000182EA'X
    1	   1135 	PARAMETER RMS$_IDR = '000182F2'X
    1	   1136 	PARAMETER RMS$_LWC = '000182FA'X
    1	   1137 	PARAMETER RMS$_UNUSED1 = '00018302'X
    1	   1138 	PARAMETER RMS$_NOVALPRS = '0001830A'X
    1	   1139 	PARAMETER RMS$_KEY_MISMATCH = '00018312'X
    1	   1140 	PARAMETER RMS$_RUH = '0001831A'X
    1	   1141 	PARAMETER RMS$_JND = '00018322'X

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  10
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1142 	PARAMETER RMS$_BADPHASE = '0001832A'X
    1	   1143 	PARAMETER RMS$_TOWDR = '00018332'X
    1	   1144 	PARAMETER RMS$_NEXDR = '0001833A'X
    1	   1145 	PARAMETER RMS$_INVDRMSG = '00018342'X
    1	   1146 	PARAMETER RMS$_RU_ACTIVE = '0001834A'X
    1	   1147 	PARAMETER RMS$_UNKRUFAC = '00018352'X
    1	   1148 	PARAMETER RMS$_LIMBO = '0001835A'X
    1	   1149 	PARAMETER RMS$_IVATRACE = '00018362'X
    1	   1150 	PARAMETER RMS$_OPNOTSUP = '0001836A'X
    1	   1151 	PARAMETER RMS$_EXTNOTFOU = '00018372'X
    1	   1152 	PARAMETER RMS$_EXT_ERR = '0001837A'X
    1	   1153 	PARAMETER RMS$_SEMANTICS = '00018382'X
    1	   1154 	PARAMETER RMS$_LSCAN = '0001838A'X
    1	   1155 	PARAMETER RMS$_ROOTSRCH = '00018392'X
    1	   1156 	PARAMETER RMS$_IDXSEARCH = '0001839A'X
    1	   1157 	PARAMETER RMS$_NETBTS = '000183A2'X
    1	   1158  ! +
    1	   1159  ! 
    1	   1160  ! 	ERROR CODES - WITH STV ERROR CODE (THAT IS, STV CONTAINS AN ASSOCIATED CONDITION CODE)
    1	   1161  ! 
    1	   1162  ! -
    1	   1163  !  BIT 16 = BIT 15 = BIT 14 = 1
    1	   1164 	PARAMETER RMS$_ACC = '0001C002'X
    1	   1165 	PARAMETER RMS$_CRE = '0001C00A'X
    1	   1166 	PARAMETER RMS$_DAC = '0001C012'X
    1	   1167 	PARAMETER RMS$_ENT = '0001C01A'X
    1	   1168 	PARAMETER RMS$_EXT = '0001C022'X
    1	   1169 	PARAMETER RMS$_FND = '0001C02A'X
    1	   1170 	PARAMETER RMS$_MKD = '0001C032'X
    1	   1171 	PARAMETER RMS$_DPE = '0001C03A'X
    1	   1172 	PARAMETER RMS$_SPL = '0001C042'X
    1	   1173 	PARAMETER RMS$_DNF = '0001C04A'X
    1	   1174 	PARAMETER RMS$_RUF = '0001C052'X
    1	   1175 	PARAMETER RMS$_WRTJNL_AIJ = '0001C05A'X
    1	   1176 	PARAMETER RMS$_WRTJNL_BIJ = '0001C062'X
    1	   1177 	PARAMETER RMS$_WRTJNL_ATJ = '0001C06A'X
    1	   1178 	PARAMETER RMS$_WRTJNL_RUJ = '0001C072'X
    1	   1179 	PARAMETER RMS$_RRF = '0001C07A'X
    1	   1180 	PARAMETER RMS$_DDTM_ERR = '0001C082'X
    1	   1181  ! +
    1	   1182  ! 
    1	   1183  ! 	SEVERE ERROR CODES - WITHOUT STV (THAT IS, STV MAY BE USED BUT NO ASSOCIATED
    1	   1184  ! 			     CONDITION CODE IS IN STV)
    1	   1185  ! 
    1	   1186  ! -
    1	   1187  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1188 	PARAMETER RMS$_DTFCDDREC = '000183EC'X
    1	   1189 	PARAMETER RMS$_AID = '000183F4'X
    1	   1190 	PARAMETER RMS$_ALN = '000183FC'X
    1	   1191 	PARAMETER RMS$_ALQ = '00018404'X
    1	   1192 	PARAMETER RMS$_ANI = '0001840C'X
    1	   1193 	PARAMETER RMS$_AOP = '00018414'X
    1	   1194 	PARAMETER RMS$_BKS = '0001841C'X
    1	   1195 	PARAMETER RMS$_BKZ = '00018424'X
    1	   1196 	PARAMETER RMS$_BLN = '0001842C'X
    1	   1197 	PARAMETER RMS$_BUG = '00018434'X
    1	   1198 	PARAMETER RMS$_BUG_DDI = '0001843C'X

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  11
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1199 	PARAMETER RMS$_BUG_DAP = '00018444'X
    1	   1200 	PARAMETER RMS$_BUG_RU_ACTIVE = '0001844C'X
    1	   1201 	PARAMETER RMS$_BUG_RURECERR = '00018454'X
    1	   1202 	PARAMETER RMS$_BUG_FLUSH_JNL_FAILED = '0001845C'X
    1	   1203 	PARAMETER RMS$_BUG_RU_ABORT_FAIL = '00018464'X
    1	   1204 	PARAMETER RMS$_BUG_RU_COMMIT_FAIL = '0001846C'X
    1	   1205 	PARAMETER RMS$_BUG_XX6 = '00018474'X
    1	   1206 	PARAMETER RMS$_BUG_XX7 = '0001847C'X
    1	   1207 	PARAMETER RMS$_BUG_XX8 = '00018484'X
    1	   1208 	PARAMETER RMS$_BUSY = '0001848C'X
    1	   1209 	PARAMETER RMS$_CCR = '00018494'X
    1	   1210 	PARAMETER RMS$_CHG = '0001849C'X
    1	   1211 	PARAMETER RMS$_CHK = '000184A4'X
    1	   1212 	PARAMETER RMS$_COD = '000184AC'X
    1	   1213 	PARAMETER RMS$_CUR = '000184B4'X
    1	   1214 	PARAMETER RMS$_DAN = '000184BC'X
    1	   1215 	PARAMETER RMS$_DEV = '000184C4'X
    1	   1216 	PARAMETER RMS$_DIR = '000184CC'X
    1	   1217 	PARAMETER RMS$_DME = '000184D4'X
    1	   1218 	PARAMETER RMS$_DNA = '000184DC'X
    1	   1219 	PARAMETER RMS$_DTP = '000184E4'X
    1	   1220 	PARAMETER RMS$_DUP = '000184EC'X
    1	   1221 	PARAMETER RMS$_DVI = '000184F4'X
    1	   1222 	PARAMETER RMS$_ESA = '000184FC'X
    1	   1223 	PARAMETER RMS$_ESS = '00018504'X
    1	   1224 	PARAMETER RMS$_FAB = '0001850C'X
    1	   1225 	PARAMETER RMS$_FAC = '00018514'X
    1	   1226 	PARAMETER RMS$_FLG = '0001851C'X
    1	   1227 	PARAMETER RMS$_FNA = '00018524'X
    1	   1228 	PARAMETER RMS$_FNM = '0001852C'X
    1	   1229 	PARAMETER RMS$_FSZ = '00018534'X
    1	   1230 	PARAMETER RMS$_FOP = '0001853C'X
    1	   1231 	PARAMETER RMS$_FUL = '00018544'X
    1	   1232 	PARAMETER RMS$_IAL = '0001854C'X
    1	   1233 	PARAMETER RMS$_IAN = '00018554'X
    1	   1234 	PARAMETER RMS$_IDX = '0001855C'X
    1	   1235 	PARAMETER RMS$_IFI = '00018564'X
    1	   1236 	PARAMETER RMS$_IMX = '0001856C'X
    1	   1237 	PARAMETER RMS$_IOP = '00018574'X
    1	   1238 	PARAMETER RMS$_IRC = '0001857C'X
    1	   1239 	PARAMETER RMS$_ISI = '00018584'X
    1	   1240 	PARAMETER RMS$_KBF = '0001858C'X
    1	   1241 	PARAMETER RMS$_KEY = '00018594'X
    1	   1242 	PARAMETER RMS$_KRF = '0001859C'X
    1	   1243 	PARAMETER RMS$_KSZ = '000185A4'X
    1	   1244 	PARAMETER RMS$_LAN = '000185AC'X
    1	   1245 	PARAMETER RMS$_RUNDOWN = '000185B4'X
    1	   1246 	PARAMETER RMS$_LNE = '000185BC'X
    1	   1247 	PARAMETER RMS$_DTFCVT = '000185C4'X
    1	   1248 	PARAMETER RMS$_MRN = '000185CC'X
    1	   1249 	PARAMETER RMS$_MRS = '000185D4'X
    1	   1250 	PARAMETER RMS$_NAM = '000185DC'X
    1	   1251 	PARAMETER RMS$_NEF = '000185E4'X
    1	   1252 	PARAMETER RMS$_DTFQUASYN = '000185EC'X
    1	   1253 	PARAMETER RMS$_NOD = '000185F4'X
    1	   1254 	PARAMETER RMS$_NPK = '000185FC'X
    1	   1255 	PARAMETER RMS$_ORD = '00018604'X	 ! ! NOT USED AS OF V4

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  12
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1256 	PARAMETER RMS$_ORG = '0001860C'X
    1	   1257 	PARAMETER RMS$_PBF = '00018614'X
    1	   1258 	PARAMETER RMS$_PLG = '0001861C'X
    1	   1259 	PARAMETER RMS$_POS = '00018624'X
    1	   1260 	PARAMETER RMS$_DTFQUAVAL = '0001862C'X
    1	   1261 	PARAMETER RMS$_QUO = '00018634'X
    1	   1262 	PARAMETER RMS$_RAB = '0001863C'X
    1	   1263 	PARAMETER RMS$_RAC = '00018644'X
    1	   1264 	PARAMETER RMS$_RAT = '0001864C'X
    1	   1265 	PARAMETER RMS$_RBF = '00018654'X
    1	   1266 	PARAMETER RMS$_RFA = '0001865C'X
    1	   1267 	PARAMETER RMS$_RFM = '00018664'X
    1	   1268 	PARAMETER RMS$_RHB = '0001866C'X
    1	   1269 	PARAMETER RMS$_RLF = '00018674'X
    1	   1270 	PARAMETER RMS$_ROP = '0001867C'X
    1	   1271 	PARAMETER RMS$_RRV = '00018684'X
    1	   1272 	PARAMETER RMS$_RVU = '0001868C'X
    1	   1273 	PARAMETER RMS$_RSS = '00018694'X
    1	   1274 	PARAMETER RMS$_RST = '0001869C'X
    1	   1275 	PARAMETER RMS$_RSZ = '000186A4'X
    1	   1276 	PARAMETER RMS$_SEQ = '000186AC'X
    1	   1277 	PARAMETER RMS$_SHR = '000186B4'X
    1	   1278 	PARAMETER RMS$_SIZ = '000186BC'X
    1	   1279 	PARAMETER RMS$_SQO = '000186C4'X
    1	   1280 	PARAMETER RMS$_DTFSESEST = '000186CC'X
    1	   1281 	PARAMETER RMS$_SYN = '000186D4'X
    1	   1282 	PARAMETER RMS$_TRE = '000186DC'X
    1	   1283 	PARAMETER RMS$_TYP = '000186E4'X
    1	   1284 	PARAMETER RMS$_UBF = '000186EC'X
    1	   1285 	PARAMETER RMS$_USZ = '000186F4'X
    1	   1286 	PARAMETER RMS$_VER = '000186FC'X
    1	   1287 	PARAMETER RMS$_XNF = '00018704'X
    1	   1288 	PARAMETER RMS$_XAB = '0001870C'X
    1	   1289 	PARAMETER RMS$_ESL = '00018714'X
    1	   1290 	PARAMETER RMS$_DTFSESTER = '0001871C'X
    1	   1291 	PARAMETER RMS$_ENV = '00018724'X
    1	   1292 	PARAMETER RMS$_PLV = '0001872C'X
    1	   1293 	PARAMETER RMS$_MBC = '00018734'X
    1	   1294 	PARAMETER RMS$_RSL = '0001873C'X
    1	   1295 	PARAMETER RMS$_WLD = '00018744'X
    1	   1296 	PARAMETER RMS$_NET = '0001874C'X	 !  (NOTE THAT NETFAIL HAS REPLACED NET EXCEPT WHEN RMS CANNOT
    1	   1297  !  MAP THE DAP STATUS CODE INTO A FAL STATUS CODE.)
    1	   1298 	PARAMETER RMS$_IBF = '00018754'X
    1	   1299 	PARAMETER RMS$_REF = '0001875C'X
    1	   1300 	PARAMETER RMS$_IFL = '00018764'X
    1	   1301 	PARAMETER RMS$_DFL = '0001876C'X
    1	   1302 	PARAMETER RMS$_KNM = '00018774'X
    1	   1303 	PARAMETER RMS$_IBK = '0001877C'X
    1	   1304 	PARAMETER RMS$_KSI = '00018784'X
    1	   1305 	PARAMETER RMS$_LEX = '0001878C'X
    1	   1306 	PARAMETER RMS$_SEG = '00018794'X
    1	   1307 	PARAMETER RMS$_SNE = '0001879C'X	 ! ! NOT USED AS OF V4
    1	   1308 	PARAMETER RMS$_SPE = '000187A4'X	 ! ! NOT USED AS OF V4
    1	   1309 	PARAMETER RMS$_UPI = '000187AC'X
    1	   1310 	PARAMETER RMS$_ACS = '000187B4'X
    1	   1311 	PARAMETER RMS$_STR = '000187BC'X
    1	   1312 	PARAMETER RMS$_FTM = '000187C4'X

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  13
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1313 	PARAMETER RMS$_GBC = '000187CC'X
    1	   1314 	PARAMETER RMS$_DEADLOCK = '000187D4'X
    1	   1315 	PARAMETER RMS$_EXENQLM = '000187DC'X
    1	   1316 	PARAMETER RMS$_JOP = '000187E4'X
    1	   1317 	PARAMETER RMS$_RUM = '000187EC'X
    1	   1318 	PARAMETER RMS$_JNS = '000187F4'X
    1	   1319 	PARAMETER RMS$_NRU = '000187FC'X
    1	   1320 	PARAMETER RMS$_IFF = '00018804'X
    1	   1321 	PARAMETER RMS$_DTFTRATBL = '0001880C'X
    1	   1322 	PARAMETER RMS$_DTFUNSTYP = '00018814'X
    1	   1323 	PARAMETER RMS$_DTFVERMIS = '0001881C'X
    1	   1324  ! +
    1	   1325  ! 
    1	   1326  ! 	ERROR CODES - WITHOUT STV
    1	   1327  ! 
    1	   1328  ! 	  DTFACC AND DTFCRE WERE ORIGINALLY INCLUDED IN THIS FATAL SEVERITY 
    1	   1329  ! 	  (NO STV) GROUPING.  IN ORDER TO CHANGE THEIR SEVERITY TO ERROR 
    1	   1330  ! 	  (NO STV) AND RETAIN THE SAME MESSAGE CODE VALUE, THE FOLLOWING 
    1	   1331  ! 	  SHIFTS IN SEVERITY FROM FATAL TO ERROR AND THEN BACK AGAIN ARE
    1	   1332  ! 	  DONE, WHILE RETAINING THE SAME ORIGINAL BASE ASSOCIATED WITH EACH.
    1	   1333  ! 
    1	   1334  ! -
    1	   1335  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1336 	PARAMETER RMS$_DTFACC = '00018822'X
    1	   1337  ! +
    1	   1338  ! 
    1	   1339  ! 	SEVERE ERROR CODES - WITHOUT STV
    1	   1340  ! 
    1	   1341  ! -
    1	   1342  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1343 	PARAMETER RMS$_BOGUSCOL = '0001882C'X
    1	   1344 	PARAMETER RMS$_ERRREADCOL = '00018834'X
    1	   1345 	PARAMETER RMS$_ERRWRITECOL = '0001883C'X
    1	   1346 	PARAMETER RMS$_SNS = '00018844'X
    1	   1347 	PARAMETER RMS$_NOEXTEND = '0001884C'X	 ! +
    1	   1348  ! 
    1	   1349  ! 	ERROR CODES - WITHOUT STV
    1	   1350  ! 
    1	   1351  ! -
    1	   1352  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1353 	PARAMETER RMS$_DTFCRE = '00018852'X
    1	   1354  ! +
    1	   1355  ! 
    1	   1356  ! 	SEVERE ERROR CODES - WITHOUT STV
    1	   1357  ! 
    1	   1358  ! -
    1	   1359  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1360 	PARAMETER RMS$_DELJNS = '0001885C'X
    1	   1361 	PARAMETER RMS$_NOTSAMEJNL = '00018864'X
    1	   1362 	PARAMETER RMS$_SNPPF = '0001886C'X
    1	   1363  ! +
    1	   1364  ! 
    1	   1365  ! 	SEVERE ERRORS - WITH STV ERROR CODE (THAT IS, STV CONTAINS AN ASSOCIATED CONDITION CODE)
    1	   1366  ! 
    1	   1367  ! -
    1	   1368  !  BIT 16 = BIT 15 = BIT 14 = 1
    1	   1369 	PARAMETER RMS$_ATR = '0001C0CC'X

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  14
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1370 	PARAMETER RMS$_ATW = '0001C0D4'X
    1	   1371 	PARAMETER RMS$_CCF = '0001C0DC'X
    1	   1372 	PARAMETER RMS$_CDA = '0001C0E4'X
    1	   1373 	PARAMETER RMS$_CHN = '0001C0EC'X
    1	   1374 	PARAMETER RMS$_RER = '0001C0F4'X
    1	   1375 	PARAMETER RMS$_RMV = '0001C0FC'X
    1	   1376 	PARAMETER RMS$_RPL = '0001C104'X
    1	   1377 	PARAMETER RMS$_SYS = '0001C10C'X
    1	   1378 	PARAMETER RMS$_WER = '0001C114'X
    1	   1379 	PARAMETER RMS$_WPL = '0001C11C'X
    1	   1380 	PARAMETER RMS$_IFA = '0001C124'X
    1	   1381 	PARAMETER RMS$_WBE = '0001C12C'X
    1	   1382 	PARAMETER RMS$_ENQ = '0001C134'X
    1	   1383 	PARAMETER RMS$_NETFAIL = '0001C13C'X
    1	   1384 	PARAMETER RMS$_SUPPORT = '0001C144'X
    1	   1385 	PARAMETER RMS$_CRMP = '0001C14C'X
    1	   1386 	PARAMETER RMS$_DTFCFGFIL = '0001C154'X
    1	   1387 	PARAMETER RMS$_REENT = '0001C15C'X
    1	   1388 	PARAMETER RMS$_ACC_RUJ = '0001C164'X
    1	   1389 	PARAMETER RMS$_TMR = '0001C16C'X
    1	   1390 	PARAMETER RMS$_ACC_AIJ = '0001C174'X
    1	   1391 	PARAMETER RMS$_ACC_BIJ = '0001C17C'X
    1	   1392 	PARAMETER RMS$_ACC_ATJ = '0001C184'X
    1	   1393 	PARAMETER RMS$_DTFDEFFIL = '0001C18C'X
    1	   1394 	PARAMETER RMS$_DTFREGFIL = '0001C194'X
    1	   1395 	PARAMETER RMS$_JNLNOTAUTH = '0001C19C'X
    1	   1396 CDEC$ END OPTIONS
    1	   1397 
	   1398       INTEGER*4 STATUS
	   1399       INTEGER*4 L1_LUN/19/, OPENMODE
	   1400       INTEGER*4 ST_MONTH,ST_DAYOFMONTH, END_MONTH, END_DAYOFMONTH
	   1401       CHARACTER L1FILENAME*80
	   1402       CHARACTER FULL_L1_NAME*80
	   1403       CHARACTER FIFO*3, TGS*3, RATEFLAG*1
	   1404       CHARACTER*17 MODE(10) /'Science mode     ','Engineering mode ',
	   1405      &                       'Maneuver mode    ','Contingency mode ',
	   1406      &                       'Science mode     ','Engineering mode ',
	   1407      &                       'Maneuver mode    ','Contingency mode ',
	   1408      &                       'Transitional mode','Unknown mode     '/,
	   1409      &             MODE_AT_START
	   1410 
	   1411       INTEGER*4 TRIGGER_MODE_CODE		!ADC trigger logic
	   1412       CHARACTER*20 TRIGGER_MODE(0:7) /'E                    ','Tn                  ',
	   1413      &                                '(Tn.E)+(Tn.En)       ','Tn.En               ',
	   1414      &                                'E+T                  ','(E.T)+(Tn.E)+(Tn.En)',
	   1415      &                                'C.(E+T)              ','(E.!T)+(Tn.En)      '/
	   1416       LOGICAL CODE_C,CODE_C2,STARTFOUND,ENDFOUND,USE_SC_CLOCK,
	   1417      .        COMPARE_TIME_GE,GOODSPIN
	   1418       INTEGER I,J,K,L,N,NN,CNTR,ITEMP,NAMELEN
	   1419       LOGICAL*1 BITRATE
	   1420       INTEGER*4 INCREMENT
	   1421 
	   1422 C    pha word - dissected:
	   1423       INTEGER*4 START_ID_RANGE,
	   1424      .          STOP_ID,
	   1425      .          DVS_COUNTS(0:31),
	   1426      .          ENERGY,

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  15
1.5                                                              5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   1427      .          SECTOR,
	   1428      .          SSD_ID,
	   1429      .          TIME_OF_FLIGHT,
	   1430      .          PSTART,
	   1431      .          RANGE
	   1432 
	   1433 C    choose data filtering options
	   1434       INTEGER*4  DATA_FILTER,		!data filter options 
	   1435      .           DATA_FILTER_COINC,	!data filtering by coincidence 
	   1436 C					 conditions
	   1437      .           DATA_FILTER_DVSTEP,	!data filter by voltage step
	   1438      .           DATA_DVSTEP_MIN,	!dv step min-max values for data filter
	   1439      .           DATA_DVSTEP_MAX,
	   1440      .           DATA_FILTER_RANGE,      !range selection
	   1441      .           DATA_FILTER_RANGECHECK, !check calculated vs. dpu range
	   1442      .           DIRECTION_FILTER,        !select data by telescope and sector info
	   1443      .           DIRECTION_FILTER_TEL1,  ! telescope 1 id
	   1444      .           DIRECTION_FILTER_TEL2,  ! telescope 2 id
	   1445      .		 DIRECTION_FILTER_TEL3,  ! telescope 3 id
	   1446      .		 DIRECTION_SECTOR_MIN,	  !sector filter: sum sectors .ge. min and .le. max
	   1447      .		 DIRECTION_SECTOR_MAX,
	   1448      .           TELE_FLAG,
	   1449      .           TELE_ID,		  !based on PSTART if TOF>0, or SSD if only E>0
	   1450      .           DATA_FILTER_MSPEED,      !speed filter
	   1451      .           DATA_MSPEED_MIN,         !	select data only if MASS solar
	   1452      .           DATA_MSPEED_MAX          !	speed is .GE. MIN and .LE. MAX
	   1453 
	   1454       CHARACTER*3 RONOFF, TONOFF            !ON, OFF status
	   1455       CHARACTER*1 TIME_ANSWER		  !Yes/No reply for adding another time period
	   1456       CHARACTER*10 COINC(0:2) / '       ALL',
	   1457      .                          '  M/Q-only',
	   1458      .                          '   M/Q & M'/
	   1459       CHARACTER*5 RANGESEL(0:6) /
	   1460      .                           '2 1 0' ,
	   1461      .                           '    0' ,
	   1462      .                           '  1  ' ,
	   1463      .                           '2    ' ,
	   1464      .                           '2   0' ,
	   1465      .                           '2 1  ' ,
	   1466      .                           '  1 0' /
	   1467       LOGICAL SEL_RANGE(0:2)
	   1468       CHARACTER*1 YORN			!yes or no answer
	   1469 
	   1470 C    DPPS information
	   1471       INTEGER*4 DPPSPLUS,		!STICS +DPPS on=1, off=0
	   1472      .          DPPSMINUS,		!STICS -DPPS on=1, off=0
	   1473      .		DVSTEP			!DPPS voltage step number (0-31)
	   1474 
	   1475 C    dpu algorithm values for e/q, mass and m/q:
	   1476       REAL*4 DPU_E_OVER_Q,
	   1477      .       DPU_MASS,
	   1478      .       DPU_MASS_OVER_Q
	   1479       INTEGER*4 DPU_NM,DPU_NQ,		!dpu calculations for m, m/q bins
	   1480      .          DPU_RANGE		!dpu calculations for range
	   1481 
	   1482       REAL*4   AVE_SPEED,		!Average solar wind speed
	   1483      .         BULK_SPEED,		!Solar wind speed

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  16
1.5                                                              5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   1484      .         BULK_UNCER,		!Uncertainty in solar wind speed from width
	   1485      .	       HIGH_SPEED,		!Highest valid speed encountered
	   1486      .	       LOW_SPEED,		!Lowest valid speed encountered
	   1487      .         SPEED_MEAN,		!Average speed over interval
	   1488      .         SPEED_HITS,		!Number of valid speed values in interval
	   1489      .	       SPEED_SIGMA,		!Standard deviation of speed
	   1490      .	       SUM_SW_SPEED,
	   1491      .	       SUM_SQ_SPEED,		!Sum of speed squared
	   1492      .         SW_SPEED                 !chosen solar wind speed to check against                      
	   1493 
	   1494       INTEGER*4 BAD_SPEED/0/,		!Number of invalid speed values
	   1495      .		ERR_SPD_FLAG,		!Error speed flag
	   1496      .		FIRSTSPEED/0/		!Used to get speed at start time
	   1497       CHARACTER*80 ERR_MESSAGE		!Message for invalid speed
	   1498 
	   1499 C     naming the output file
	   1500       LOGICAL BRACK   			!A variable which is .TRUE. if there is 
	   1501 C                     			a set of square brackets in the input file name.
	   1502 C                     			If there is, they, and everything between them,  
	   1503 C                     			will be stripped out so that the output file is  
	   1504 C                     			created in the user's account and not on the     
	   1505 C                     			account from which we read the data.             
	   1506       INTEGER*4 NINDEX, 		!used in rearranging the input file name to     
	   1507 C                      			create the output file name.                    
	   1508      .          JSAVE   		!used in rearranging the input file name to 
	   1509 C                        		create the output file name.
	   1510       CHARACTER*90 LISFIL  		!holds the name of the input file           
	   1511       CHARACTER OUTFILENAME*90
	   1512       CHARACTER*40 USERNAME		!user defined output filename
	   1513       INTEGER*4 IFILE		        !number of L1 files used (use with INPUTFILES)
	   1514       CHARACTER RUN_TIME*8, RUN_DATE*9		!run time and date
	   1515 C S/C position
	   1516       REAL*4 X1_GSE,Y1_GSE,Z1_GSE,     	!Start position
	   1517      .       X2_GSE,Y2_GSE,Z2_GSE	!Stop position
	   1518       INTEGER*4 START_POS/1/		!Change to -1 after giving first position values
	   1519 
	   1520       RECORD /CORE/ SCI
	   1521       RECORD /HDBstr/ HDB
	   1522       RECORD /ST_RATE/ STICS_RATE
	   1523       RECORD /ST_PHA/ STICS_PHA
	   1524       RECORD /T/ START, END, TIME_TO_USE
	   1525 
	   1526       RECORD /MA_RATE/ MASS_RATE   ! receives data on rates from MASS sensor
	   1527       RECORD /MA_PHA/ MASS_PHA     ! receives data on tof's from the mass sensor
	   1528 
	   1529 
	   1530 C   **********************************************************
	   1531 C   *							     *
	   1532 C   *		USER PROMPTS	: input file		     *
	   1533 C   *				  table format		     *
	   1534 C   *				  data filtering	     *
	   1535 C   *				  times			     *
	   1536 C   *							     *
	   1537 C   **********************************************************
	   1538 
	   1539 C
	   1540 C Get input L1 filename

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  17
1.5                                                              5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   1541 C
	   1542       L1FILENAME = 'DATA_DIR:WI*L1*.DAT'
	   1543       CALL WIND_GET_FILENAME(L1FILENAME, STATUS)
	   1544       IF(STATUS.NE.1) THEN
	   1545 	WRITE (*,2) STATUS
	   1546     2   FORMAT(' FILE STATUS = ',I3)
	   1547         STOP
	   1548       ENDIF
	   1549 
	   1550 C
	   1551 C Set time format to "wall" time (=0)
	   1552 C
	   1553       USE_SC_CLOCK = 0
	   1554 
	   1555       FIRSTFILE = .TRUE.
	   1556       CALL TIME(RUN_TIME)			!Get run time
	   1557       CALL DATE(RUN_DATE)			!Get run date
	   1558       
	   1559       LOW_SPEED = 1000.0
	   1560       HIGH_SPEED = 200.0
	   1561 
	   1562       STARTFOUND=.FALSE.
	   1563       ENDFOUND=.FALSE.
	   1564 C
	   1565 C Prompt user for filtering
	   1566 C 
	   1567 C     Initialize default conditions
	   1568       DATA_FILTER = 0		!no data filtering
	   1569       DATA_FILTER_COINC = 0	!no filtering by m or m/q conditions
	   1570       DATA_FILTER_DVSTEP  = -1	!no filtering by e/q
	   1571       DATA_DVSTEP_MIN = 0	!min dv step = 0
	   1572       DATA_DVSTEP_MAX = 31	!max dv step = 31
	   1573       DATA_FILTER_RANGE = 0	!no filtering by range
	   1574       DATA_FILTER_RANGECHECK = 0 !no filtering by range check
	   1575       SEL_RANGE(0) = .TRUE.	!accept range 0 events
	   1576       SEL_RANGE(1) = .TRUE.	!accept range 1 events
	   1577       SEL_RANGE(2) = .TRUE.	!accept range 2 events
	   1578       DATA_FILTER_MSPEED = -1        	!no check on MASS solar wind speed
	   1579       DATA_MSPEED_MAX    = 1000     		!max sw speed selection is 1000 km/sec
	   1580       DATA_MSPEED_MIN    = 260      		!min sw speed selection is 260 km/sec
	   1581 
	   1582       DIRECTION_FILTER = 0         !no filtering by telescope or sector info
	   1583       DIRECTION_FILTER_TEL1  =  1  !   telescope 1
	   1584       DIRECTION_FILTER_TEL2  =  2  !   telescope 2
	   1585       DIRECTION_FILTER_TEL3  =  3  !   telescope 3
	   1586       DIRECTION_SECTOR_MIN   =  0  !Sector range to sum over
	   1587       DIRECTION_SECTOR_MAX   = 15
	   1588 
	   1589       TYPE 6
	   1590     6 FORMAT(' Is data filtering by DATA TYPE desired? '
	   1591      .      /' (i.e.:  M,M/Q conditions,  E/Q,  PHA Range, SW Speed,) '
	   1592      .      /' [Y/N] '$)
	   1593       ACCEPT 7, YORN
	   1594     7 FORMAT (A)
	   1595       IF (YORN.EQ.'Y' .OR. YORN.EQ.'y') THEN
	   1596         DATA_FILTER = 1
	   1597 	CALL USER_REQUESTS_DATA_TYPE(

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  18
1.5                                                              5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   1598      .           DATA_FILTER_COINC,
	   1599      .           DATA_FILTER_DVSTEP,
	   1600      .		 DATA_DVSTEP_MIN,
	   1601      .		 DATA_DVSTEP_MAX,
	   1602      .           DATA_FILTER_RANGE,
	   1603      .           SEL_RANGE, 
	   1604      .           DATA_FILTER_RANGECHECK,
	   1605      .           DATA_FILTER_MSPEED,
	   1606      .           DATA_MSPEED_MIN,
	   1607      .           DATA_MSPEED_MAX)
	   1608 
	   1609       ENDIF
	   1610 
	   1611 
	   1612       TYPE 8
	   1613     8 FORMAT(/,' Is data filtering by DIRECTION desired? '
	   1614      .      /' (i.e.:  Telescope or Sector) '
	   1615      .      /' [Y/N] '$)
	   1616       ACCEPT 7, YORN
	   1617       IF (YORN.EQ.'Y' .OR. YORN.EQ.'y') THEN
	   1618         DIRECTION_FILTER = 1
	   1619 	CALL DIRECTION_REQUESTS (
	   1620      .           DIRECTION_FILTER_TEL1,
	   1621      .           DIRECTION_FILTER_TEL2,
	   1622      .		 DIRECTION_FILTER_TEL3,
	   1623      .		 DIRECTION_SECTOR_MIN,
	   1624      .		 DIRECTION_SECTOR_MAX)
	   1625       ENDIF
	   1626 
	   1627 C
	   1628 C Prompt user for output filename
	   1629 C
	   1630       WRITE(6,*)'Enter name for output file or <RETURN> for default name'
	   1631       READ(5,'(A)') USERNAME
	   1632 C
	   1633 C Prompt user for start and stop times
	   1634 C
	   1635       TYPE 10
	   1636   10  FORMAT(/' Enter Start time( -1/ = whole file) - ',/,
	   1637      .       ' Year,Month,Day,Hour,Min,Sec: '$) 
	   1638       ACCEPT*, START.YEAR,ST_MONTH,ST_DAYOFMONTH,START.HR,START.MIN,START.SEC
	   1639       IF(START.YEAR.GE.0)THEN
	   1640 C
	   1641 C Convert month and day to day of year.
	   1642 C
	   1643         CALL CNVRT_T_YRMONDAY_TO_YEARDAY( START, ST_MONTH, ST_DAYOFMONTH)
	   1644         IF(START.YEAR.LT.100)START.YEAR=START.YEAR+1900        ! Allow for 2-digit years
	   1645         IF(START.YEAR.LT.1980)START.YEAR=START.YEAR+100        ! Allow for years beyond 1999
	   1646         TYPE 12
	   1647   12    FORMAT(' Enter End time - ',/,
	   1648      .         ' Year,Month,Day,Hour,Min,Sec: '$) 
	   1649         ACCEPT*, END.YEAR,END_MONTH,END_DAYOFMONTH,END.HR,END.MIN,END.SEC
	   1650 C
	   1651 C Convert month and day to day of year.
	   1652 C
	   1653         CALL CNVRT_T_YRMONDAY_TO_YEARDAY( END, END_MONTH, END_DAYOFMONTH)
	   1654         IF(END.YEAR.LT.100)END.YEAR=END.YEAR+1900        ! Allow for 2-digit years

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  19
1.5                                                              5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   1655         IF(END.YEAR.LT.1980)END.YEAR=END.YEAR+100        ! Allow for years beyond 1999
	   1656       ELSE
	   1657         END.YEAR=3000
	   1658       ENDIF
	   1659 
	   1660 C   **********************************************************
	   1661 C   *							     *
	   1662 C   *			CREATE OUTPUT FILE NAME		     *
	   1663 C   *							     *
	   1664 C   **********************************************************
	   1665 C
	   1666 C   Strip the extension off of the input file name so
	   1667 C   that we can give a new extension to the output file
	   1668 C
	   1669       NINDEX  = 80
	   1670       DO WHILE (L1FILENAME(NINDEX:NINDEX) .NE. '_')
	   1671          NINDEX = NINDEX - 1
	   1672       END DO
	   1673 C
	   1674 C   Find out if the input file name contains some directory
	   1675 C   designation.  This, if it exists, it will also be stripped off.
	   1676 C
	   1677       I = 1
	   1678       DO WHILE (.NOT. BRACK .AND. I .LT. NINDEX)
	   1679          IF (L1FILENAME(I:I) .EQ. '[') BRACK = .TRUE.
	   1680          I = I + 1
	   1681       END DO
	   1682 C
	   1683 C   Now, finally, load the input file name into the output
	   1684 C   file name and add proper extension.
	   1685 C
	   1686       JSAVE = 1
	   1687       DO 3 I = 1, NINDEX
	   1688          IF (BRACK) THEN
	   1689             IF (L1FILENAME(I:I) .EQ. ']') BRACK = .FALSE.
	   1690          ELSE
	   1691             LISFIL(JSAVE:JSAVE) = L1FILENAME(I:I)
	   1692             JSAVE = JSAVE + 1
	   1693          ENDIF
	   1694    3  CONTINUE
	   1695       LISFIL(1:9) = 'STICS_PHA'
	   1696       IF (  (START.YEAR  .EQ. -1)   .AND.		!no time filter
	   1697      .      (DATA_FILTER .EQ. 0)   .AND.
	   1698      .      (DIRECTION_FILTER .EQ. 0) ) THEN		!no data type filter
	   1699 
	   1700 	      LISFIL(JSAVE+1:JSAVE+5) = 'A.TBL'        ! ALL DATA
	   1701       ELSE
	   1702 	      LISFIL(JSAVE+1:JSAVE+5) = 'S.TBL'        ! SELECTED DATA
	   1703       ENDIF
	   1704 
	   1705       IF(USERNAME(1:12) .NE. '            ')THEN
	   1706         OUTFILENAME = USERNAME
	   1707       ELSE
	   1708         OUTFILENAME = LISFIL				! default name
	   1709       ENDIF
	   1710 
	   1711 C   **********************************************************

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  20
1.5                                                              5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   1712 C   *							     *
	   1713 C   *			OPEN L1 INPUT FILE 		     *
	   1714 C   *			READ DATA			     *
	   1715 C   *							     *
	   1716 C   **********************************************************
	   1717 
	   1718 C
	   1719 C Open L1 file for input, and read first SR, Core, HDB, and STICS_RATES
	   1720 C
	   1721  1000 CONTINUE
	   1722       IF (FIRSTFILE .EQ. .FALSE.) THEN
	   1723         IFILE = IFILE + 1
	   1724 	OPENMODE = 1
	   1725 	CALL WIND_L1_OPEN_NEXT(L1_LUN,OPENMODE,L1FILENAME,L1_FILE_HEADER,STATUS)
	   1726       ELSE
	   1727         IFILE = 1
	   1728         FIRSTFILE = .FALSE.
	   1729         CALL WIND_L1_OPEN( L1_LUN, L1FILENAME, L1_FILE_HEADER, STATUS)
	   1730       ENDIF
	   1731       IF (STATUS .NE. 1) GOTO 9010
	   1732 
	   1733       INQUIRE(FILE=L1FILENAME,NAME=FULL_L1_NAME)
	   1734       WRITE(6,1001) FULL_L1_NAME
	   1735  1001 FORMAT(' OPEN FILE ',A)
	   1736 
	   1737       NAMELEN = INDEX(FULL_L1_NAME,' ') - 1
	   1738       IF (NAMELEN .LT. 1) NAMELEN=LEN(FULL_L1_NAME)
	   1739 
	   1740   13  CALL WIND_L1_READ_SR( L1_LUN, CNTR, L1_SR_HEADER, STATUS )
	   1741       IF(STATUS.EQ.RMS$_EOF)GO TO 900
	   1742       IF (STATUS .NE. 1) GOTO 9020
	   1743       CALL WIND_L1_GET_BASIC( L1_LUN, SCI, STATUS)
	   1744       IF (STATUS .NE. 1) GOTO 9030
	   1745       CALL WIND_L1_GET_HDB( L1_LUN, HDB, STATUS)
	   1746       IF (STATUS .NE. 1) GOTO 9050
	   1747       CALL WIND_L1_GET_STICS( L1_LUN, STICS_RATE, STICS_PHA, STATUS )
	   1748       IF (STATUS .NE. 1) GOTO 9080
	   1749 C
	   1750 C Find first good spin, get year and DOY from it.
	   1751 C
	   1752       N=0
	   1753       GOODSPIN=.FALSE.
	   1754       DO 14 WHILE(.NOT.GOODSPIN)
	   1755         K=N/32+1
	   1756         NN=MOD(N,32)
	   1757         GOODSPIN=BTEST(L1_SR_HEADER.PRESENT(K),NN)
	   1758         N=N+1
	   1759         IF(N.GT.59)GOTO 13 ! This SCI-REC all bad; get next
	   1760   14  CONTINUE
	   1761       IF(N.GT.59)GOTO 13
	   1762 C
	   1763 C If low bitrate, make sure that N points to an even spin (odd spins
	   1764 C have beencatenation).
	   1765 C If high bitrate, decrement because N was incremented after the 1st
	   1766 C good spin was found.
	   1767 C
	   1768       IF(.NOT.SCI.EDB(N).BITRATE)THEN

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  21
1.5                                                              5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   1769         N=N+MOD(N,2)
	   1770         IF(N.GE.60)GOTO 13
	   1771       ELSE
	   1772         N=N-1
	   1773       ENDIF
	   1774 
	   1775 C
	   1776 C
	   1777 C Check FIFO mode, telemetry mode, TGS mode, and trigger mode; place info in header.
	   1778 C
	   1779       ITEMP = HDB.BDH.DAT(221)
	   1780       IF(IBITS(ITEMP,7,1).EQ.1)THEN
	   1781         FIFO='ON '
	   1782       ELSE
	   1783         FIFO='OFF'
	   1784       ENDIF
	   1785 C  
	   1786       ITEMP = SCI.EDB(N).TLM_Mode
	   1787       IF(ITEMP.EQ.0)ITEMP=10
	   1788       IF(ITEMP.EQ.128)ITEMP=9
	   1789       IF(ITEMP.EQ.256)ITEMP=10
	   1790       MODE_AT_START = MODE(ITEMP)
	   1791 C
	   1792       ITEMP = STICS_RATE.EDB(N).RATE(179)
	   1793       IF(IBITS(ITEMP,7,1).EQ.1)THEN
	   1794         TGS='ON '
	   1795       ELSE
	   1796         TGS='OFF'
	   1797       ENDIF
	   1798 C
	   1799       ITEMP = HDB.BDH.DAT(25)
	   1800       TRIGGER_MODE_CODE = IBITS(ITEMP,1,3)
	   1801 
	   1802 C   **********************************************************
	   1803 C   *							     *
	   1804 C   *			OPEN OUTPUT FILE		     *
	   1805 C   *			WRITE HEADER			     *
	   1806 C   *							     *
	   1807 C   **********************************************************
	   1808 C
	   1809 C Open PHA file for output
	   1810 C
	   1811       IF(IFILE .EQ. 1) THEN
	   1812         OPEN(UNIT= 50, NAME= OUTFILENAME, FORM='FORMATTED', 
	   1813      &     TYPE='NEW', RECL=168)
	   1814         WRITE(50,15)
	   1815   15    FORMAT('  STICS TIME, PHA and DPU M & M/Q TABLE LISTING')
	   1816 	WRITE(50,'(A)') '  Run time  '//RUN_TIME//'   '//RUN_DATE
	   1817         WRITE(50,16) FULL_L1_NAME(1:NAMELEN)
	   1818   16    FORMAT('  ',T10,'Input Level 1 Filename: ',A)
	   1819 
	   1820         WRITE(50,18) 'Wall',TRIGGER_MODE(TRIGGER_MODE_CODE),FIFO,TGS,MODE_AT_START 
	   1821   18    FORMAT(T3,'Clock selected: ',A,5X,'Trigger mode is ',A22,/,
	   1822      .         T3,'FIFO mode is ',A3,9X,'TGS  mode is ',A3,/,
	   1823      .         T3,'Telemetry mode is ',A17,/)
	   1824 
	   1825 	RONOFF = 'OFF'

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  22
1.5                                                              5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   1826         IF(DATA_FILTER_RANGECHECK.EQ.1) RONOFF = ' ON'
	   1827         TONOFF = 'ON'
	   1828  
	   1829         WRITE(50,19)DATA_DVSTEP_MIN, DATA_DVSTEP_MAX,COINC(DATA_FILTER_COINC),
	   1830      .              RANGESEL(DATA_FILTER_RANGE),
	   1831      .              RONOFF,DATA_MSPEED_MIN,DATA_MSPEED_MAX,
	   1832      .		    DIRECTION_FILTER_TEL1,DIRECTION_FILTER_TEL2,DIRECTION_FILTER_TEL3,
	   1833      .		    DIRECTION_SECTOR_MIN,DIRECTION_SECTOR_MAX,TONOFF,
	   1834      .              START.YEAR,ST_MONTH, ST_DAYOFMONTH,START.HR,START.MIN,START.SEC,
	   1835      .              END.YEAR,END_MONTH,END_DAYOFMONTH,END.HR,END.MIN,END.SEC
	   1836 
	   1837 
	   1838   19    FORMAT(T3,'FILTERING CHOICES:', /,
	   1839      .              T11,'Voltage step selection =  ', I2, ' to ' ,I2,/,
	   1840      .              T11,'Event type selection   =',A10,/,
	   1841      .              T11,'Range selection        =     ',A5,/,
	   1842      .              T11,'Range checking is ',A3,/,
	   1843      .		    T11,'Velocity range         = ',I4,' to ',I6,//,   
	   1844      .		    T11,'Selected Telescopes =  ',I2,',',I2,',',I2, '  (-1=not selected)', /,
	   1845      .		    T11,'Sectors     =  ',I2,' to ',I2,/,
	   1846      .              T11,'Telescope checking is ',A3,//,
	   1847      .              T3,'Start Time:  ',I4,I2.2,I2.2,2X,I2.2,2(':',I2.2),5X,
	   1848      .              'End Time:  ',I4,I2.2,I2.2,2X,I2.2,2(':',I2.2),
	   1849      .              //,'       SR BR  Year  Day    Time    VS     E/Q',
	   1850      &              '    StopID   StartID/Range  Energy(Ed)  Sector  SSD-ID',
	   1851      &              '    ToF(Td)  START   RANGE      M/Q     MASS   NM   NQ  NRG',/)
	   1852 
	   1853  
	   1854       ENDIF  !ifile .eq. 1
	   1855 
	   1856 C
	   1857 C Get the Basic Core data
	   1858 C
	   1859  100  CALL WIND_L1_GET_BASIC( L1_LUN, SCI, STATUS)
	   1860       IF (STATUS .NE. 1) GOTO 9030
	   1861 C
	   1862 C Get Housekeeping Data Block
	   1863 C
	   1864       CALL WIND_L1_GET_HDB( L1_LUN, HDB, STATUS)
	   1865       IF (STATUS .NE. 1) GOTO 9050
	   1866 C
	   1867 C Get STICS rates and PHA
	   1868 C
	   1869       CALL WIND_L1_GET_STICS( L1_LUN, STICS_RATE, STICS_PHA, STATUS )
	   1870       IF (STATUS .NE. 1) GOTO 9080
	   1871 c
	   1872 C Get bitrate of first good spin
	   1873 C
	   1874       BITRATE = SCI.EDB(N).BITRATE
	   1875 c
	   1876 c Get appropriate for loop below. At HBR, there is data in every spin;
	   1877 c at LBR there is data only in even-numbered spins.
	   1878 c
	   1879       IF(BITRATE)THEN
	   1880 	INCREMENT = 1
	   1881       ELSE
	   1882 	INCREMENT = 2

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  23
1.5                                                              5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   1883       ENDIF 
	   1884 C
	   1885 C Output STICS PHA one science record.
	   1886 C
	   1887       DO 800 J=0,59,INCREMENT		!0-59 spins
	   1888         IF(USE_SC_CLOCK)THEN
	   1889           TIME_TO_USE = SCI.EDB(J).SC_TIME
	   1890         ELSE
	   1891           TIME_TO_USE = SCI.EDB(J).W_TIME
	   1892         ENDIF
	   1893 C
	   1894 C Compare time read to start time. If the time read is greater than or equal to the user-
	   1895 C specified start time, then begin processing data.
	   1896 C
	   1897         IF(.NOT.STARTFOUND)THEN
	   1898           STARTFOUND=COMPARE_TIME_GE(TIME_TO_USE,START)
	   1899         ENDIF
	   1900         IF(STARTFOUND)THEN
	   1901 C
	   1902 C Compare time read to end time. If time read is greater than the user-specified end time, 
	   1903 C we're done. Go to the part of the code that closes files and STOP's program.
	   1904 C
	   1905           ENDFOUND=COMPARE_TIME_GE(TIME_TO_USE,END)
	   1906           IF(ENDFOUND)GO TO 901
	   1907 C
	   1908 C Check quality flags. If PHA, BR, or overall quality flags are bad, skip this spin
	   1909 C
	   1910           IF(BITRATE)THEN
	   1911             IF(SCI.EDB(J).Qual.NE.0)GOTO 800
	   1912           ELSE
	   1913             IF((SCI.EDB(J).Qual.NE.0).OR.(SCI.EDB(J+1).Qual.NE.0))GOTO 800
	   1914           ENDIF
	   1915           IF(SCI.EDB(J).ST_BR_Qual.NE.0)GOTO 800
	   1916           IF(SCI.EDB(J).ST_P_Qual.NE.0)GOTO 800
	   1917 
	   1918 C
	   1919 c Get S/C position at beginning of time period
	   1920 c
	   1921  	  IF (START_POS .EQ. 1) THEN
	   1922              X1_GSE = L1_SR_HEADER.GSE_POS.X/6380.0 
	   1923              Y1_GSE = L1_SR_HEADER.GSE_POS.Y/6380.0 
	   1924              Z1_GSE = L1_SR_HEADER.GSE_POS.Z/6380.0 
	   1925              START_POS = -1
	   1926           ENDIF
	   1927 
	   1928 C
	   1929 C Get MASS Speed at start time and at the beginning of every Sci Record.
	   1930 C 
	   1931 	  IF((J .EQ. 0) .OR. (FIRSTSPEED .EQ. 0)) THEN
	   1932             CALL WIND_L1_GET_MASS(L1_LUN,MASS_RATE,MASS_PHA,STATUS)   ! mass data
	   1933             IF (STATUS .NE. 1) GOTO 9085
	   1934 
	   1935       	    CALL SMS_MASS_SPEED(HDB, MASS_RATE,  	!input
	   1936      .         BULK_SPEED, BULK_UNCER, ERR_SPD_FLAG , ERR_MESSAGE)	!output
	   1937 
	   1938             IF((ERR_SPD_FLAG .EQ. 0) .AND. (BULK_UNCER .GT. 0) .AND. (BULK_UNCER .LT. 150.0)) THEN
	   1939 	      SW_SPEED = BULK_SPEED

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  24
1.5                                                              5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   1940             ELSE
	   1941 	      BAD_SPEED = BAD_SPEED + 1
	   1942 c	      WRITE(56,151)TIME_TO_USE.DOY,TIME_TO_USE.HR,TIME_TO_USE.MIN,TIME_TO_USE.SEC,
	   1943 c     .                     BULK_SPEED,BULK_UNCER,ERR_MESSAGE
	   1944 c 151	      FORMAT(1X,I4.3,3(':',I2.2),3X,'Invalid speed encountered:  ',
	   1945 c     .               F10.1,' +/- ',F10.1,' km/s',/,16X,A) 
	   1946 	      SW_SPEED = 0
	   1947             ENDIF
	   1948 	      
	   1949 	  ENDIF
	   1950 
	   1951   	  FIRSTSPEED = -1		!Change after giving 1st speed
	   1952 
	   1953 C
	   1954 C Get dpps enable information, voltage step, and default value of e/q. 
	   1955 C
	   1956           ITEMP =HDB.BDH.DAT(24)
	   1957           ITEMP2=HDB.BDH.DAT(25)
	   1958 	  DPPSPLUS  = IBITS(ITEMP,7,1)
	   1959           DPPSMINUS = IBITS(ITEMP2,0,1) 
	   1960 
	   1961           ITEMP = STICS_RATE.EDB(J).RATE(179)
	   1962           DVSTEP = IBITS(ITEMP,0,5)
	   1963 	
	   1964           IF ( (DVSTEP.GE.DATA_DVSTEP_MIN) .AND.
	   1965      .         (DVSTEP.LE.DATA_DVSTEP_MAX) .AND.
	   1966 
	   1967      .         ( (DATA_FILTER_MSPEED .LT. 0) .OR. 
	   1968      .           ((SW_SPEED.GE.DATA_MSPEED_MIN) .AND.
	   1969      .            (SW_SPEED.LE.DATA_MSPEED_MAX)) )   ) THEN
	   1970 
	   1971 C
	   1972 C Get info for determining speed statistics
	   1973 C
	   1974              IF ((SW_SPEED.GE.DATA_MSPEED_MIN).AND.(SW_SPEED.LE.DATA_MSPEED_MAX)) THEN   !Need second speed check
	   1975 											 !for no speed filtering
	   1976 	       IF(SW_SPEED .LT. LOW_SPEED) LOW_SPEED = SW_SPEED
	   1977 	       IF(SW_SPEED .GT. HIGH_SPEED) HIGH_SPEED = SW_SPEED
	   1978                SPEED_HITS = SPEED_HITS +1.0
	   1979                SUM_SW_SPEED = SUM_SW_SPEED + SW_SPEED
	   1980                SUM_SQ_SPEED = SUM_SQ_SPEED + SW_SPEED**2
	   1981              ENDIF
	   1982 
	   1983 C
	   1984 C If bad HDB flag, calculate e/q using default dpu algorithm
	   1985 C
	   1986             IF(HDB.Qual .NE. 0) THEN
	   1987                DPU_E_OVER_Q = 6.190722 * (1.1225857**DVSTEP)
	   1988 	       DPPSPLUS = 1
	   1989       	       DPPSMINUS= 1
	   1990             ELSE
	   1991                CALL DPU_EQ(DPPSPLUS,DPPSMINUS,DVSTEP,DPU_E_OVER_Q)
	   1992 	    ENDIF
	   1993 C
	   1994 C Get bit rate
	   1995 C
	   1996             IF(SCI.EDB(J).BITRATE)THEN

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  25
1.5                                                              5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   1997                RATEFLAG='H'                ! High bit rate
	   1998             ELSEIF(TIME_TO_USE.YEAR.NE.0)THEN
	   1999                RATEFLAG='L'                ! Low bit rate
	   2000             ELSE
	   2001                RATEFLAG='?'                ! Bit rate indeterminate, due to bad quality data
	   2002             ENDIF
	   2003 
	   2004             IF (RATEFLAG.EQ.'L' .AND. MOD(J,2).EQ.1)  THEN
	   2005      	      GO TO 800         
	   2006 	    ELSE
	   2007 
	   2008 C
	   2009 C Do for all STICS PHA words
	   2010 C
	   2011             DO 300 I=0, (SCI.EDB(J).STICS_Len-1) * 4, 4
	   2012 C
	   2013 C Get parts of PHA word
	   2014 C
	   2015               CALL DISSECT_STICS_PHA(STICS_PHA.EDB(J).PHA(I),
	   2016      .                      STOP_ID,START_ID_RANGE,ENERGY,SECTOR,
	   2017      .                      SSD_ID,TIME_OF_FLIGHT,PSTART,RANGE)
	   2018 
	   2019               CALL TELESCOPE_ID (TIME_OF_FLIGHT,ENERGY,
	   2020      .                PSTART,STOP_ID,SSD_ID,TELE_ID, TELE_FLAG)
	   2021 C
	   2022 C Calculate Mass and M/Q using DPU algorithms
	   2023 C
	   2024               CALL MMPQ_DPU_WSTICS(DPPSPLUS,DPPSMINUS,DVSTEP,
	   2025      .                           ENERGY,TIME_OF_FLIGHT,
	   2026      .                           DPU_MASS_OVER_Q,DPU_MASS,
	   2027      .                           DPU_NM,DPU_NQ,DPU_RANGE)
	   2028 	      IF (FIFO .EQ. 'ON ')DPU_RANGE = 2
	   2029 C
	   2030 C Print out PHA data by word. There will thus be one row per PHA word, and no enties in the
	   2031 C table for voltage steps that have no PHA words.
	   2032 C
	   2033 
	   2034 	      IF ( (DATA_FILTER_RANGE.EQ.0)  .OR.
	   2035      .          (RANGE .EQ. 0 .AND. SEL_RANGE(0))  .OR.
	   2036      .          (RANGE .EQ. 1 .AND. SEL_RANGE(1))  .OR.
	   2037      .          (RANGE .EQ. 2 .AND. SEL_RANGE(2)) ) THEN
	   2038 
	   2039 	      IF ( (DATA_FILTER_COINC.EQ.0)  .OR. 
	   2040      .          (DATA_FILTER_COINC.EQ.1 .AND. DPU_MASS.EQ.0.)  .OR.
	   2041      .          (DATA_FILTER_COINC.EQ.2 .AND. DPU_MASS.GT.0.) ) THEN
	   2042 
	   2043               IF ( (DIRECTION_FILTER .EQ. 0)             .OR.
	   2044      .             (DIRECTION_FILTER_TEL1 .EQ. TELE_ID)  .OR.
	   2045      .             (DIRECTION_FILTER_TEL2 .EQ. TELE_ID)  .OR.
	   2046      .             (DIRECTION_FILTER_TEL3 .EQ. TELE_ID) ) THEN
	   2047 
	   2048 	      IF ( 
	   2049      .             ( DATA_FILTER_RANGECHECK.EQ.0 .OR.
	   2050      .		    (DATA_FILTER_RANGECHECK.EQ.1 .AND.
	   2051      .                       RANGE.EQ.DPU_RANGE) )           !range OK
	   2052      .               .AND.
	   2053      .              (TELE_FLAG.EQ.0 )  			     !telescope OK

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  26
1.5                                                              5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   2054      .                ) THEN	         
	   2055 	              IF(SECTOR .GE. DIRECTION_SECTOR_MIN .AND. 
	   2056      .			 SECTOR .LE. DIRECTION_SECTOR_MAX)THEN	         
	   2057 
	   2058 
	   2059                WRITE(50,250) L1_SR_HEADER.SR_COUNT,RATEFLAG,
	   2060      &			    TIME_TO_USE.YEAR,TIME_TO_USE.DOY,
	   2061      &                      TIME_TO_USE.HR,TIME_TO_USE.MIN,TIME_TO_USE.SEC,
	   2062      &                      DVSTEP,
	   2063      &                      DPU_E_OVER_Q,
	   2064      &                      STOP_ID,
	   2065      &                      START_ID_RANGE,
	   2066      &                      ENERGY,
	   2067      &                      SECTOR,
	   2068      &                      SSD_ID,
	   2069      &                      TIME_OF_FLIGHT,
	   2070      &                      PSTART,
	   2071      &                      RANGE,
	   2072      &                      DPU_MASS_OVER_Q,
	   2073      &                      DPU_MASS,
	   2074      &                      DPU_NM,
	   2075      &                      DPU_NQ,
	   2076      &                      DPU_RANGE
	   2077  250           FORMAT(1X,I8,2X,A1,  !sr counter, bit rate
	   2078      .                2X,I4,2X,I3.3,2X,I2,':',I2.2,':',I2.2,  	! time
	   2079      &             2X,I2,2X,F7.2,5X,I2,11X,I2,11X,I3,8X,I2,6X,		!dvstep,e/q,stop,start,E,sec,
	   2080      &             I2,6X,I4,7X,I1,7X,I1,				!ssd,tof,pstart,range
	   2081      &             5X,F6.2,3X,F5.1,3X,I2,2X,I3,3X,I2)				!m/q,m
	   2082 
	   2083 
	   2084               ENDIF     !check sector
	   2085               ENDIF     !check range and/or telescope conditions
	   2086               ENDIF     !data filtering by direction 
	   2087               ENDIF	!data_filtering by coincidence conditions
	   2088               ENDIF     !data filtering by range
	   2089 
	   2090  300        CONTINUE
	   2091             ENDIF ! bit rate check (even J's if LBR).
	   2092           ENDIF   ! data within user selected voltage step range
	   2093 
	   2094         ENDIF     ! data within user selected time
	   2095 
	   2096  800  CONTINUE
	   2097 C
	   2098 C Read next Science Record
	   2099 C
	   2100       CALL WIND_L1_READ_SR( L1_LUN, CNTR, L1_SR_HEADER, STATUS )
	   2101       IF(STATUS.EQ.RMS$_EOF)GO TO 900
	   2102       IF (STATUS .NE. 1) GOTO 9020
	   2103 C
	   2104       GO TO 100
	   2105 C
	   2106 C Close files and STOP
	   2107 C
	   2108  900  IF (START.YEAR .GE. 0) GO TO 1000
	   2109  901  CALL WIND_L1_CLOSE( L1_LUN, STATUS )      ! Close input file
	   2110       IF (STATUS .NE. 1) GOTO 9090

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  27
1.5                                                              5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   2111 C
	   2112 C Prompt user for new time period
	   2113 C
	   2114       WRITE(6,*)' Do you want add another time period? (y/n)'
	   2115       READ(5,'(A1)') TIME_ANSWER
	   2116       IF((TIME_ANSWER .EQ. 'Y') .OR. (TIME_ANSWER .EQ. 'y')) THEN
	   2117         STARTFOUND = .FALSE.
	   2118 	ENDFOUND   = .FALSE.
	   2119         L1FILENAME = 'DATA_DIR:WI*L1*.DAT'		!Get input L1 filename
	   2120         CALL WIND_GET_FILENAME(L1FILENAME, STATUS)
	   2121         IF(STATUS.NE.1) THEN
	   2122           WRITE (*,2) STATUS
	   2123           STOP
	   2124         ENDIF
	   2125  							!Prompt user for start and stop times
	   2126         TYPE 10
	   2127         ACCEPT*, START.YEAR,ST_MONTH,ST_DAYOFMONTH,START.HR,START.MIN,START.SEC
	   2128         IF(START.YEAR.GE.0)THEN
	   2129           CALL CNVRT_T_YRMONDAY_TO_YEARDAY( START, ST_MONTH, ST_DAYOFMONTH)
	   2130           IF(START.YEAR.LT.100)START.YEAR=START.YEAR+1900        ! Allow for 2-digit years
	   2131           IF(START.YEAR.LT.1980)START.YEAR=START.YEAR+100        ! Allow for years beyond 1999
	   2132           TYPE 12
	   2133           ACCEPT*, END.YEAR,END_MONTH,END_DAYOFMONTH,END.HR,END.MIN,END.SEC
	   2134           CALL CNVRT_T_YRMONDAY_TO_YEARDAY( END, END_MONTH, END_DAYOFMONTH)
	   2135           IF(END.YEAR.LT.100)END.YEAR=END.YEAR+1900        ! Allow for 2-digit years
	   2136           IF(END.YEAR.LT.1980)END.YEAR=END.YEAR+100        ! Allow for years beyond 1999
	   2137         ELSE
	   2138           END.YEAR=3000
	   2139         ENDIF
	   2140 	                 				!Open L1 file
	   2141 
	   2142         CALL WIND_L1_OPEN( L1_LUN, L1FILENAME, L1_FILE_HEADER, STATUS)
	   2143       	IF (STATUS .NE. 1) GOTO 9010
	   2144         INQUIRE(FILE=L1FILENAME,NAME=FULL_L1_NAME)
	   2145       	WRITE(6,1001) FULL_L1_NAME
	   2146     	IFILE = IFILE + 1
	   2147 
	   2148         GOTO 13
	   2149 
	   2150       ENDIF	!time_answer .eq. 'y'.....
	   2151 
	   2152       CLOSE(UNIT=50)                            ! Close PHA file
	   2153 c
	   2154 c Get S/C position at end of time period
	   2155 c
	   2156       X2_GSE = L1_SR_HEADER.GSE_POS.X/6380.0 
	   2157       Y2_GSE = L1_SR_HEADER.GSE_POS.Y/6380.0 
	   2158       Z2_GSE = L1_SR_HEADER.GSE_POS.Z/6380.0 
	   2159 C
	   2160 C Calculate standard deviation of speed
	   2161 C
	   2162       IF(SPEED_HITS .LE. 0) SPEED_HITS = 2.0
	   2163       SPEED_MEAN  = SUM_SW_SPEED/SPEED_HITS
	   2164       SPEED_SIGMA = SQRT((SUM_SQ_SPEED - SPEED_HITS*SPEED_MEAN**2)/(SPEED_HITS-1.0))
	   2165       WRITE(6,940)SPEED_MEAN, SPEED_SIGMA, LOW_SPEED, HIGH_SPEED
	   2166  940  FORMAT(/,1X,' Average Solar Wind Speed with sigma (km/s) = ',F6.1,' +/- ',F6.1,
	   2167      .       /,1X,' Range of valid speeds encountered (km/s) = ',F6.1,' to ', F6.1)  

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  28
1.5                                                              5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   2168 C
	   2169 C Write beginning and end positions to output files
	   2170 C
	   2171       WRITE(6,945)X1_GSE,Y1_GSE,Z1_GSE,X2_GSE,Y2_GSE,Z2_GSE  
	   2172  945  FORMAT(1X,' Start postion in GSE cartesian coordinates(Re): ',3F9.3,/
	   2173      .       1X,' Stop  postion in GSE cartesian coordinates(Re): ',3F9.3//)
	   2174 
	   2175 
	   2176       TYPE *,' FILE WRITTEN TO CURRENT DIRECTORY '
	   2177       STOP
	   2178 C
	   2179 C Come here for errors
	   2180 C
	   2181 9010  TYPE *,'ERROR OPENING L1 FILE; STATUS=',STATUS
	   2182       STOP
	   2183 9020  TYPE *,'ERROR READING SCIENCE RECORD ',CNTR,'; STATUS=',STATUS
	   2184       STOP
	   2185 9030  TYPE *,'ERROR GETTING BASIC CORE; STATUS=',STATUS
	   2186       STOP
	   2187 9050  TYPE *,'ERROR GETTING HDB; STATUS=',STATUS
	   2188       STOP
	   2189 9080  TYPE *,'ERROR GETTING STICS DATA; STATUS=',STATUS
	   2190       STOP
	   2191 9085  TYPE *,'ERROR GETTING MASS DATA; STATUS=',STATUS
	   2192       STOP
	   2193 9090  TYPE *,'ERROR CLOSING L1 FILE; STATUS=',STATUS
	   2194       STOP
	   2195       END

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  29
1.5                             Symbol Table                     5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                 464 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               104264 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  3 $IODATA$                              3264 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               13812   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                1536 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               123984


ENTRY POINTS

    Address   Type  Name         
                                 
  4-00000000        STX_MMQ_TABLE


VARIABLES

    Address   Type  Name                       Address   Type  Name                       Address   Type  Name                  
                                                                                                                                
  2-000000CC  R*4   AVE_SPEED                2-000000C0  I*4   DPU_NM                 REG-########  I*4   N                     
  1-0000002C  I*4   BAD_SPEED                2-000000C4  I*4   DPU_NQ                   0-00000058  I*4   NAMELEN               
REG-00000004  L*1   BITRATE                  2-000000C8  I*4   DPU_RANGE              REG-00000018  I*4   NINDEX                
  2-000000EC# L*4   BRACK                    0-0000009C  I*4   DVSTEP                 REG-########  I*4   NN                    
  2-000000D0  R*4   BULK_SPEED             REG-00000000  L*4   ENDFOUND                 0-00000058  I*4   OPENMODE              
  2-000000D4  R*4   BULK_UNCER               2-00000078  I*4   END_DAYOFMONTH           2-000002B0  CHAR  OUTFILENAME           
  2-00000088  I*4   CNTR                     2-00000074  I*4   END_MONTH                2-000000A4  I*4   PSTART                
  2-0000007C  L*4   CODE_C                   2-00000094  I*4   ENERGY                   2-000000A8  I*4   RANGE                 
  2-00000080  L*4   CODE_C2                  2-00000200  CHAR  ERR_MESSAGE              2-00000020  CHAR  RATEFLAG              
  0-00000060  I*4   DATA_DVSTEP_MAX          2-000000E8  I*4   ERR_SPD_FLAG             2-00000028  CHAR  RONOFF                
  0-0000005C  I*4   DATA_DVSTEP_MIN          2-00000010  CHAR  FIFO                     2-00000140  CHAR  RUN_DATE              
REG-00000009  I*4   DATA_FILTER            REG-00000029  R*4   FIRSTFILE                2-00000048  CHAR  RUN_TIME              
  0-00000054  I*4   DATA_FILTER_COINC        1-00000030  I*4   FIRSTSPEED               2-00000098  I*4   SECTOR                
  0-00000058  I*4   DATA_FILTER_DVSTEP       2-000001B0  CHAR  FULL_L1_NAME             2-000000D8# R*4   SPEED_HITS            
  0-00000048  I*4   DATA_FILTER_MSPEED     REG-########  L*4   GOODSPIN                 0-00000038# R*4   SPEED_MEAN            
  0-00000050  I*4   DATA_FILTER_RANGE        0-00000040# R*4   HIGH_SPEED               0-00000064  R*4   SPEED_SIGMA           
  0-0000004C  I*4   DATA_FILTER_RANGECHECK REG-########  I*4   I                        2-0000009C  I*4   SSD_ID                
  0-00000044  I*4   DATA_MSPEED_MAX          2-000000F0  I*4   IFILE                    0-0000007C  L*4   STARTFOUND            
  0-00000064  I*4   DATA_MSPEED_MIN        REG-00000000  I*4   INCREMENT                2-0000008C  I*4   START_ID_RANGE        
  0-00000080  I*4   DIRECTION_FILTER       REG-########  I*4   ITEMP                    1-00000034  I*4   START_POS             
  0-00000068  I*4   DIRECTION_FILTER_TEL1  REG-00000001  I*4   ITEMP2                   2-00000068  I*4   STATUS                
  0-0000006C  I*4   DIRECTION_FILTER_TEL2  REG-00000003  I*4   J                        2-00000090  I*4   STOP_ID               
  0-00000070  I*4   DIRECTION_FILTER_TEL3  REG-0000000C  I*4   JSAVE                    2-00000070  I*4   ST_DAYOFMONTH         
  0-00000078  I*4   DIRECTION_SECTOR_MAX   REG-########  I*4   K                        2-0000006C  I*4   ST_MONTH              
  0-00000074  I*4   DIRECTION_SECTOR_MIN     2-00000084  I*4   L                        2-000000E0# R*4   SUM_SQ_SPEED          
  0-000000A0  I*4   DPPSMINUS                2-00000160  CHAR  L1FILENAME               2-000000DC# R*4   SUM_SW_SPEED          
  0-00000098  I*4   DPPSPLUS                 1-00000028  I*4   L1_LUN                   2-000000E4# R*4   SW_SPEED              
  2-000000B4  R*4   DPU_E_OVER_Q             2-00000250  CHAR  LISFIL                   2-000000AC  I*4   TELE_FLAG             
  2-000000B8  R*4   DPU_MASS                 0-0000003C# R*4   LOW_SPEED                2-000000B0  I*4   TELE_ID               
  2-000000BC  R*4   DPU_MASS_OVER_Q          2-00000100  CHAR  MODE_AT_START            2-00000018  CHAR  TGS                   

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  30
1.5                             Symbol Table                     5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

    Address   Type  Name                       Address   Type  Name                       Address   Type  Name                  
                                                                                                                                
  2-00000038  CHAR  TIME_ANSWER                  **      L*4   USE_SC_CLOCK             2-00000040  CHAR  YORN                  
  2-000000A0  I*4   TIME_OF_FLIGHT           2-000000F4# R*4   X1_GSE                   2-000000FC  R*4   Z1_GSE                
  2-00000030  CHAR  TONOFF                   0-00000058  R*4   X2_GSE                   0-00000060  R*4   Z2_GSE                
REG-00000003  I*4   TRIGGER_MODE_CODE        2-000000F8  R*4   Y1_GSE                                                           
  2-00000118  CHAR  USERNAME                 0-0000005C  R*4   Y2_GSE                                                           


RECORDS

    Address   Name            Structure                Bytes     Address   Name            Structure                Bytes
                                                                                                                         
  2-00000058  END             T                            8   2-00000310  SCI             CORE                      7384
  2-00001FE8  HDB             HDBSTR                     324   2-00000050  START           T                            8
  6-00000000  L1_FILE_HEADER  ST_L1_FILE_HEADER          400   2-00004C50  STICS_PHA       ST_PHA                   36720
  6-00000190  L1_SR_HEADER    ST_L1_SR_HEADER            244   2-00002130  STICS_RATE      ST_RATE                  11040
  2-0000E340  MASS_PHA        MA_PHA                   45960   2-00000060  TIME_TO_USE     T                            8
  2-0000DBC0  MASS_RATE       MA_RATE                   1920                                                             


ARRAYS

     Address  Type  Name                Bytes  Dimensions

  1-00000038  CHAR  COINC                  30  (0:2)
  2-000196C8  I*4   DVS_COUNTS            128  (0:31)
  1-00000080  CHAR  MODE                  170  (10)
  1-00000058  CHAR  RANGESEL               35  (0:6)
  2-00000150  L*4   SEL_RANGE              12  (0:2)
  1-00000130  CHAR  TRIGGER_MODE          160  (0:7)



LABELS

    Address   Label     Address   Label     Address   Label     Address   Label     Address   Label
                                                                                                   
      **       2          **       12         **       19     4-000022C0   901        **       9020
  4-00000A1C   3      4-00000CE8   13     4-00001758   100        **       940        **       9030
      **       6          **       14         **       250        **       945        **       9050
      **       7          **       15     4-00002234   300    4-00000B50   1000       **       9080
      **       8          **       16     4-00002244   800        **       1001       **       9085
      **       10         **       18         **       900        **       9010       **       9090


FUNCTIONS AND SUBROUTINES REFERENCED

  Type  Name                                Type  Name                                Type  Name                             
                                                                                                                             
        CNVRT_T_YRMONDAY_TO_YEARDAY               TELESCOPE_ID                              WIND_L1_GET_STICS                
  L*4   COMPARE_TIME_GE                           USER_REQUESTS_DATA_TYPE                   WIND_L1_OPEN                     
        DIRECTION_REQUESTS                        WIND_GET_FILENAME                         WIND_L1_OPEN_NEXT                
        DISSECT_STICS_PHA                         WIND_L1_CLOSE                             WIND_L1_READ_SR                  
        DPU_EQ                                    WIND_L1_GET_BASIC                                                          
        MMPQ_DPU_WSTICS                           WIND_L1_GET_HDB                                                            
        SMS_MASS_SPEED                            WIND_L1_GET_MASS                                                           

STX_MMQ_TABLE                                                    5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  31
1.5                             Symbol Table                     5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   2196 
	   2197 C***************************************************************************
	   2198       SUBROUTINE USER_REQUESTS_DATA_TYPE(
	   2199      .           FILTER_COINC,
	   2200      .           FILTER_DVSTEP,
	   2201      .		 DVSTEP_MIN,
	   2202      .		 DVSTEP_MAX,
	   2203      .           FILTER_RANGE,
	   2204      .           SRANGE,
	   2205      .           RANGECHECK,
	   2206      .           FILTER_SPEED,
	   2207      .           SPEED_MIN,
	   2208      .           SPEED_MAX)
	   2209 
	   2210 C     user inputs for data filtering by data type
	   2211 C     13.Jan.95  ABG
	   2212 
	   2213 
	   2214       IMPLICIT NONE
	   2215 
	   2216 C     data filtering options
	   2217       INTEGER*4  FILTER_COINC,	!data filtering by coincidence 
	   2218 C					 conditions
	   2219      .           FILTER_DVSTEP,	!data filter by voltage step
	   2220      .           DVSTEP_MIN,	!dv step min-max values for data filter
	   2221      .           DVSTEP_MAX,
	   2222      .           FILTER_RANGE,   !range selection
	   2223      .           RANGECHECK,
	   2224      .           FILTER_SPEED,       !MASS derived solar wind speed selection
	   2225      .           SPEED_MIN, 
	   2226      .           SPEED_MAX
	   2227 
	   2228       LOGICAL SRANGE(0:2)	!accept / reject this range
	   2229       CHARACTER*5 RSELECTION(0:6) /		!range selection
	   2230      .                           '2 1 0' ,
	   2231      .                           '    0' ,
	   2232      .                           '  1  ' ,
	   2233      .                           '2    ' ,
	   2234      .                           '2   0' ,
	   2235      .                           '2 1  ' ,
	   2236      .                           '  1 0' /
	   2237 
	   2238       INTEGER*4  I,J,K
	   2239       CHARACTER*1 YORN			!yes or no answer
	   2240 
	   2241 
	   2242 
	   2243       TYPE 7
	   2244     7 FORMAT(' Enter desired data filtering ',
	   2245      .       'by coincidence conditions: ',/,
	   2246      .       '   0 = no filtering (no M or M/Q restrictions) ',/,
	   2247      .       '   1 = M/Q-only     (i.e., M/Q > 0, Mass = 0) ',/,
	   2248      .       '   2 = M & M/Q      (i.e., M/Q > 0, Mass > 0) ',/,
	   2249      .       '       ',$)
	   2250       ACCEPT *, FILTER_COINC
	   2251 
	   2252       TYPE 8

USER_REQUESTS_DATA_TYPE                                          5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  32
1.5                             Symbol Table                     5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   2253     8 FORMAT(' Enter desired data filtering by voltage step range: ',/,
	   2254      .       '   -1 = no voltage step filtering (all e/q values) ',/,
	   2255      .       '    0 = voltage step filtering desired',/,
	   2256      .       '        ',$)
	   2257       ACCEPT *, FILTER_DVSTEP
	   2258       IF (FILTER_DVSTEP .GT. -1) THEN
	   2259          TYPE 9
	   2260     9    FORMAT(' Enter minimum and maximum voltage steps (inclusive)',/
	   2261      .          '     ',$)	  
	   2262 	 ACCEPT *, DVSTEP_MIN, DVSTEP_MAX
	   2263       ENDIF
	   2264 
	   2265       TYPE 10 , (RSELECTION(I),I=0,6)
	   2266    10 FORMAT(' Enter range selection: ',/,
	   2267      .       '    0 = ',A5,'  (i.e., all ranges) ',/,
	   2268      .       '    1 = ',A5,/,
	   2269      .       '    2 = ',A5,/,
	   2270      .       '    3 = ',A5,/,
	   2271      .       '    4 = ',A5,/,
	   2272      .       '    5 = ',A5,/,
	   2273      .       '    6 = ',A5 )
	   2274        ACCEPT *, FILTER_RANGE
	   2275        TYPE 11, RSELECTION(FILTER_RANGE)
	   2276    11  FORMAT (/' User selected the following ranges : 'A5/)
	   2277       SRANGE(0) = .FALSE.	!reject range 0 events
	   2278       SRANGE(1) = .FALSE.	!reject range 1 events
	   2279       SRANGE(2) = .FALSE.	!reject range 2 events
	   2280 
	   2281        IF (  (FILTER_RANGE.EQ.0) .OR. (FILTER_RANGE.EQ.1) .OR.
	   2282      .       (FILTER_RANGE.EQ.4) .OR. (FILTER_RANGE.EQ.6) )
	   2283      .		SRANGE(0) = .TRUE.
	   2284        IF (  (FILTER_RANGE.EQ.0) .OR. (FILTER_RANGE.EQ.2) .OR.
	   2285      .       (FILTER_RANGE.EQ.5) .OR. (FILTER_RANGE.EQ.6) )
	   2286      .		SRANGE(1) = .TRUE.
	   2287        IF (  (FILTER_RANGE.EQ.0) .OR. (FILTER_RANGE.EQ.3) .OR.
	   2288      .       (FILTER_RANGE.EQ.4) .OR. (FILTER_RANGE.EQ.5) )
	   2289      .		SRANGE(2) = .TRUE.
	   2290 
	   2291        TYPE 12
	   2292    12  FORMAT(' Do you want to limit the output to range checks? '
	   2293      .        '[y/n] ',$)
	   2294        ACCEPT 13, YORN
	   2295    13  FORMAT (A)
	   2296        IF (YORN.EQ.'Y' .OR. YORN.EQ.'y') RANGECHECK=1
	   2297 
	   2298        TYPE 15
	   2299    15  FORMAT(' Enter desired data filtering by solar wind speed range: ',/,
	   2300      .       '    -1 = no filtering by MASS speed ',/,
	   2301      .       '    0  = MASS speed filtering desired',/,
	   2302      .       '        ',$)
	   2303       ACCEPT *, FILTER_SPEED
	   2304       IF (FILTER_SPEED .GT. -1) THEN
	   2305          TYPE 16
	   2306    16    FORMAT(' Enter minimum and maximum solar wind speed (inclusive)',/
	   2307      .          '     ',$)	  
	   2308 	 ACCEPT *, SPEED_MIN, SPEED_MAX
	   2309       ENDIF

USER_REQUESTS_DATA_TYPE                                          5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  33
1.5                             Symbol Table                     5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   2310 
	   2311 
	   2312        RETURN
	   2313        END


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                 464 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               104264 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  3 $IODATA$                              3264 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               13812   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                1536 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               123984


ENTRY POINTS

    Address   Type  Name                   
                                           
  4-00003100        USER_REQUESTS_DATA_TYPE


VARIABLES

    Address   Type  Name              Address   Type  Name              Address   Type  Name         
                                                                                                     
      **      I*4   DVSTEP_MAX          **      I*4   FILTER_SPEED        **      I*4   SPEED_MAX    
      **      I*4   DVSTEP_MIN    REG-00000005  I*4   I                   **      I*4   SPEED_MIN    
      **      I*4   FILTER_COINC    2-00000008  I*4   J               2-00000000  CHAR  YORN         
      **      I*4   FILTER_DVSTEP   2-0000000C  I*4   K                                              
      **      I*4   FILTER_RANGE        **      I*4   RANGECHECK                                     


ARRAYS

     Address  Type  Name              Bytes  Dimensions

  1-00000000  CHAR  RSELECTION           35  (0:6)
      **      L*4   SRANGE               12  (0:2)



LABELS

    Address   Label     Address   Label     Address   Label     Address   Label     Address   Label
                                                                                                   
      **       7          **       9          **       11         **       13         **       16  
      **       8          **       10         **       12         **       15                      

USER_REQUESTS_DATA_TYPE                                          5-APR-1997 01:51:08    DEC Fortran V6.2-508                Page  34
1.5                             Symbol Table                     5-APR-1997 01:50:59    [WIND.SOFTWARE.STICS]STX_MMQ_TABLE.FOR;18

	   2314 
	   2315 
	   2316 


  +---------------------------------------------------+
  |               KEY TO ADDRESS CODE FORMATS         |
  |   ppp-oooooooo  - In Psect ppp, Offset oooooooo   |
  |   ***-********  - External                        |
  |               # - Suffix: Also In Registers       |
  |   REG-rrrrrrrr  - In Register rrrrrrrr            |
  |   REG-########  - In Various Registers            |
  |        **       - Not Used; Not Allocated         |
  +---------------------------------------------------+


COMMAND QUALIFIERS

  /ALIGNMENT=(COMMONS=(PACKED,NOMULTILANGUAGE),RECORDS=PACKED)
  /ASSUME=(ACCURACY_SENSITIVE,BACKSLASH,NODUMMY_ALIASES,NOUNDERSCORE)
  /CHECK=(ASSERTIONS,BOUNDS,FORMAT,FP_EXCEPTIONS,OVERFLOW,NOUNDERFLOW)
  /DEBUG=(NOSYMBOLS,TRACEBACK)
  /DESIGN=(NOCOMMENTS)
  /SHOW=(DICTIONARY,INCLUDE,MAP,PREPROCESSOR)
  /STANDARD=(NOSEMANTIC,NOSOURCE_FORM,NOSYNTAX)
  /WARNINGS=(NOALIGNMENT,NOARGUMENT_CHECKING,NODECLARATIONS,GENERAL,NOTRUNCATED_SOURCE,UNCALLED,
             UNINITIALIZED,UNREACHABLE,UNUSED)
  /NOAUTOMATIC  /BLAS=NOMAPPED  /CONVERT=NATIVE  /NOCROSS_REFERENCE  /NOD_LINES  /ERROR_LIMIT=30  /EXTEND_SOURCE
  /NOPAD_SOURCE  /NOF77  /FLOAT=G_FLOAT  /IEEE_MODE=FAST  /ROUNDING_MODE=NEAREST
  /GRANULARITY=QUADWORD  /INSTRUCTION_SET=FLOATING  /INTEGER_SIZE=32  /NOMACHINE_CODE
  /MATH_LIBRARY=ACCURATE  /NAMES=UPPERCASE  /OPTIMIZE=(LEVEL=4,UNROLL=0)  /REAL_SIZE=32  /NORECURSIVE
  /NOSEPARATE_COMPILATION  /NOSYNCHRONOUS_EXCEPTIONS  /NOSYNTAX_ONLY  /TERMINAL=NOSTATISTICS  /NOTIE  /VMS
  /NOANALYSIS_DATA
  /NODIAGNOSTICS
  /INCLUDE=(.FOR,.f,FORT$INCLUDE:.FOR,FORT$INCLUDE:.f)
  /LIST=SMS1:[WIND.SOFTWARE.STICS]STX_MMQ_TABLE.LIS;5
  /OBJECT=SMS1:[WIND.SOFTWARE.STICS]STX_MMQ_TABLE.OBJ;5
  /NOLIBRARY
   sys$lib=SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1

COMPILER: DEC Fortran V6.2-508-274F

COMPILATION STATISTICS

  CPU time:          4.95 seconds
  Elapsed time:      7.10 seconds
  Pagefaults:         490
  I/O Count:           71
