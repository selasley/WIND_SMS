OMR_EFF                                                         21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page   1
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	      1 CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
	      2       PROGRAM STICS_PHA_TREND
	      3 C
	      4 C This program reads a WIND L1 data file and dissects the PHA data, calculates 
	      5 C the m & m/q for each event, then bins them to the corresponding ion, with 
	      6 C user requested data selection criteria imposed.
	      7 C Data has basic rate, deadtime, and efficiency corrections applied.
	      8 C
	      9 C STICS_PHA_TREND created by K.CHOTOO using STICS_DVS_SECT as a template
	     10 C
	     11 C Revision History:
	     12 C	14-FEB-1997	K.CHOTOO	Corrected logic in speed selection
	     13 CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
	     14 
	     15       IMPLICIT NONE
	     16 
	     17       INCLUDE	'INC_DIR:EDBDEF.INC/NOLIST'

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page   2
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	    555       INCLUDE   'INC_DIR:L1FMT.INC/NOLIST'
	    687       INCLUDE   '($RMSDEF)'
    1	    688 !*** MODULE $RMSDEF ***
    1	    689 CDEC$ OPTIONS/ALIGN=(RECORDS=PACKED,COMMONS=PACKED)
    1	    690  ! 
    1	    691  !  This SDL File Generated by VAX-11 Message V04-00 on 26-JAN-1994 13:51:15.86
    1	    692  ! 
    1	    693  ! 	.TITLE	RMSMSG -RMS COMPLETION CODES
    1	    694  !  *************************************************************************
    1	    695  !  *                                                                       *
    1	    696  !  * COPYRIGHT (C) DIGITAL EQUIPMENT CORPORATION, 1976, 1977, 1978, 1979,  *
    1	    697  !  * 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,     *
    1	    698  !  * 1991,1992                                                             *
    1	    699  !  * ALL RIGHTS RESERVED.                                                  *
    1	    700  !  * UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT LAWS  OF  THE  UNITED *
    1	    701  !  * STATES.                                                               *
    1	    702  !  *                                                                       *
    1	    703  !  * THE SOFTWARE CONTAINED ON THIS MEDIA IS PROPRIETARY TO  AND  EMBODIES *
    1	    704  !  * THE   CONFIDENTIAL   TECHNOLOGY  OF  DIGITAL  EQUIPMENT  CORPORATION. *
    1	    705  !  * POSSESSION, USE, DUPLICATION OR DISSEMINATION  OF  THE  SOFTWARE  AND *
    1	    706  !  * MEDIA  IS  AUTHORIZED  ONLY  PURSUANT TO A VALID WRITTEN LICENSE FROM *
    1	    707  !  * DIGITAL EQUIPMENT CORPORATION.                                        *
    1	    708  !  *                                                                       *
    1	    709  !  * RESTRICTED RIGHTS LEGEND USE, DUPLICATION, OR DISCLOSURE BY THE  U.S. *
    1	    710  !  * GOVERNMENT  IS  SUBJECT  TO RESTRICTIONS AS SET FORTH IN SUBPARAGRAPH *
    1	    711  !  * (C)(1)(II) OF DFARS 252.227-7013, OR IN FAR 52.227-19, AS APPLICABLE. *
    1	    712  !  *                                                                       *
    1	    713  !  *************************************************************************
    1	    714  ! ++
    1	    715  !  FACILITY: RMS
    1	    716  ! 
    1	    717  !  ABSTRACT:
    1	    718  ! 
    1	    719  ! 	THIS MODULE DEFINES ALL RMS COMPLETION CODES.
    1	    720  ! 
    1	    721  !  ENVIRONMENT:
    1	    722  ! 
    1	    723  ! 	THE MESSAGE TRANSLATOR MUST BE USED TO CONVERT RMSMSG.MSG INTO
    1	    724  ! 	RMSMSG.SDL.  THE SDL TRANSLATOR MUST THEN BE USED TO CONVERT
    1	    725  ! 	RMSMSG.SDL INTO RMSMSG.MAR (AND RMSMSG.B32).
    1	    726  ! 
    1	    727  !  AUTHOR: LEO F. LAVERDURE,	CREATION DATE:  10-DEC-1976
    1	    728  ! 
    1	    729  !  MODIFIED BY:
    1	    730  ! 
    1	    731  !                DEE RYAN                                30-SEP-1993
    1	    732  !                CORRECTED USE OF DIGITAL PRODUCT NAMES.
    1	    733  ! 
    1	    734  ! 	X-5	EMW		ELINOR M. WOODS		28-SEP-1993
    1	    735  ! 		MERGE IN OPENVMS VAX CORAL FIX:
    1	    736  ! 
    1	    737  ! 		X-10	EMW0019  ELINOR M. WOODS  	21-SEP-1993
    1	    738  ! 		ADD ONE NEW USER-REPORTABLE ERROR STATUS (WITH AN
    1	    739  ! 		ASSOCIATED STV): NETBTS.  RELOCATE NEW IDXSEARCH STATUS
    1	    740  ! 		(SEE X-9) FROM "ERROR with STV" SECTION TO "ERROR WITHOUT 
    1	    741  ! 		STV" section.  Expand "WITH STV' AND "without STV"
    1	    742  ! 		COMMENTS TO CLARIFY DIFFERENCE BETWEEN TWO.

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page   3
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    743  ! 
    1	    744  ! 	X-4	EMW0016		ELINOR M. WOODS		10-AUG-1993
    1	    745  ! 		MERGE IN CORAL FIX:
    1	    746  ! 
    1	    747  ! 		MODIFY SEVERITY OF TWO DTF ERROR CODES (DTFACC AND
    1	    748  ! 		DTFCRE) FROM FATAL TO ERROR, AS REQUESTED BY SNA/DTF
    1	    749  ! 		FACILITY.		
    1	    750  ! 
    1	    751  ! 		ALSO MOVE NEW IDXSEARCH STATUS FROM ERROR WITH NO 
    1	    752  ! 		STV GROUPING TO ERROR WITH STV GROUPING.
    1	    753  ! 
    1	    754  ! 	X-3	EMW0010		ELINOR M. WOODS		02-JUL-1993
    1	    755  ! 		TO SUPPORT NEW KEY-LESS-THAN FUNCTIONALITY, ADDITION 
    1	    756  ! 		OF ONE USER-REPORTABLE ERROR STATUS:  IDXSEARCH, AND
    1	    757  ! 		TWO NEW RMS-INTERNAL ERROR STATUSES:  LSCAN AND 
    1	    758  ! 		ROOTSRCH.		
    1	    759  ! 
    1	    760  ! 	X-2	CW0019		CHRIS WHITAKER		11-NOV-1992
    1	    761  ! 		MERGE IN OPENVMS VAX V6.0 CHANGES
    1	    762  ! 
    1	    763  ! 		X-8	JM0012	JOHN MUNZER		11-NOV-1992
    1	    764  ! 		CHANGE TEXT FOR RMS$_LNE.
    1	    765  ! 
    1	    766  ! 		X-7	JM0006	JOHN MUNZER		17-APR-1992
    1	    767  ! 		ADD !XL PARAMETER TO RMS$_BUG TO REPORT R2.
    1	    768  ! 
    1	    769  ! 	X-1	RAB		RICHARD A. BISHOP	24-JUN-1991
    1	    770  ! 		MOVED TO [STARLET] FACILITY
    1	    771  ! 
    1	    772  ! 	==================================
    1	    773  ! 	OLD AUDIT TRAIL FOLLOWS:
    1	    774  ! 
    1	    775  ! 	X-33	LSS0154		LEONARD S. SZUBOWICZ	 4-APR-1990
    1	    776  ! 		ALTER TEXT AND FAO PARAMETERS OF RMS$_RUH AND RMS$_BUG
    1	    777  ! 		CONDITION VALUES FOR RMS/DDTM SUPPORT.
    1	    778  ! 
    1	    779  ! 	X-32	PJH		PAUL J. HOULIHAN	17-JAN-1990
    1	    780  ! 		CHANGE TEXT FOR RMS$_INCOMPSHR ERROR MESSAGE.
    1	    781  ! 
    1	    782  ! 	X-31	LSS0130		LEONARD S. SZUBOWICZ	12-OCT-1989
    1	    783  ! 		MERGE OF RMS/DDTM GENERATION X-30D2.
    1	    784  ! 		ADD GENERAL DDTM_ERR ERROR MESSAGE FOR DDTM SERVICE FAILURES;
    1	    785  ! 		STV WILL CONTAIN THE FAILING SYSTEM SERVICE CONDITION VALUE.
    1	    786  ! 
    1	    787  ! 	X-30	LSS0080		LEONARD S. SZUBOWICZ	06-OCT-1988
    1	    788  ! 		ADD RMS$_OK_ACT MESSAGE FOR USE BY FUTURE WORK TO $DISPLAY.
    1	    789  ! 		THIS IS PART OF LATENT SUPPORT FOR RMS/DDTM.
    1	    790  ! 
    1	    791  ! 	X-29	GJA0080		GARY J. ALLISON		06-JUN-1988
    1	    792  ! 		CHANGE TEXT OF SEMANTICS MESSAGE.
    1	    793  ! 
    1	    794  ! 	X-28	GJA0072		GARY J. ALLISON		02-MAR-1988
    1	    795  ! 		ADD EXT_ERR, OPNOTSUP, EXTNOTFOU, AND SEMANTICS MESSAGES.
    1	    796  ! 
    1	    797  ! 	X-27	PMV0072		PETER M. VATNE		08-OCT-1987
    1	    798  ! 		CHANGE RMS$_NOJNLLIC TO RMS$_JNLNOTAUTH.
    1	    799  ! 

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page   4
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    800  !  	X-26	LSS0057		LEONARD S. SZUBOWICZ	15-SEP-1987
    1	    801  ! 		CHANGE TEXT FOR THE RMS$_OK_DUP STATUS SUCH THAT THE MESSAGE
    1	    802  ! 		IS APPLICABLE TO $GET AS WELL AS $PUT.
    1	    803  ! 
    1	    804  ! 	X-25	PMV0068		PETER M. VATNE		11-SEP-1987
    1	    805  ! 		ADD RMS$_NOJNLLIC, NO RMS JOURNALING LICENSE, FOR LMF.
    1	    806  ! 
    1	    807  ! 	X-24	RNM0026		RUSSELL N. MURRAY	15-AUG-1987
    1	    808  ! 		ADD RMS$_SYNCH MESSAGE FOR NOTIFICATION OF SYNCHRONOUS
    1	    809  ! 		COMPLETION.
    1	    810  ! 
    1	    811  ! 	X-23	JEJ0479		JAMES E JOHNSON		13-AUG-1987
    1	    812  ! 		ADD RMS$_IVATRACE MESSAGE.
    1	    813  ! 
    1	    814  ! 	X-22	PMV0061		PETER M. VATNE		03-AUG-1987
    1	    815  ! 		CHANGE RESERVED MESSAGE RMS$_BUG_XX5 TO RMS$_BUG_RU_COMMIT_FAIL
    1	    816  ! 		TO CORRESPOND TO POSITIVE RMS BUGCHECK FTL$_RU_COMMIT_FAIL.
    1	    817  ! 
    1	    818  !  	X-21	LSS0042		LEONARD S. SZUBOWICZ	13-MAY-1987
    1	    819  ! 		CHANGE RESERVED MESSAGE RMS$_BUG_XX4 TO RMS$_BUG_RU_ABORT_FAIL
    1	    820  ! 		TO CORRESPOND TO POSITIVE RMS BUGCHECK FTL$_RU_ABORT_FAIL
    1	    821  ! 	
    1	    822  ! 	X-20	SAD0034		STUART A. DAVIDSON	12-MAR-1987 
    1	    823  ! 		DROP QUOTES FROM SNADTF MESSAGE TEXT.
    1	    824  ! 
    1	    825  ! 	X-19	PJH		PAUL J. HOULIHAN	19-JAN-1987
    1	    826  ! 		MERGE IN 17J1.
    1	    827  ! 
    1	    828  ! 		X-17J1	PJH		PAUL J. HOULIHAN	15-JAN-1987
    1	    829  ! 			FIX SEVERAL SMALL JNL PROBLEMS.
    1	    830  ! 			ADD RMS$_BUG_FLUSH_JNL_FAILED CODE.
    1	    831  ! 
    1	    832  ! 	X-18	KPS0148		KENNETH P. SIEGEL	04-DEC-1986
    1	    833  ! 		ADDED SNPPF (STATISTICS MONITORING NOT SUPPORTED FOR
    1	    834  ! 		PROCESS PERMANENT FILES) ERROR MESSAGE.
    1	    835  ! 
    1	    836  ! 	X-17	PMV0025		PETER M. VATNE		24-NOV-1986
    1	    837  ! 		ADD NEW MESSAGE, RMS$_NOTSAMEJNL.  THIS STATUS IS
    1	    838  ! 		USED TO RESTRICT AI/BI WITH RU JOURNALING TO A
    1	    839  ! 		SINGLE LONG-TERM JOURNAL FILE.
    1	    840  ! 
    1	    841  ! 	X-16	DAS		DAVID A. SOLOMON	18-NOV-1986
    1	    842  ! 		ADD NEW MESSAGE, RMS$_DELJNS. REMOVE RMS$_XCR (BY REPLACING IT
    1	    843  ! 		WITH A PLACEHOLDER), AS JOURNALING BITS ARE NO LONGER
    1	    844  ! 		SPECIFIED IN THE $XABJNL. SLIGHT WORDING CHANGE ON DETACHED
    1	    845  ! 		RU RECOVERY ERROR MESSAGES.
    1	    846  ! 
    1	    847  ! 	X-15	DAS		DAVID A. SOLOMON	12-NOV-1986
    1	    848  ! 		FIX ERROR IN X-5/X-6: JOURNALING VARIANT NOT MERGED
    1	    849  ! 		CORRECTLY, RESULTING IN SEVERAL JOURNALING MESSAGES NUMBERS
    1	    850  ! 		BEING DIFFERENT IN THE MAININE THAN WHAT THEY WERE ON THE
    1	    851  ! 		JOURNALING VARIANT. ALSO, MOVE NEW SNADTF MESSAGES TO RE-USE
    1	    852  ! 		AVAILABLE UNUSED MESSAGE NUMBERS, INSTEAD OF GENERATING NEW
    1	    853  ! 		ONES. FINALLY, CHANGE RMS$_BUG_ABORT TO RMS$_BUG_RU_ACTIVE.
    1	    854  ! 
    1	    855  ! 	X-14	SAD0014		STUART A. DAVIDSON	 4-NOV-1986
    1	    856  ! 		SNADTF - FIX TYPO IN DTFACC, DTFCRE

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page   5
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    857  ! 
    1	    858  ! 	X-13	SAD0014		STUART A. DAVIDSON	 3-NOV-1986
    1	    859  ! 		SNADTF - FIX TYPO, ADD 2 ADDITIONAL MESSAGES.
    1	    860  ! 
    1	    861  ! 	X-12	JEJ0377		JAMES E JOHNSON		29-OCT-1986
    1	    862  ! 		ADD NOEXTEND ERROR CODE TO FLAG FAILED RELATIVE FILE
    1	    863  ! 		EXTENDS DUE TO PREVIOUS FAILURES.
    1	    864  ! 
    1	    865  ! 	X-11	KPS0131		KENNETH P. SIEGEL	25-OCT-1986
    1	    866  ! 		ADDED SNS ERROR CODE FOR STATISTICS NOT SUPPORT ON
    1	    867  ! 		NON-DISK DEVICES.
    1	    868  ! 
    1	    869  ! 	X-10	SAD009		STUART A. DAVIDSON	06-OCT-1986
    1	    870  ! 		ADD COMPLETION CODES FOR SNADTF (IBM DATA XFER)
    1	    871  ! 
    1	    872  ! 	X-9	GJA0003		GARY J. ALLISON		29-SEP-1986
    1	    873  ! 		ADD DETACHED RECOVERY ERROR MESSAGES
    1	    874  ! 
    1	    875  ! 	X-8	PMV0008		PETER M. VATNE		24-SEP-1986
    1	    876  ! 		MODIFY RMS$_ACC_AIJ, RMS$_ACC_BIJ, AND RMS$_ACC_ATJ
    1	    877  ! 		TO ALSO OUTPUT THE STV.
    1	    878  ! 
    1	    879  ! 	X-7	JWT0243		JIM TEAGUE		 2-SEP-1986
    1	    880  ! 		ADD NEW ERRORS FOR COLLATED KEYS.
    1	    881  ! 
    1	    882  ! 	X-6	GJA		GARY J. ALLISON		29-JUL-1986
    1	    883  ! 		REMOVE DUPS FROM JNL MERGE.
    1	    884  ! 
    1	    885  ! 	X-5	GJA		GARY J. ALLISON		29-JUL-1986
    1	    886  ! 		MERGE JOURNALING INTO MAINLINE
    1	    887  ! 
    1	    888  ! 		X-3J6	DAS		DAVID A. SOLOMON	14-APR-1986
    1	    889  ! 			REMOVE RMS$_RUH_FILE (USING A GENERAL RUF MESSAGE INSTEAD).
    1	    890  ! 			CHANGE RMS$_RUH TEXT TO NOT HAVE FAO PARAMETERS. ADD
    1	    891  ! 			RMS$_BUG_RURECERR.
    1	    892  ! 	
    1	    893  ! 		X-3J5	JEJ0302		JAMES E JOHNSON		 4-APR-1986
    1	    894  ! 			ADD RMS$_RRF (ERROR DURING RU RECOVERY) AND
    1	    895  ! 			RMS$_RUH/RMS$_RUH_FILE (USED TO FORM TEXT OF RU HANDLER ERRORS
    1	    896  ! 			SENT TO OPCOM).
    1	    897  ! 	
    1	    898  ! 		X-3J4	JEJ0272		JAMES E JOHNSON		11-FEB-1986
    1	    899  ! 			ADD RMS$_RUF, RMS$_BUG_ABORT CODES.
    1	    900  ! 	
    1	    901  ! 		X-3J3	JEJ0237		JAMES E JOHNSON		16-DEC-1985
    1	    902  ! 			ADD RMS$_RUNDOWN CODE
    1	    903  ! 	
    1	    904  ! 		X-3J2	JEJ0205		JAMES E JOHNSON		25-OCT-1985
    1	    905  ! 			ADD JOURNAL SPECIFIC WRTJNL_XXJ ERROR CODES TO REPLACE
    1	    906  ! 			THE GENERIC ERRWRTJNL CODE.
    1	    907  ! 
    1	    908  ! 	X-4	JEJ0216		JAMES E JOHNSON		18-NOV-1985
    1	    909  ! 		MERGE X-3J2 INTO MAIN LINE FOR V4.4.
    1	    910  ! 
    1	    911  ! 		X-3J2	JEJ0205		JAMES E JOHNSON		25-OCT-1985
    1	    912  ! 			ADD JOURNAL SPECIFIC WRTJNL_XXJ ERROR CODES TO REPLACE
    1	    913  ! 			THE GENERIC ERRWRTJNL CODE.

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page   6
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    914  ! 
    1	    915  ! 	X-3	JEJ0161		JAMES E JOHNSON		 9-SEP-1985
    1	    916  ! 		UPDATE RMS JOURNALING MESSAGES.
    1	    917  ! 
    1	    918  ! 	X-2	JWT0212		JIM TEAGUE		 4-SEP-1985
    1	    919  ! 		ADD (WHAT IS FOR NOW) AN INTERNAL STATUS CODE TO 
    1	    920  ! 		DIFFERENTIATE BETWEEN FINDING A DELETED RECORD (DEL)
    1	    921  ! 		AND FINDING IT BUT WITH A DIFFERENT KEY (KEY_MISMATCH).
    1	    922  ! 		
    1	    923  ! 	V03-024	RAS0314		RON SCHAEFER		21-JUN-1984
    1	    924  ! 		WORK OVER THE MESSAGES ONE MORE TIME:  FIX TYPO IN OK_RNF,
    1	    925  ! 		DELETE ACPEOF ERROR, DELETE WSF ERROR.
    1	    926  ! 
    1	    927  ! 	V03-023	RAS0282		RON SCHAEFER		28-MAR-1984
    1	    928  ! 		MINOR TEXT CHANGES AND COMMENTS ADDED.
    1	    929  ! 		DELETE RMS$_COP ERROR.
    1	    930  ! 
    1	    931  ! 	V03-022	DAS0005		DAVID SOLOMON		19-MAR-1984
    1	    932  ! 		REMOVE RMS$_ECHO (NO LONGER NEEDED AS A RESULT OF NEW
    1	    933  ! 		IMPLEMENTATION FOR ECHO SYS$INPUT -> SYS$OUTPUT).
    1	    934  ! 
    1	    935  ! 	V03-021	JWT0150		JIM TEAGUE		01-FEB-1984
    1	    936  ! 		ADD RMS$_IFF FOR TRYING TO WRITE-ACCESS A FILE ON 
    1	    937  ! 		MAGTAPE THAT HAS NON-0 VALUE FOR ANSI BUFFER OFFSET.
    1	    938  ! 
    1	    939  ! 	V03-020	RAS0233		RON SCHAEFER		 9-JAN-1984
    1	    940  ! 		ADD RMS$_NOVALPRS ERROR FOR $SEARCH NOT PRECEDED BY
    1	    941  ! 		VALID $PARSE.
    1	    942  ! 
    1	    943  ! 	V03-019	JWT0148		JIM TEAGUE		20-DEC-1983
    1	    944  ! 		ADD A JNL XAB ERROR FOR CONFLICTING RU ATTRIBUTES
    1	    945  ! 		ON $CREATE: RMS$_XCR.
    1	    946  ! 
    1	    947  ! 	V03-018	RAS0171		RON SCHAEFER		28-JUL-1983
    1	    948  ! 		ADD RMS$_BUSY; A STRUCTURE-LESS ERROR (R0-ONLY STATUS)
    1	    949  ! 		REPLACING TEMP3.
    1	    950  ! 
    1	    951  ! 	V03-017	DAS0004		DAVID SOLOMON		28-JUN-1983
    1	    952  ! 		ADD RMS$_FILEPURGED; ADD RMS$_ACPEOF FOR ZALEWSKI.
    1	    953  ! 
    1	    954  ! 	V03-016	KPL0007		PETER LIEBERWIRTH	 8-JUN-1983
    1	    955  ! 		FIX SPELLING IN JNL ERROR MESSAGES, ADD CJF ERROR WHICH
    1	    956  ! 		WILL SOON SUBSUME COP AND CQE.
    1	    957  ! 
    1	    958  ! 	V03-015	DAS0003		DAVID SOLOMON		18-FEB-1983
    1	    959  ! 		ADD XNF (REPLACING TEMP9), TMR (NEW), LWC (NEW).
    1	    960  ! 
    1	    961  ! 	V03-014	KBT0497		KEITH B. THOMPSON	18-FEB-1983
    1	    962  ! 		ADD INCOMPSHR ERROR (REUSE OF TEMP1 SLOT)
    1	    963  ! 
    1	    964  ! 	V03-013	RAS0120		RON SCHAEFER		 2-FEB-1983
    1	    965  ! 		ADD ECHO PSEUDO-STATUS TO SUPPORT ECHO OF SYS$INPUT
    1	    966  ! 		TO SYS$OUTPUT.
    1	    967  ! 
    1	    968  ! 	V03-012	JWH0174		JEFFRY W. HORN		24-JAN-1983
    1	    969  ! 		ADD CQE AND COP ERRORS.
    1	    970  ! 

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page   7
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    971  ! 	V03-011	KPL0006		PETER LIEBERWIRTH	 7-JAN-1983
    1	    972  ! 		ADD OK_RULK FOR RECOVERY UNIT SUPPORT.
    1	    973  ! 
    1	    974  ! 		ADD REENT ERROR FOR $RENAME.
    1	    975  ! 		
    1	    976  ! 	V03-009	JWH0153		JEFFREY W. HORN		 8-DEC-1982
    1	    977  ! 		ADD NRU ERROR.
    1	    978  ! 
    1	    979  ! 	V03-008	JWH0152		JEFFREY W. HORN		 8-DEC-1982
    1	    980  ! 		ADD JNS ERROR.
    1	    981  ! 
    1	    982  ! 	V03-007 MCN0002		MARIA DEL C. NASR	15-NOV-1982
    1	    983  ! 		REPLACE ORD ERROR CODE ELIMINATED BY MCN0001, SINCE
    1	    984  ! 		THE NETWORK CODE REFERENCES IT.
    1	    985  ! 
    1	    986  ! 	V03-006 MCN0001		MARIA DEL C. NASR	26-OCT-1982
    1	    987  ! 		PRINT KEY OF REFERENCE OR AREA IDENTIFICATION NUMBER
    1	    988  ! 		INSTEAD OF XAB ADDRESS FOR ERRORS RETURNED DURING
    1	    989  ! 		INDEXED FILE CREATION.  ALSO RENAME ALL UNUSED ERROR
    1	    990  ! 		CODES TO TEMP.
    1	    991  ! 
    1	    992  ! 	V03-005	JWH0102		JEFFREY W. HORN		24-SEP-1982
    1	    993  ! 		ADD RUP ERROR.
    1	    994  ! 
    1	    995  ! 	V03-004	RAS0095		RON SCHAEFER		 7-SEP-1982
    1	    996  ! 		ADD OVRDSKQUOTA ERROR.
    1	    997  ! 
    1	    998  ! 	V03-002	JWH0002		JEFFREY W. HORN		26-JUL-1982
    1	    999  ! 		CONVERT TO .MSG FORMAT.   ADD RUM ERROR.
    1	   1000  ! 
    1	   1001  ! 	V03-001	JWH0001		JEFFREY W. HORN		20-JUL-1982
    1	   1002  ! 		ADD JNF, JOP, AND NOJ ERRORS.
    1	   1003  ! 
    1	   1004  ! 	V02-042	KPL0005		PETER LIEBERWIRTH	 4-FEB-1982
    1	   1005  ! 		ADD ERROR MESSAGES RMS$_EXENQLM AND RMS$_DEADLOCK
    1	   1006  ! 		CORRECTLY.
    1	   1007  ! 
    1	   1008  ! 	V02-041	CDS0001		C D SAETHER	24-JAN-1982
    1	   1009  ! 		ADD GBC AND CRMP ERRORS.
    1	   1010  ! 
    1	   1011  ! 	V02-040	JAK0069		J A KRYCKA	15-JAN-1982
    1	   1012  ! 		ADD SUPPORT AND NETFAIL ERROR CODES.
    1	   1013  ! 
    1	   1014  ! 	V02-039	JAK0068		J A KRYCKA	31-DEC-1981
    1	   1015  ! 		MODIFY TEXT FOR SUP, NET, BUG_DAP, AND ENV ERROR MESSAGES.
    1	   1016  ! 
    1	   1017  ! 	V02-038 LJA0001		LAURIE ANDERSON 20-DEC-1981
    1	   1018  ! 		MODIFIED SOME MESSAGES TO READ BETTER.
    1	   1019  ! 
    1	   1020  ! 	V02-037	JAK0063		J A KRYCKA	31-AUG-1981
    1	   1021  ! 		ADD CRE_STM SUCCESS CODE.
    1	   1022  ! 
    1	   1023  ! 	V02-036	KPL0004		PETER LIEBERWIRTH	13-JAN-1981
    1	   1024  ! 		ADD ENQ SEVERE ERROR MESSAGE, TO INDICATE $ENQ/$DEQ FAILURE.
    1	   1025  ! 		ALSO ADD SUCCESS CODES OK_RRL, AND OK_WAT.
    1	   1026  ! 
    1	   1027  ! 	V02-035	REFORMAT	J A KRYCKA	30-JUL-1980

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page   8
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1028  ! 
    1	   1029  ! --
    1	   1030 	PARAMETER RMS$_FACILITY = '00000001'X
    1	   1031 	PARAMETER RMS$V_STVSTATUS = '0000000E'X	 !  MOVE TO BIT 14 OF THE
    1	   1032  !  STATUS CODE IT INDICATES
    1	   1033  !  THAT STV CONTAINS A SECONDARY
    1	   1034  !  STATUS CODE.
    1	   1035 	PARAMETER RMS$_SUC = '00010001'X
    1	   1036 	PARAMETER RMS$_NORMAL = '00010001'X
    1	   1037  ! +
    1	   1038  ! 
    1	   1039  ! 	SUCCESS CODES
    1	   1040  ! 
    1	   1041  ! -
    1	   1042  !  BIT 16 = BIT 15 = 1
    1	   1043 	PARAMETER RMS$_STALL = '00018001'X
    1	   1044  !  (NOTE: USER NEVER RECEIVES THIS CODE)
    1	   1045 	PARAMETER RMS$_PENDING = '00018009'X
    1	   1046 	PARAMETER RMS$_OK_DUP = '00018011'X
    1	   1047 	PARAMETER RMS$_OK_IDX = '00018019'X
    1	   1048  !   (RECORD HAS BEEN INSERTED, BUT INDEX STRUCTURE IS NO LONGER
    1	   1049  !   OPTIMAL.)
    1	   1050 	PARAMETER RMS$_OK_RLK = '00018021'X
    1	   1051  !  (BECAUSE LOCKER SET RLK IN ROP FIELD WHEN RECORD WAS LOCKED.)
    1	   1052 	PARAMETER RMS$_OK_RRL = '00018029'X
    1	   1053  !  (BECAUSE READER SET RRL IN ROP FIELD WHEN ACCESSING RECORD.)
    1	   1054  !  (THIS CODE USED TO BE OK_RRV)
    1	   1055  ! OK_RRV	;MSG <record was inserted successfully in primary>
    1	   1056  !   (BUT IT MAY NOT BE ACCESSIBLE VIA ONE-OR-MORE SECONDARY KEYS,
    1	   1057  !   AND NOT BY RFA ADDRESSING. FILE RE-ORGANIZATION RECOMMENDED!)
    1	   1058 	PARAMETER RMS$_KFF = '00018031'X
    1	   1059 	PARAMETER RMS$_OK_ALK = '00018039'X
    1	   1060 	PARAMETER RMS$_OK_DEL = '00018041'X
    1	   1061 	PARAMETER RMS$_OK_RNF = '00018049'X
    1	   1062 	PARAMETER RMS$_OK_LIM = '00018051'X
    1	   1063 	PARAMETER RMS$_OK_NOP = '00018059'X
    1	   1064 	PARAMETER RMS$_OK_WAT = '00018061'X
    1	   1065  !  (BECAUSE WAT BIT IN ROP WAS SET AND RECORD WAS ALREADY
    1	   1066  !  LOCKED.)
    1	   1067 	PARAMETER RMS$_CRE_STM = '00018069'X
    1	   1068 	PARAMETER RMS$_OK_RULK = '00018071'X
    1	   1069 	PARAMETER RMS$_SYNCH = '00018079'X
    1	   1070 	PARAMETER RMS$_OK_ACT = '00018081'X
    1	   1071 	PARAMETER RMS$_OK_NOCURTID = '00018089'X
    1	   1072  ! +
    1	   1073  ! 
    1	   1074  ! 	SUCCESS CODES PASSED THRU FROM DRIVERS AND ACP -	BIT 15 = 0
    1	   1075  ! 
    1	   1076  ! -
    1	   1077 	PARAMETER RMS$_CONTROLC = '00010651'X	 !  TERMINAL I/O ABORTED DUE TO CTRL/C
    1	   1078 	PARAMETER RMS$_CONTROLO = '00010609'X
    1	   1079  !  TERMINAL I/O ABORTED DUE TO CTRL/O
    1	   1080 	PARAMETER RMS$_CONTROLY = '00010611'X
    1	   1081  !  TERMINAL I/O ABORTED DUE TO CTRL/Y
    1	   1082 	PARAMETER RMS$_CREATED = '00010619'X
    1	   1083  !  FILE WAS CREATED, NOT OPENED
    1	   1084 	PARAMETER RMS$_SUPERSEDE = '00010631'X

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page   9
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1085  !  CREATED FILE SUPERSEDED EXISTING VERSION
    1	   1086 	PARAMETER RMS$_OVRDSKQUOTA = '00010669'X
    1	   1087  !  DISK USAGE EXCEEDS DISK QUOTA
    1	   1088 	PARAMETER RMS$_FILEPURGED = '00010679'X
    1	   1089  !  CREATE FILE CAUSED OLDEST FILE
    1	   1090  !  VERSION TO BE PURGED
    1	   1091  ! +
    1	   1092  ! 
    1	   1093  ! 	WARNING CODES
    1	   1094  ! 
    1	   1095  ! -
    1	   1096  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1097 	PARAMETER RMS$_BOF = '00018198'X
    1	   1098 	PARAMETER RMS$_RNL = '000181A0'X
    1	   1099 	PARAMETER RMS$_RTB = '000181A8'X
    1	   1100 	PARAMETER RMS$_TMO = '000181B0'X
    1	   1101 	PARAMETER RMS$_TNS = '000181B8'X
    1	   1102 	PARAMETER RMS$_BES = '000181C0'X
    1	   1103 	PARAMETER RMS$_PES = '000181C8'X
    1	   1104  ! +
    1	   1105  ! 
    1	   1106  ! 	ERROR CODES - WITHOUT STV (THAT IS, STV MAY BE USED BUT NO ASSOCIATED
    1	   1107  ! 		      CONDITION CODE IS IN STV)
    1	   1108  ! 
    1	   1109  ! -
    1	   1110  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1111 	PARAMETER RMS$_ACT = '0001825A'X
    1	   1112 	PARAMETER RMS$_DEL = '00018262'X
    1	   1113 	PARAMETER RMS$_INCOMPSHR = '0001826A'X
    1	   1114 	PARAMETER RMS$_DNR = '00018272'X
    1	   1115 	PARAMETER RMS$_EOF = '0001827A'X
    1	   1116 	PARAMETER RMS$_FEX = '00018282'X
    1	   1117 	PARAMETER RMS$_FLK = '0001828A'X
    1	   1118 	PARAMETER RMS$_FNF = '00018292'X
    1	   1119 	PARAMETER RMS$_PRV = '0001829A'X
    1	   1120 	PARAMETER RMS$_REX = '000182A2'X
    1	   1121 	PARAMETER RMS$_RLK = '000182AA'X
    1	   1122 	PARAMETER RMS$_RNF = '000182B2'X
    1	   1123  !   (RECORD NEVER WAS IN FILE, OR HAS BEEN DELETED.)
    1	   1124 	PARAMETER RMS$_WLK = '000182BA'X
    1	   1125 	PARAMETER RMS$_EXP = '000182C2'X
    1	   1126 	PARAMETER RMS$_NMF = '000182CA'X
    1	   1127 	PARAMETER RMS$_SUP = '000182D2'X
    1	   1128  !  (NOTE THAT SUPPORT HAS REPLACED SUP EXCEPT WHEN RMS CANNOT
    1	   1129  !  MAP THE DAP STATUS CODE INTO A FAL STATUS CODE.)
    1	   1130  !  (NOTE ALSO THAT SUP SHOULD HAVE BEEN DEFINED AS A SEVERE
    1	   1131  !  ERROR CODE. HOWEVER, SUPPORT IS A SEVERE ERROR CODE.)
    1	   1132 	PARAMETER RMS$_RSA = '000182DA'X
    1	   1133 	PARAMETER RMS$_CRC = '000182E2'X
    1	   1134 	PARAMETER RMS$_WCC = '000182EA'X
    1	   1135 	PARAMETER RMS$_IDR = '000182F2'X
    1	   1136 	PARAMETER RMS$_LWC = '000182FA'X
    1	   1137 	PARAMETER RMS$_UNUSED1 = '00018302'X
    1	   1138 	PARAMETER RMS$_NOVALPRS = '0001830A'X
    1	   1139 	PARAMETER RMS$_KEY_MISMATCH = '00018312'X
    1	   1140 	PARAMETER RMS$_RUH = '0001831A'X
    1	   1141 	PARAMETER RMS$_JND = '00018322'X

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  10
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1142 	PARAMETER RMS$_BADPHASE = '0001832A'X
    1	   1143 	PARAMETER RMS$_TOWDR = '00018332'X
    1	   1144 	PARAMETER RMS$_NEXDR = '0001833A'X
    1	   1145 	PARAMETER RMS$_INVDRMSG = '00018342'X
    1	   1146 	PARAMETER RMS$_RU_ACTIVE = '0001834A'X
    1	   1147 	PARAMETER RMS$_UNKRUFAC = '00018352'X
    1	   1148 	PARAMETER RMS$_LIMBO = '0001835A'X
    1	   1149 	PARAMETER RMS$_IVATRACE = '00018362'X
    1	   1150 	PARAMETER RMS$_OPNOTSUP = '0001836A'X
    1	   1151 	PARAMETER RMS$_EXTNOTFOU = '00018372'X
    1	   1152 	PARAMETER RMS$_EXT_ERR = '0001837A'X
    1	   1153 	PARAMETER RMS$_SEMANTICS = '00018382'X
    1	   1154 	PARAMETER RMS$_LSCAN = '0001838A'X
    1	   1155 	PARAMETER RMS$_ROOTSRCH = '00018392'X
    1	   1156 	PARAMETER RMS$_IDXSEARCH = '0001839A'X
    1	   1157 	PARAMETER RMS$_NETBTS = '000183A2'X
    1	   1158  ! +
    1	   1159  ! 
    1	   1160  ! 	ERROR CODES - WITH STV ERROR CODE (THAT IS, STV CONTAINS AN ASSOCIATED CONDITION CODE)
    1	   1161  ! 
    1	   1162  ! -
    1	   1163  !  BIT 16 = BIT 15 = BIT 14 = 1
    1	   1164 	PARAMETER RMS$_ACC = '0001C002'X
    1	   1165 	PARAMETER RMS$_CRE = '0001C00A'X
    1	   1166 	PARAMETER RMS$_DAC = '0001C012'X
    1	   1167 	PARAMETER RMS$_ENT = '0001C01A'X
    1	   1168 	PARAMETER RMS$_EXT = '0001C022'X
    1	   1169 	PARAMETER RMS$_FND = '0001C02A'X
    1	   1170 	PARAMETER RMS$_MKD = '0001C032'X
    1	   1171 	PARAMETER RMS$_DPE = '0001C03A'X
    1	   1172 	PARAMETER RMS$_SPL = '0001C042'X
    1	   1173 	PARAMETER RMS$_DNF = '0001C04A'X
    1	   1174 	PARAMETER RMS$_RUF = '0001C052'X
    1	   1175 	PARAMETER RMS$_WRTJNL_AIJ = '0001C05A'X
    1	   1176 	PARAMETER RMS$_WRTJNL_BIJ = '0001C062'X
    1	   1177 	PARAMETER RMS$_WRTJNL_ATJ = '0001C06A'X
    1	   1178 	PARAMETER RMS$_WRTJNL_RUJ = '0001C072'X
    1	   1179 	PARAMETER RMS$_RRF = '0001C07A'X
    1	   1180 	PARAMETER RMS$_DDTM_ERR = '0001C082'X
    1	   1181  ! +
    1	   1182  ! 
    1	   1183  ! 	SEVERE ERROR CODES - WITHOUT STV (THAT IS, STV MAY BE USED BUT NO ASSOCIATED
    1	   1184  ! 			     CONDITION CODE IS IN STV)
    1	   1185  ! 
    1	   1186  ! -
    1	   1187  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1188 	PARAMETER RMS$_DTFCDDREC = '000183EC'X
    1	   1189 	PARAMETER RMS$_AID = '000183F4'X
    1	   1190 	PARAMETER RMS$_ALN = '000183FC'X
    1	   1191 	PARAMETER RMS$_ALQ = '00018404'X
    1	   1192 	PARAMETER RMS$_ANI = '0001840C'X
    1	   1193 	PARAMETER RMS$_AOP = '00018414'X
    1	   1194 	PARAMETER RMS$_BKS = '0001841C'X
    1	   1195 	PARAMETER RMS$_BKZ = '00018424'X
    1	   1196 	PARAMETER RMS$_BLN = '0001842C'X
    1	   1197 	PARAMETER RMS$_BUG = '00018434'X
    1	   1198 	PARAMETER RMS$_BUG_DDI = '0001843C'X

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  11
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1199 	PARAMETER RMS$_BUG_DAP = '00018444'X
    1	   1200 	PARAMETER RMS$_BUG_RU_ACTIVE = '0001844C'X
    1	   1201 	PARAMETER RMS$_BUG_RURECERR = '00018454'X
    1	   1202 	PARAMETER RMS$_BUG_FLUSH_JNL_FAILED = '0001845C'X
    1	   1203 	PARAMETER RMS$_BUG_RU_ABORT_FAIL = '00018464'X
    1	   1204 	PARAMETER RMS$_BUG_RU_COMMIT_FAIL = '0001846C'X
    1	   1205 	PARAMETER RMS$_BUG_XX6 = '00018474'X
    1	   1206 	PARAMETER RMS$_BUG_XX7 = '0001847C'X
    1	   1207 	PARAMETER RMS$_BUG_XX8 = '00018484'X
    1	   1208 	PARAMETER RMS$_BUSY = '0001848C'X
    1	   1209 	PARAMETER RMS$_CCR = '00018494'X
    1	   1210 	PARAMETER RMS$_CHG = '0001849C'X
    1	   1211 	PARAMETER RMS$_CHK = '000184A4'X
    1	   1212 	PARAMETER RMS$_COD = '000184AC'X
    1	   1213 	PARAMETER RMS$_CUR = '000184B4'X
    1	   1214 	PARAMETER RMS$_DAN = '000184BC'X
    1	   1215 	PARAMETER RMS$_DEV = '000184C4'X
    1	   1216 	PARAMETER RMS$_DIR = '000184CC'X
    1	   1217 	PARAMETER RMS$_DME = '000184D4'X
    1	   1218 	PARAMETER RMS$_DNA = '000184DC'X
    1	   1219 	PARAMETER RMS$_DTP = '000184E4'X
    1	   1220 	PARAMETER RMS$_DUP = '000184EC'X
    1	   1221 	PARAMETER RMS$_DVI = '000184F4'X
    1	   1222 	PARAMETER RMS$_ESA = '000184FC'X
    1	   1223 	PARAMETER RMS$_ESS = '00018504'X
    1	   1224 	PARAMETER RMS$_FAB = '0001850C'X
    1	   1225 	PARAMETER RMS$_FAC = '00018514'X
    1	   1226 	PARAMETER RMS$_FLG = '0001851C'X
    1	   1227 	PARAMETER RMS$_FNA = '00018524'X
    1	   1228 	PARAMETER RMS$_FNM = '0001852C'X
    1	   1229 	PARAMETER RMS$_FSZ = '00018534'X
    1	   1230 	PARAMETER RMS$_FOP = '0001853C'X
    1	   1231 	PARAMETER RMS$_FUL = '00018544'X
    1	   1232 	PARAMETER RMS$_IAL = '0001854C'X
    1	   1233 	PARAMETER RMS$_IAN = '00018554'X
    1	   1234 	PARAMETER RMS$_IDX = '0001855C'X
    1	   1235 	PARAMETER RMS$_IFI = '00018564'X
    1	   1236 	PARAMETER RMS$_IMX = '0001856C'X
    1	   1237 	PARAMETER RMS$_IOP = '00018574'X
    1	   1238 	PARAMETER RMS$_IRC = '0001857C'X
    1	   1239 	PARAMETER RMS$_ISI = '00018584'X
    1	   1240 	PARAMETER RMS$_KBF = '0001858C'X
    1	   1241 	PARAMETER RMS$_KEY = '00018594'X
    1	   1242 	PARAMETER RMS$_KRF = '0001859C'X
    1	   1243 	PARAMETER RMS$_KSZ = '000185A4'X
    1	   1244 	PARAMETER RMS$_LAN = '000185AC'X
    1	   1245 	PARAMETER RMS$_RUNDOWN = '000185B4'X
    1	   1246 	PARAMETER RMS$_LNE = '000185BC'X
    1	   1247 	PARAMETER RMS$_DTFCVT = '000185C4'X
    1	   1248 	PARAMETER RMS$_MRN = '000185CC'X
    1	   1249 	PARAMETER RMS$_MRS = '000185D4'X
    1	   1250 	PARAMETER RMS$_NAM = '000185DC'X
    1	   1251 	PARAMETER RMS$_NEF = '000185E4'X
    1	   1252 	PARAMETER RMS$_DTFQUASYN = '000185EC'X
    1	   1253 	PARAMETER RMS$_NOD = '000185F4'X
    1	   1254 	PARAMETER RMS$_NPK = '000185FC'X
    1	   1255 	PARAMETER RMS$_ORD = '00018604'X	 ! ! NOT USED AS OF V4

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  12
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1256 	PARAMETER RMS$_ORG = '0001860C'X
    1	   1257 	PARAMETER RMS$_PBF = '00018614'X
    1	   1258 	PARAMETER RMS$_PLG = '0001861C'X
    1	   1259 	PARAMETER RMS$_POS = '00018624'X
    1	   1260 	PARAMETER RMS$_DTFQUAVAL = '0001862C'X
    1	   1261 	PARAMETER RMS$_QUO = '00018634'X
    1	   1262 	PARAMETER RMS$_RAB = '0001863C'X
    1	   1263 	PARAMETER RMS$_RAC = '00018644'X
    1	   1264 	PARAMETER RMS$_RAT = '0001864C'X
    1	   1265 	PARAMETER RMS$_RBF = '00018654'X
    1	   1266 	PARAMETER RMS$_RFA = '0001865C'X
    1	   1267 	PARAMETER RMS$_RFM = '00018664'X
    1	   1268 	PARAMETER RMS$_RHB = '0001866C'X
    1	   1269 	PARAMETER RMS$_RLF = '00018674'X
    1	   1270 	PARAMETER RMS$_ROP = '0001867C'X
    1	   1271 	PARAMETER RMS$_RRV = '00018684'X
    1	   1272 	PARAMETER RMS$_RVU = '0001868C'X
    1	   1273 	PARAMETER RMS$_RSS = '00018694'X
    1	   1274 	PARAMETER RMS$_RST = '0001869C'X
    1	   1275 	PARAMETER RMS$_RSZ = '000186A4'X
    1	   1276 	PARAMETER RMS$_SEQ = '000186AC'X
    1	   1277 	PARAMETER RMS$_SHR = '000186B4'X
    1	   1278 	PARAMETER RMS$_SIZ = '000186BC'X
    1	   1279 	PARAMETER RMS$_SQO = '000186C4'X
    1	   1280 	PARAMETER RMS$_DTFSESEST = '000186CC'X
    1	   1281 	PARAMETER RMS$_SYN = '000186D4'X
    1	   1282 	PARAMETER RMS$_TRE = '000186DC'X
    1	   1283 	PARAMETER RMS$_TYP = '000186E4'X
    1	   1284 	PARAMETER RMS$_UBF = '000186EC'X
    1	   1285 	PARAMETER RMS$_USZ = '000186F4'X
    1	   1286 	PARAMETER RMS$_VER = '000186FC'X
    1	   1287 	PARAMETER RMS$_XNF = '00018704'X
    1	   1288 	PARAMETER RMS$_XAB = '0001870C'X
    1	   1289 	PARAMETER RMS$_ESL = '00018714'X
    1	   1290 	PARAMETER RMS$_DTFSESTER = '0001871C'X
    1	   1291 	PARAMETER RMS$_ENV = '00018724'X
    1	   1292 	PARAMETER RMS$_PLV = '0001872C'X
    1	   1293 	PARAMETER RMS$_MBC = '00018734'X
    1	   1294 	PARAMETER RMS$_RSL = '0001873C'X
    1	   1295 	PARAMETER RMS$_WLD = '00018744'X
    1	   1296 	PARAMETER RMS$_NET = '0001874C'X	 !  (NOTE THAT NETFAIL HAS REPLACED NET EXCEPT WHEN RMS CANNOT
    1	   1297  !  MAP THE DAP STATUS CODE INTO A FAL STATUS CODE.)
    1	   1298 	PARAMETER RMS$_IBF = '00018754'X
    1	   1299 	PARAMETER RMS$_REF = '0001875C'X
    1	   1300 	PARAMETER RMS$_IFL = '00018764'X
    1	   1301 	PARAMETER RMS$_DFL = '0001876C'X
    1	   1302 	PARAMETER RMS$_KNM = '00018774'X
    1	   1303 	PARAMETER RMS$_IBK = '0001877C'X
    1	   1304 	PARAMETER RMS$_KSI = '00018784'X
    1	   1305 	PARAMETER RMS$_LEX = '0001878C'X
    1	   1306 	PARAMETER RMS$_SEG = '00018794'X
    1	   1307 	PARAMETER RMS$_SNE = '0001879C'X	 ! ! NOT USED AS OF V4
    1	   1308 	PARAMETER RMS$_SPE = '000187A4'X	 ! ! NOT USED AS OF V4
    1	   1309 	PARAMETER RMS$_UPI = '000187AC'X
    1	   1310 	PARAMETER RMS$_ACS = '000187B4'X
    1	   1311 	PARAMETER RMS$_STR = '000187BC'X
    1	   1312 	PARAMETER RMS$_FTM = '000187C4'X

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  13
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1313 	PARAMETER RMS$_GBC = '000187CC'X
    1	   1314 	PARAMETER RMS$_DEADLOCK = '000187D4'X
    1	   1315 	PARAMETER RMS$_EXENQLM = '000187DC'X
    1	   1316 	PARAMETER RMS$_JOP = '000187E4'X
    1	   1317 	PARAMETER RMS$_RUM = '000187EC'X
    1	   1318 	PARAMETER RMS$_JNS = '000187F4'X
    1	   1319 	PARAMETER RMS$_NRU = '000187FC'X
    1	   1320 	PARAMETER RMS$_IFF = '00018804'X
    1	   1321 	PARAMETER RMS$_DTFTRATBL = '0001880C'X
    1	   1322 	PARAMETER RMS$_DTFUNSTYP = '00018814'X
    1	   1323 	PARAMETER RMS$_DTFVERMIS = '0001881C'X
    1	   1324  ! +
    1	   1325  ! 
    1	   1326  ! 	ERROR CODES - WITHOUT STV
    1	   1327  ! 
    1	   1328  ! 	  DTFACC AND DTFCRE WERE ORIGINALLY INCLUDED IN THIS FATAL SEVERITY 
    1	   1329  ! 	  (NO STV) GROUPING.  IN ORDER TO CHANGE THEIR SEVERITY TO ERROR 
    1	   1330  ! 	  (NO STV) AND RETAIN THE SAME MESSAGE CODE VALUE, THE FOLLOWING 
    1	   1331  ! 	  SHIFTS IN SEVERITY FROM FATAL TO ERROR AND THEN BACK AGAIN ARE
    1	   1332  ! 	  DONE, WHILE RETAINING THE SAME ORIGINAL BASE ASSOCIATED WITH EACH.
    1	   1333  ! 
    1	   1334  ! -
    1	   1335  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1336 	PARAMETER RMS$_DTFACC = '00018822'X
    1	   1337  ! +
    1	   1338  ! 
    1	   1339  ! 	SEVERE ERROR CODES - WITHOUT STV
    1	   1340  ! 
    1	   1341  ! -
    1	   1342  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1343 	PARAMETER RMS$_BOGUSCOL = '0001882C'X
    1	   1344 	PARAMETER RMS$_ERRREADCOL = '00018834'X
    1	   1345 	PARAMETER RMS$_ERRWRITECOL = '0001883C'X
    1	   1346 	PARAMETER RMS$_SNS = '00018844'X
    1	   1347 	PARAMETER RMS$_NOEXTEND = '0001884C'X	 ! +
    1	   1348  ! 
    1	   1349  ! 	ERROR CODES - WITHOUT STV
    1	   1350  ! 
    1	   1351  ! -
    1	   1352  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1353 	PARAMETER RMS$_DTFCRE = '00018852'X
    1	   1354  ! +
    1	   1355  ! 
    1	   1356  ! 	SEVERE ERROR CODES - WITHOUT STV
    1	   1357  ! 
    1	   1358  ! -
    1	   1359  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1360 	PARAMETER RMS$_DELJNS = '0001885C'X
    1	   1361 	PARAMETER RMS$_NOTSAMEJNL = '00018864'X
    1	   1362 	PARAMETER RMS$_SNPPF = '0001886C'X
    1	   1363  ! +
    1	   1364  ! 
    1	   1365  ! 	SEVERE ERRORS - WITH STV ERROR CODE (THAT IS, STV CONTAINS AN ASSOCIATED CONDITION CODE)
    1	   1366  ! 
    1	   1367  ! -
    1	   1368  !  BIT 16 = BIT 15 = BIT 14 = 1
    1	   1369 	PARAMETER RMS$_ATR = '0001C0CC'X

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  14
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1370 	PARAMETER RMS$_ATW = '0001C0D4'X
    1	   1371 	PARAMETER RMS$_CCF = '0001C0DC'X
    1	   1372 	PARAMETER RMS$_CDA = '0001C0E4'X
    1	   1373 	PARAMETER RMS$_CHN = '0001C0EC'X
    1	   1374 	PARAMETER RMS$_RER = '0001C0F4'X
    1	   1375 	PARAMETER RMS$_RMV = '0001C0FC'X
    1	   1376 	PARAMETER RMS$_RPL = '0001C104'X
    1	   1377 	PARAMETER RMS$_SYS = '0001C10C'X
    1	   1378 	PARAMETER RMS$_WER = '0001C114'X
    1	   1379 	PARAMETER RMS$_WPL = '0001C11C'X
    1	   1380 	PARAMETER RMS$_IFA = '0001C124'X
    1	   1381 	PARAMETER RMS$_WBE = '0001C12C'X
    1	   1382 	PARAMETER RMS$_ENQ = '0001C134'X
    1	   1383 	PARAMETER RMS$_NETFAIL = '0001C13C'X
    1	   1384 	PARAMETER RMS$_SUPPORT = '0001C144'X
    1	   1385 	PARAMETER RMS$_CRMP = '0001C14C'X
    1	   1386 	PARAMETER RMS$_DTFCFGFIL = '0001C154'X
    1	   1387 	PARAMETER RMS$_REENT = '0001C15C'X
    1	   1388 	PARAMETER RMS$_ACC_RUJ = '0001C164'X
    1	   1389 	PARAMETER RMS$_TMR = '0001C16C'X
    1	   1390 	PARAMETER RMS$_ACC_AIJ = '0001C174'X
    1	   1391 	PARAMETER RMS$_ACC_BIJ = '0001C17C'X
    1	   1392 	PARAMETER RMS$_ACC_ATJ = '0001C184'X
    1	   1393 	PARAMETER RMS$_DTFDEFFIL = '0001C18C'X
    1	   1394 	PARAMETER RMS$_DTFREGFIL = '0001C194'X
    1	   1395 	PARAMETER RMS$_JNLNOTAUTH = '0001C19C'X
    1	   1396 CDEC$ END OPTIONS
    1	   1397 
	   1398 
	   1399 C  	************************************************
	   1400 C	*		data file names                *
	   1401 C	************************************************
	   1402 
	   1403       INTEGER*4 L1_LUN/19/,OUTUNIT,OPENMODE      !lu unit numbers for input,output,
	   1404 C						   mode option for searching 
	   1405 C						   for additional input files
	   1406       INTEGER*4 NAMELEN		        !number of characters in file name
	   1407       CHARACTER L1FILENAME*80		!input L1 data file name
	   1408       CHARACTER FULL_L1_NAME*80		!L1 data file with full directory information
	   1409       CHARACTER INPUTFILES(1:100)*80	!L1 file name array for multiple inputs
	   1410       INTEGER*4 IFILE		        !number of L1 files used (use with INPUTFILES)
	   1411 
	   1412 C     naming the output file
	   1413       LOGICAL   BRACK   		!A variable which is .TRUE. if there is 
	   1414 C                     			   a set of square brackets in the input file name.
	   1415       INTEGER*4 NINDEX, 		!used in rearranging the input file name to     
	   1416 C                      			   create the output file name.                    
	   1417      .          JSAVE   		!used in rearranging the input file name to 
	   1418 C                        		   create the output file name.
	   1419       CHARACTER*90 LISFIL1,LISFIL2	!holds the name of the input file for use
	   1420      					!  in creating the default output file names
	   1421       CHARACTER OUTFILENAME1*90, OUTFILENAME2*90
	   1422       CHARACTER*40 USERNAME1		!user defined output file name
	   1423 
	   1424       LOGICAL FIRSTFILE,		!set to true if this is the first input file 
	   1425      .	      FIRST_TIME		!Set to true for 1st time interval
	   1426 

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  15
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   1427       CHARACTER*4 LABELS(1:30)		!Ion names
	   1428       DATA LABELS/ 'H',    'He2',  'He1',   'C6',
	   1429      +             'C5',   'C4',   '07',    'O6',
	   1430      +             'O1',   'Ne8',  'Mg10',  'Mg8',
	   1431      +		   'Si12', 'Si9',  'Si8',   'Fe16',
	   1432      +		   'Fe14', 'Fe12', 'Fe11',  'Fe10',
	   1433      +             'Fe9',  'Fe8',   8*' '/
	   1434       INTEGER*4 ION_CHOICE		!Selected ion number
	   1435 
	   1436       REAL*4 CHARGE_ION(1:30), MASS_ION(1:30) 
	   1437       DATA MASS_ION/1.000,3.971,3.971,11.916,11.916,11.916,15.872,15.872,15.872,20.019,24.112,24.112,
	   1438      .              27.863,27.863,27.863,55.404,55.404,55.404,55.404,55.404,55.404,55.404,
	   1439      .              0,0,0,0,0,0,0,0/
	   1440 
	   1441       DATA CHARGE_ION/1.0, 2.0, 1.0, 6.0, 5.0, 4.0, 7.0, 6.0, 1.0, 8.0, 10.0, 8.0, 12.0,
	   1442      .                9.0, 8.0, 16.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 0,0,0,0,0,0,0,0/
	   1443 
	   1444 
	   1445 C  	************************************************
	   1446 C	*		file, record or data status     *
	   1447 C	************************************************
	   1448 
	   1449       INTEGER*4 STATUS			!did L1 file open successfully
	   1450       LOGICAL   GOODSPIN		!data record has good data
	   1451 
	   1452 C  	************************************************
	   1453 C	*		time search status     *
	   1454 C	************************************************
	   1455 
	   1456       LOGICAL COMPARE_TIME_GE,			!check on whether time is inbounds
	   1457      .        STARTFOUND,ENDFOUND,		!start/end time found?
	   1458      .        USE_SC_CLOCK			!which time on L1 to use (wall or s/c)
	   1459 
	   1460       INTEGER*4 MONTH,DAYOFMONTH,		 !user requested start and stop times
	   1461      .          ENDMONTH,ENDDAYOFMONTH		 ! month and day of month
	   1462 
	   1463       CHARACTER RUN_TIME*8, RUN_DATE*9		!run time and date
	   1464 
	   1465 c		********************************
	   1466 C               *   Spacecraft position in Re  *
	   1467 C		********************************
	   1468       REAL*4 X1_GSE,Y1_GSE,Z1_GSE,     		!Start position
	   1469      .       X2_GSE,Y2_GSE,Z2_GSE		!Stop position
	   1470 
	   1471 C  	************************************************
	   1472 C	*    intrument and s/c housekeeping info       *
	   1473 C	************************************************
	   1474 
	   1475       CHARACTER FIFO*3, TGS*3, RATEFLAG*1			!FIFO, TGS, BIT RATE characters
	   1476       CHARACTER*17 MODE(10) /'Science mode     ','Engineering mode ',
	   1477      &                       'Maneuver mode    ','Contingency mode ',
	   1478      &                       'Science mode     ','Engineering mode ',
	   1479      &                       'Maneuver mode    ','Contingency mode ',
	   1480      &                       'Transitional mode','Unknown mode     '/,
	   1481      &             MODE_AT_START			      	!value on first good record
	   1482 
	   1483       INTEGER*4 TRIGGER_MODE_CODE			      	!ADC trigger logic

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  16
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   1484       CHARACTER*22 TRIGGER_MODE(0:7) /
	   1485      &   'E                      ','Tn                    ',
	   1486      &   '(Tn.!E)+(Tn.En)        ','Tn.En                 ',
	   1487      &   'E+T                    ','(E.!T)+(Tn.!E)+(Tn.En)',
	   1488      &   'C.(E+T)                ','(E.!T)+(Tn.En)        '/
	   1489 
	   1490       LOGICAL CODE_C1,CODE_C2		!rate compression codes for rate groups 1 and 2
	   1491 
	   1492       LOGICAL*1 BITRATE			!telemetry bit rate 
	   1493       INTEGER*4 INCREMENT    		!this value based on bitrate
	   1494 
	   1495 C    DPPS information
	   1496       INTEGER*4 DPPSPLUS,		!STICS +DPPS on=1, off=0
	   1497      .          DPPSMINUS,		!STICS -DPPS on=1, off=0
	   1498      .		DVSTEP,			!DPPS voltage step number (0-31)
	   1499      .          BAD_HDB/0/		!Number of Bad HDBs
	   1500 
	   1501 C  	************************************************
	   1502 C	*    data selection options                    *
	   1503 C	************************************************
	   1504 
	   1505       INTEGER*4  DATA_FILTER,		!data filter options 
	   1506      .           DATA_FILTER_COINC,	!data filtering by coincidence 
	   1507 C					 conditions
	   1508      .           DATA_FILTER_DVSTEP,	!data filter by voltage step
	   1509      .           DATA_DVSTEP_MIN,	!dv step min-max values for data filter
	   1510      .           DATA_DVSTEP_MAX,
	   1511      .           DATA_FILTER_RANGE,       !range selection
	   1512      .           DATA_FILTER_RANGECHECK,  !check calculated vs. dpu range
	   1513      .           TELE_FLAG,TELE_IDENT,    !    flag on telescope check, telescope id
	   1514      .           DATA_FILTER_MSPEED,      !speed filter
	   1515      .           DATA_MSPEED_MIN,         !	select data only if MASS solar
	   1516      .           DATA_MSPEED_MAX,  	  !	speed is .GE. MIN and .LE. MAX
	   1517      .		 DVSTEP_MAX1,		  !Energy range 1 maximum voltage step
	   1518      .		 DVSTEP_MAX2,		  !Energy range 2 maximum voltage step
	   1519      .		 DVSTEP_MIN1,		  !Energy range 1 minimum voltage step
	   1520      .		 DVSTEP_MIN2		  !Energy range 2 minimum voltage step
	   1521 
	   1522       CHARACTER*10 COINC(0:2) / '       ALL',           !trigger coincidence selection choices
	   1523      .                          '  M/Q-only',
	   1524      .                          '   M/Q & M'/
	   1525 
	   1526       CHARACTER*3 RONOFF, TONOFF            		!range selection ON, OFF status
	   1527       CHARACTER*5 RANGESEL(0:6) /			!range selection choices
	   1528      .                           '2 1 0' ,
	   1529      .                           '    0' ,
	   1530      .                           '  1  ' ,
	   1531      .                           '2    ' ,
	   1532      .                           '2   0' ,
	   1533      .                           '2 1  ' ,
	   1534      .                           '  1 0' /
	   1535       LOGICAL SEL_RANGE(0:2)
	   1536 
	   1537 
	   1538 C  	************************************************
	   1539 C	*    DPU DEFAULT VALUES and Calculations       *
	   1540 C	************************************************

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  17
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   1541 
	   1542 C    dpu default coefficients
	   1543       REAL*4
	   1544      .          DPU_ELOW, DPU_EHIGH,DPU_TLOW,DPU_THIGH,	 !dpu values for Emin,Emax,Tmin,Tmax
	   1545      .          DPU_AM(6),DPU_BM(6),			 !dpu values for mass (A) and 
	   1546 C							      Nm (B) coefficients
	   1547      .          DPU_C1_EQ,DPU_C2A_EQ,			 !    E/Q (C and D) coefficients
	   1548      .          DPU_C2B_EQ,DPU_D1_EQ,DPU_D2_EQ,
	   1549      .          DPU_EMQ(3),				 !    Nq (E) coefficients
	   1550      .          DPU_BK_MQ				 !    M/Q value where C2A vs C2B is used
	   1551       INTEGER*4 DPU_BK_C2	      			 !    Nq value where C2A vs C2B is used
	   1552 
	   1553 C    dpu algorithm values for e/q, mass and m/q:
	   1554       REAL*4    DPU_E_OVER_Q,		!calculated e/q,m, and m/q using dpu algorithm
	   1555      .          DPU_MASS,
	   1556      .          DPU_MASS_OVER_Q,
	   1557      .		DPU_EPQ(0:31)
	   1558       INTEGER*4 DPU_RANGE		!dpu algorithm calculation for range
	   1559 
	   1560 C  	************************************************************
	   1561 C	*    DPU DEFAULT MASS, M/Q Matrix binning parameters       *
	   1562 C	************************************************************
	   1563 
	   1564       INTEGER*4 DPU_NQ_MAX,DPU_NM_MAX	!dpu max NQ,NM values (i.e, number of bins)
	   1565       REAL*4    DPU_MQMAX,DPU_MQMIN,	!    max M/Q, min M/Q 
	   1566      .          DPU_MMAX,DPU_MMIN	!    max mass, min mass
	   1567       REAL*4    DPU_KM,DPU_KQ		!    Nm, Nq resolution (KM, KQ)
	   1568 
	   1569       INTEGER*4 DPU_NM,DPU_NQ		!dpu algorithm calculation for Nm and Nm assignments
	   1570 
	   1571       REAL*4    DPU_NM_M(0:70),DPU_NQ_MPQ(0:130)       !mass and m/q values of NM,NQ bin boundaries
	   1572 C						        (lower bounds)
	   1573 
	   1574 C  	************************************************
	   1575 C	*    USER DEFINED  Coefficients		       *
	   1576 C	************************************************
	   1577 
	   1578       REAL*4    ELOW,EHIGH,TLOW,THIGH,               !energy and time range
	   1579      .          AM(6),BM(6), 			     !mass algorithm coefficients
	   1580      .          C1_EQ,C2A_EQ,C2B_EQ,D1_EQ,D2_EQ,     !e/q, m/q algorihm coefficients
	   1581      .          EMQ(3),BK_MQ, 
	   1582      .		RKM, RKQ			     !NM,NQ binning resolution
	   1583       INTEGER*4 BK_C2				     !NQ value for selecting C2
	   1584 
	   1585 C  	************************************************************
	   1586 C	*    USER DEFINED MASS, M/Q Matrix binning parameters      *
	   1587 C	************************************************************
	   1588 
	   1589 C    binning parameters
	   1590       INTEGER*4 NQ_MAX,NM_MAX,		!user defined max NQ,NM values (i.e, number of bins)
	   1591      .          USER_NQ_MAX,USER_NM_MAX !user request for Nq_max,Nm_max 
	   1592 C					   (allows -1 to mean "use dpu default values")
	   1593       REAL*4    MQMAX,MQMIN,		!user defined M/Q max, min
	   1594      .          USER_MQMAX,USER_MQMIN,	!     request              (-1 = dpu values)
	   1595      .          MMAX, MMIN,		!user defined Mass max, min
	   1596      .          USER_MMAX,USER_MMIN	!     request              (-1 = dpu values)
	   1597 

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  18
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   1598       INTEGER*4 PHA_NQ, PHA_NM		!algorithm calculation for Nm and Nm assignments
	   1599 
	   1600       REAL*4    USER_NM_M(0:200)  ,USER_NQ_MPQ(0:300)   !mass and m/q values of bin boundaries
	   1601       REAL*4    USER_NM_MID(0:200),USER_NQ_MID(0:300)   !mass and m/q values of bin middle
	   1602       REAL*4    SPECIES_ENERGY, SPECIES_MASS,		!species energy by voltage step
	   1603      .          SPECIES_CHARGE		  		!species mass and charge of each bin
	   1604 
	   1605 C  	************************************************
	   1606 C	*    STICS DATA			               *
	   1607 C	************************************************
	   1608 
	   1609 C    pha word - dissected:
	   1610       INTEGER*4 START_ID_RANGE,
	   1611      .          STOP_ID,
	   1612      .          ENERGY,
	   1613      .          SECTOR,
	   1614      .          SSD_ID,
	   1615      .          TIME_OF_FLIGHT,
	   1616      .          PSTART,
	   1617      .          RANGE
	   1618 
	   1619 C  STICS rates
	   1620       INTEGER*4 WIND_DECOMPRESS			!function to return decompressed rates
	   1621       INTEGER*4 STICS_RATES(179)		!all the stics rates
	   1622       REAL*4    BASIC_RATE (0:31,1:8,0:2), 	!Basic rate arrays accumulated over entire data set
	   1623      .          BASIC_PHA(0:31,0:15,0:2), 	!Counters for pha falling within a basic rate domain
	   1624      .		BASIC_W(0:31,0:15,0:2),		!Basic rate weight factor weight factors
	   1625      .   	CORR_DATA(0:31,0:15,0:2,1:3),	!Data corrected by efficiency, BR norm, DVS hits
	   1626      .		DEADTIME_CORR(0:15),		!Sector accumulation deadtime
	   1627      .		DVS_HITS(0:31),			!Counts number of hits for each voltage step
	   1628      .   	RAW_COUNTS(0:31,0:15,0:2,1:3),	!Raw PHA data
	   1629      .          SECT_DATA_ENRG1(1:3,0:15), 	!Sectored flux for energy range 1
	   1630      .          SECT_DATA_ENRG2(1:3,0:15)	!Sectored flux for energy range 2
	   1631 
	   1632        REAL*4  EFF_CORR(0:31,1:30)	     !Efficiency correction by voltage step and ion
	   1633        REAL*4  EFF /1.0/, UNUSED_PHA
	   1634        INTEGER*4 ION_INDEX,			!Ion array index
	   1635      .           INTERVAL,               	!Number of Science Records for interval
	   1636      .		 SR_INTERVAL			!Boundary for Science Record interval
	   1637 
	   1638        INTEGER*4 FLUX_TYPE			!1 for omni-directional and 2 for parallel beam
	   1639        REAL*4 BETA/3.0/,			!Azimuthal acceptance angle
	   1640      .	      DELTA_T,				!Delta time
	   1641      .	      ENERGY_BANDWIDTH,	     		!energy bandwidth allowed 
	   1642      .        GEO_FAC,				!Geometric Factor
	   1643      .        SPIN_TIME/3.0/			!Spacecraft spin time = 3.0 secs
	   1644 
	   1645 
	   1646 C  	************************************************
	   1647 C	*    MASS derived Solar Wind values           *
	   1648 C	************************************************
	   1649 
	   1650        REAL*4  AVE_SPEED,		!Average solar wind speed
	   1651      .         BULK_SPEED,		!Solar wind speed
	   1652      .         BULK_UNCER,		!Uncertainty in solar wind speed from width
	   1653      .	       HIGH_SPEED,		!Highest valid speed encountered
	   1654      .	       LOW_SPEED,		!Lowest valid speed encountered

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  19
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   1655      .         SPEED_MEAN,		!Average speed over interval
	   1656      .         SPEED_HITS,		!Number of valid speed values in interval
	   1657      .	       SUM_SW_SPEED,
	   1658      .         SW_SPEED                 !chosen solar wind speed to check against                      
	   1659 
	   1660       INTEGER*4 BAD_BR/0/,		!Number of times Sum of BR < Sum PHA
	   1661      .		BAD_DVS/0/,		!Number of bad voltage steps
	   1662      .		BAD_SPEED/0/,		!Number of invalid speed values
	   1663      .		DPPS_STEP_MODE,		!DPPS stepping mode
	   1664      .		DVS_CHECK,		!-1 for invalid DVS
	   1665      .		ERR_SPD_FLAG,		!Error speed flag
	   1666      .		FIRSTSPEED/0/,		!Used to get speed at start time
	   1667      .		GOOD_BR/0/    		!Number of good basic rates
	   1668       CHARACTER*80 ERR_MESSAGE		!Message for invalid speed
	   1669 	
	   1670 C  	************************************************
	   1671 C	*	DUMMY and TEMPORARY VARIABLES          *
	   1672 C	************************************************
	   1673 
	   1674       CHARACTER*1 YORN			!yes or no answer
	   1675       INTEGER*4   I,II,J,JJ,KK,K,L,N,NN,MM,CNTR,ITEMP,ITEMP2
	   1676       INTEGER*4   INQ,INM, ISTEP
	   1677 
	   1678 C  	************************************************
	   1679 C	*	Getting SMS L1 data:                   *
	   1680 C	************************************************
	   1681 
	   1682       RECORD /CORE/ SCI
	   1683       RECORD /HDBstr/ HDB
	   1684       RECORD /ST_RATE/ STICS_RATE
	   1685       RECORD /ST_PHA/ STICS_PHA
	   1686       RECORD /T/ START, END, TIME_TO_USE, INT_START_TIME
	   1687       RECORD /MA_RATE/ MASS_RATE   ! receives data on rates from MASS sensor
	   1688       RECORD /MA_PHA/ MASS_PHA     ! receives data on tof's from the mass sensor
	   1689 
	   1690 
	   1691 C   **********************************************************
	   1692 C   *							     *
	   1693 C   *		USER PROMPTS	: input file		     *
	   1694 C   *				  table format		     *
	   1695 C   *				  data filtering	     *
	   1696 C   *				  times			     *
	   1697 C   *							     *
	   1698 C   **********************************************************
	   1699 
	   1700 C			FILE NAME PROMPTS
	   1701 C
	   1702 C Get input L1 filename
	   1703 C
	   1704       L1FILENAME = 'DATA_DIR:WI*L1*.DAT'
	   1705       CALL WIND_GET_FILENAME(L1FILENAME, STATUS)
	   1706       IF(STATUS.NE.1) THEN
	   1707 	WRITE (*,2) STATUS
	   1708     2   FORMAT(' FILE STATUS = ',I3)
	   1709         STOP
	   1710       ENDIF
	   1711 

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  20
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   1712 C
	   1713 C Prompt user for output filename
	   1714 C
	   1715       WRITE(6,*)'Enter name for output file or <RETURN> for default name'
	   1716       READ(5,'(A)') USERNAME1
	   1717 C
	   1718 C Prompt user for ion
	   1719 C
	   1720       WRITE(6,33)
	   1721   33  FORMAT(//,5X,'Which ion do you want from the following list:',//
	   1722      +	      10X, ' [1] H      [2] He2     [3] He1    [4] C6',/
	   1723      +        10X, ' [5] C5     [6] C4      [7] 07     [8] O6',/
	   1724      +        10X, ' [9] O1    [10] Ne8    [11] Mg10  [12] Mg8',/
	   1725      +        10X, '[13] Si12  [14] Si9    [15] Si8   [16] Fe16',/
	   1726      +        10X, '[17] Fe14  [18] Fe12   [19] Fe11  [20] Fe10',/
	   1727      +        10X, '[21] Fe9   [22] Fe8'//,
	   1728      +	       5X, 'Enter selection number:  ',$)
	   1729       READ(5,*)ION_CHOICE
	   1730       DO WHILE ((ION_CHOICE .LT. 1) .OR. (ION_CHOICE .GT. 22))
	   1731 	WRITE(6,*)'Invalid selection. Please select again'
	   1732 	READ(5,*)ION_CHOICE
	   1733       END DO
	   1734       WRITE(6,*)
	   1735       WRITE(6,*)
	   1736       WRITE(6,*)'    Selected ion => ',LABELS(ION_CHOICE)
	   1737 C
	   1738 C Prompt user for matrix resolution :  DPU DEFAULT VALUES are NM_MAX =  59
	   1739 C								NMIN = 0.5
	   1740 C								NMAX =  95
	   1741 C 
	   1742 
	   1743       USER_NM_MAX = -1	     !use DPU default
	   1744       USER_MMIN   = -1	     !use DPU default
	   1745       USER_MMAX   = -1       !use DPU default
	   1746       NM_MAX      = USER_NM_MAX
	   1747       MMIN        = USER_MMIN
	   1748       MMAX        = USER_MMAX
	   1749 
	   1750 C
	   1751 C Prompt user for matrix resolution :  DPU DEFAULT VALUES are NQ_MAX = 126
	   1752 C								NMIN = 0.9
	   1753 C								NMAX = 42
	   1754 
	   1755       USER_NQ_MAX  = -1   !use DPU default
	   1756       USER_MQMIN   = -1	  !use DPU default
	   1757       USER_MQMAX   = -1	  !use DPU default
	   1758       NQ_MAX       = USER_NQ_MAX
	   1759       MQMIN        = USER_MQMIN
	   1760       MQMAX        = USER_MQMAX
	   1761      
	   1762 C   ***********************************************************************
	   1763 C   *                    determine Nm, Nq coefficients                    *
	   1764 C   ***********************************************************************
	   1765 
	   1766        CALL USER_NMNQ_COEFF(USER_NQ_MAX,USER_MQMAX,USER_MQMIN,  !user input
	   1767      .                 USER_NM_MAX,USER_MMAX,USER_MMIN,
	   1768      .                 ELOW,EHIGH,TLOW,THIGH,      		!return values

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  21
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   1769      .                 NQ_MAX,MQMAX,MQMIN,
	   1770      .                 NM_MAX,MMAX ,MMIN,
	   1771      .                 RKM,RKQ,
	   1772      .                 AM,BM,C1_EQ,C2A_EQ,C2B_EQ,D1_EQ,D2_EQ,EMQ,
	   1773      .                 BK_C2, BK_MQ)
	   1774 
	   1775       DO INM = 0,200
	   1776          USER_NM_M(INM) = 0.
	   1777          IF(INM.GT.0.  .AND.  INM.LE.NM_MAX) THEN
	   1778             USER_NM_M(INM) = MMIN * RKM**(FLOAT(INM)-1.)	!lower bounds
	   1779 	    USER_NM_MID(INM) = 0.5* MMIN * (RKM**(FLOAT(INM)-1.) + RKM**FLOAT(INM)) !mid point
	   1780 	 ELSE IF (INM.EQ.0) THEN
	   1781 	    USER_NM_MID(INM) = 0.
	   1782 	 END IF
	   1783       END DO
	   1784 
	   1785       DO INQ = 0, 300
	   1786          USER_NQ_MPQ(INQ) = 0.
	   1787          IF(INQ.GT.0  .AND.  INQ.LE.NQ_MAX+1) THEN
	   1788            USER_NQ_MPQ(INQ) = MQMIN *RKQ**(FLOAT(INQ)-1.)
	   1789  	   USER_NQ_MID(INQ) = 0.5 * MQMIN *( RKQ**(FLOAT(INQ)-1.) + RKQ**FLOAT(INQ))
	   1790          ELSE IF (INQ.EQ.0) THEN
	   1791 	   USER_NQ_MID(INQ) = 0.5 * MQMIN
	   1792 	 ENDIF
	   1793       END DO
	   1794     
	   1795 C			DATA FILTER PROMPTS
	   1796 
	   1797 C
	   1798 C Prompt user for filtering
	   1799 C 
	   1800 C     Initialize default conditions
	   1801       DATA_FILTER = 0			!no data filtering
	   1802       DATA_FILTER_COINC = 0		!no filtering by m or m/q conditions
	   1803       DATA_FILTER_DVSTEP  = -1		!no filtering by e/q
	   1804       DATA_DVSTEP_MIN = 0			!min dv step = 0
	   1805       DATA_DVSTEP_MAX = 31			!max dv step = 31
	   1806       DATA_FILTER_RANGE = 0		!no filtering by range
	   1807       DATA_FILTER_RANGECHECK = 0 	!no filtering by range check
	   1808       SEL_RANGE(0) = .TRUE.			!accept range 0 events
	   1809       SEL_RANGE(1) = .TRUE.			!accept range 1 events
	   1810       SEL_RANGE(2) = .TRUE.			!accept range 2 events
	   1811       DATA_FILTER_MSPEED = -1        	!no check on MASS solar wind speed
	   1812       DATA_MSPEED_MAX    = 1000     		!max sw speed selection is 1000 km/sec
	   1813       DATA_MSPEED_MIN    = 240      		!min sw speed selection is 240 km/sec
	   1814 
	   1815 
	   1816         TYPE 6
	   1817     6   FORMAT(//,' Is data filtering by DATA TYPE desired? '
	   1818      .      /' (i.e.:  M,M/Q conditions, PHA Range, Solar Wind Speed)    [Y/N] '$)
	   1819         ACCEPT 7, YORN
	   1820     7   FORMAT (A)
	   1821         IF (YORN.EQ.'Y' .OR. YORN.EQ.'y') THEN
	   1822            DATA_FILTER = 1
	   1823 	   CALL USER_REQUESTS_DATA_TYPE(
	   1824      .           DATA_FILTER_COINC,
	   1825      .           DATA_FILTER_RANGE,

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  22
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   1826      .           SEL_RANGE, 
	   1827      .           DATA_FILTER_RANGECHECK,
	   1828      .           DATA_FILTER_MSPEED,
	   1829      .           DATA_MSPEED_MIN,
	   1830      .           DATA_MSPEED_MAX)
	   1831         ENDIF
	   1832 
	   1833       TYPE 9
	   1834    9  FORMAT(//,' Is the flux omni-directional(1) or a parallel beam(2):  ',$)
	   1835       ACCEPT*, FLUX_TYPE
	   1836       IF(FLUX_TYPE .EQ. 2) THEN
	   1837 	GEO_FAC = 0.50				!parallel beam Geo Fac for each telescope
	   1838 	DELTA_T = SPIN_TIME * BETA/360.0 	!time oberserving sun
	   1839       ELSE
	   1840 	GEO_FAC = 0.014				!isotropic Geo Fac for each telescope
	   1841 	DELTA_T = SPIN_TIME			!time per spin
	   1842       ENDIF
	   1843 
	   1844 C
	   1845 C			TIME PROMPTS
	   1846 C
	   1847 C Get Science Record Interval to average rates over
	   1848 C
	   1849       WRITE(6,*) 'ENTER SCIENCE RECORD INTERVAL (1 Sci Rec ~ 3mins)'
	   1850       READ(5,*) INTERVAL
	   1851 C
	   1852 C Get two voltage step ranges
	   1853 C 
	   1854       DVSTEP_MIN1 = 0
	   1855       DVSTEP_MAX1 = 11
	   1856       DVSTEP_MIN2 = 12
	   1857       DVSTEP_MAX2 = 30
	   1858       WRITE(6,*)'Current voltage step ranges are: 1) DVS 00-11   2) DVS 12-30'
	   1859       WRITE(6,*)'Would you like to change these values? (y/n)'
	   1860       READ(5,'(A1)') YORN
	   1861       IF (YORN .EQ. 'Y'  .OR. YORN .EQ. 'y') THEN
	   1862 	WRITE(6,*)'Enter minimum and maximum voltage step for energy range 1:'
	   1863         READ(5,*) DVSTEP_MIN1, DVSTEP_MAX1
	   1864 	WRITE(6,*)'Enter minimum and maximum voltage step for energy range 2:'
	   1865         READ(5,*) DVSTEP_MIN2, DVSTEP_MAX2
	   1866       ENDIF
	   1867  
	   1868 C
	   1869 C Prompt user for start and stop times
	   1870 C
	   1871       TYPE 11
	   1872   11  FORMAT(/' Enter Start time( -1/ = whole file) - ',/,
	   1873      .       ' Year,Month,Day,Hour,Min,Sec: '$) 
	   1874       ACCEPT*, START.YEAR,MONTH,DAYOFMONTH,START.HR,START.MIN,START.SEC
	   1875       IF(START.YEAR.GE.0)THEN
	   1876 C
	   1877 C Convert month and day to day of year.
	   1878 C
	   1879         CALL CNVRT_T_YRMONDAY_TO_YEARDAY( START, MONTH, DAYOFMONTH)
	   1880         IF(START.YEAR.LT.100)START.YEAR=START.YEAR+1900        ! Allow for 2-digit years
	   1881         IF(START.YEAR.LT.1980)START.YEAR=START.YEAR+100        ! Allow for years beyond 1999
	   1882         TYPE 12

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  23
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   1883   12    FORMAT(' Enter End time - ',/,
	   1884      .         ' Year,Month,Day,Hour,Min,Sec: '$) 
	   1885         ACCEPT*, END.YEAR,ENDMONTH,ENDDAYOFMONTH,END.HR,END.MIN,END.SEC
	   1886 C
	   1887 C Convert month and day to day of year.
	   1888 C
	   1889         CALL CNVRT_T_YRMONDAY_TO_YEARDAY( END, ENDMONTH, ENDDAYOFMONTH)
	   1890         IF(END.YEAR.LT.100)END.YEAR=END.YEAR+1900        ! Allow for 2-digit years
	   1891         IF(END.YEAR.LT.1980)END.YEAR=END.YEAR+100        ! Allow for years beyond 1999
	   1892       ELSE
	   1893         END.YEAR=3000
	   1894       ENDIF
	   1895 
	   1896 C   **********************************************************
	   1897 C   *							     *
	   1898 C   *		INITIALIZATION				     *
	   1899 C   *							     *
	   1900 C   **********************************************************
	   1901 
	   1902 C Set time format to "wall" time (=0).  For flight data, s/c clock
	   1903 C and wall clock should be equivalent
	   1904 
	   1905        USE_SC_CLOCK = 0
	   1906 
	   1907        HIGH_SPEED = 0
	   1908        LOW_SPEED = 2000
	   1909        FIRSTFILE = .TRUE.
	   1910        FIRST_TIME = .TRUE.
	   1911 
	   1912        DO I = 0,31					!voltage step
	   1913 	  DPU_EPQ(I) = 6.190722 * (1.1225857**I)
	   1914        END DO
	   1915 
	   1916        CALL OMR_EFF(EFF_CORR)		!Get efficiency correction factors
	   1917 
	   1918 C
	   1919 C At the start of sectors 1-15 there is a 12 ms deadtime during which no data is accumulated.
	   1920 C The deadtime for sector 0 is 100 ms. Time for each sector = Spin Period/16. For nominal
	   1921 C spin period of 3 secs, each sector time = 0.1875 sec. Therefore, deadtime corrections are:
	   1922 C      	Sector 0    = 0.1875/(0.1875 - 0.100) = 2.143
	   1923 C       Sector 1-15 = 0.1875/(0.1875 - 0.012) = 1.068
	   1924 C
	   1925        DEADTIME_CORR(0) = 2.143
	   1926        DO I = 1,15
	   1927          DEADTIME_CORR(I) = 1.068
	   1928        END DO
	   1929 
	   1930 C   get dpu default values for mass, mq, e/q, etc calculations -
	   1931 C   used here for header information only
	   1932 
	   1933        CALL DPU_DEFAULT_COEFF
	   1934      .                (DPU_NQ_MAX,DPU_MQMAX,DPU_MQMIN,
	   1935      .                 DPU_NM_MAX,DPU_MMAX,DPU_MMIN,
	   1936      .                 DPU_ELOW, DPU_EHIGH,DPU_TLOW,DPU_THIGH,
	   1937      .                 DPU_AM,DPU_BM,DPU_C1_EQ,DPU_C2A_EQ,
	   1938      .                 DPU_C2B_EQ,DPU_D1_EQ,DPU_D2_EQ,
	   1939      .                 DPU_EMQ,DPU_BK_C2,DPU_BK_MQ,DPU_KM,

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  24
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   1940      .                 DPU_KQ, DPU_NM_M, DPU_NQ_MPQ)
	   1941 
	   1942 C   **********************************************************
	   1943 C   *							     *
	   1944 C   *			CREATE OUTPUT FILE NAME		     *
	   1945 C   *                        either DEFAULT or		     *
	   1946 C   *                               USER DEFINED             *
	   1947 C   *							     *
	   1948 C   **********************************************************
	   1949 C
	   1950 C   Strip the extension off of the input file name so
	   1951 C   that we can give a new extension to the output file
	   1952 C
	   1953       NINDEX  = 80
	   1954       DO WHILE (L1FILENAME(NINDEX:NINDEX) .NE. '_')
	   1955          NINDEX = NINDEX - 1
	   1956       END DO
	   1957 C
	   1958 C   Find out if the input file name contains some directory
	   1959 C   designation.  This, if it exists, it will also be stripped off.
	   1960 C
	   1961       I = 1
	   1962       DO WHILE (.NOT. BRACK .AND. I .LT. NINDEX)
	   1963          IF (L1FILENAME(I:I) .EQ. '[') BRACK = .TRUE.
	   1964          I = I + 1
	   1965       END DO
	   1966 C
	   1967 C   Now, finally, load the input file name into the output
	   1968 C   file name and add proper extension.  Format of input
	   1969 C   file is SMSDISK3:[WIND.L1DATA]WI_L1_SMS_YYYYMMDD_Vxx.DAT
	   1970 C   Write over all but the _YYYYMMDD_ part.
	   1971 C
	   1972       JSAVE = 1
	   1973       DO 3 I = 1, NINDEX
	   1974          IF (BRACK) THEN
	   1975             IF (L1FILENAME(I:I) .EQ. ']') BRACK = .FALSE.
	   1976          ELSE
	   1977             LISFIL1(JSAVE:JSAVE) = L1FILENAME(I:I)
	   1978             JSAVE = JSAVE + 1
	   1979          ENDIF
	   1980    3  CONTINUE
	   1981       LISFIL1(1:9) = 'TREND_PHA'
	   1982       LISFIL2 = LISFIL1
	   1983       LISFIL1(JSAVE:JSAVE+7) = 'FLX.'//LABELS(ION_CHOICE)     
	   1984       LISFIL2(JSAVE:JSAVE+7) = 'ERR.DAT'
	   1985 
	   1986       OUTFILENAME2 = LISFIL2
	   1987       IF(USERNAME1(1:12) .NE. '            ') THEN
	   1988         OUTFILENAME1 = USERNAME1
	   1989       ELSE
	   1990         OUTFILENAME1 = LISFIL1 				! default matrix filename
	   1991       ENDIF      
	   1992       
	   1993 
	   1994 
	   1995       
	   1996 C   **********************************************************

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  25
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   1997 C   *							     *
	   1998 C   *			OPEN L1 INPUT FILE 		     *
	   1999 C   *			READ DATA			     *
	   2000 C   *							     *
	   2001 C   **********************************************************
	   2002 
	   2003 C
	   2004 C Open L1 file for input, and read first SR, Core, HDB, and STICS_RATES
	   2005 C
	   2006  1000 CONTINUE
	   2007       IF (FIRSTFILE .EQ. .FALSE.) THEN
	   2008         IFILE = IFILE + 1
	   2009 	OPENMODE = 1
	   2010 	CALL WIND_L1_OPEN_NEXT(L1_LUN,OPENMODE,L1FILENAME,L1_FILE_HEADER,STATUS)
	   2011       ELSE
	   2012         IFILE = 1
	   2013         FIRSTFILE = .FALSE.
	   2014         CALL WIND_L1_OPEN( L1_LUN, L1FILENAME, L1_FILE_HEADER, STATUS)
	   2015       ENDIF
	   2016       IF (STATUS .NE. 1) GOTO 9010
	   2017 
	   2018       INQUIRE(FILE=L1FILENAME,NAME=FULL_L1_NAME)
	   2019       INPUTFILES(IFILE) = FULL_L1_NAME
	   2020       WRITE(6,1001) FULL_L1_NAME
	   2021  1001 FORMAT(' OPEN FILE ',A)
	   2022   
	   2023       NAMELEN = INDEX(FULL_L1_NAME,' ') - 1
	   2024       IF (NAMELEN .LT. 1) NAMELEN=LEN(FULL_L1_NAME)
	   2025 
	   2026   13  CALL WIND_L1_READ_SR( L1_LUN, CNTR, L1_SR_HEADER, STATUS )
	   2027       IF(STATUS.EQ.RMS$_EOF)GO TO 1990
	   2028       IF (STATUS .NE. 1) GOTO 9020
	   2029       CALL WIND_L1_GET_BASIC( L1_LUN, SCI, STATUS)
	   2030       IF (STATUS .NE. 1) GOTO 9030
	   2031       CALL WIND_L1_GET_HDB( L1_LUN, HDB, STATUS)
	   2032       IF (STATUS .NE. 1) GOTO 9050
	   2033       CALL WIND_L1_GET_STICS( L1_LUN, STICS_RATE, STICS_PHA, STATUS )
	   2034       IF (STATUS .NE. 1) GOTO 9080
	   2035 C
	   2036 C Find first good spin, get year and DOY from it.
	   2037 C
	   2038       N=0
	   2039       GOODSPIN=.FALSE.
	   2040       DO 14 WHILE(.NOT.GOODSPIN)
	   2041         K=N/32+1
	   2042         NN=MOD(N,32)
	   2043         GOODSPIN=BTEST(L1_SR_HEADER.PRESENT(K),NN)
	   2044         N=N+1
	   2045         IF(N.GT.59)GOTO 13 ! This SCI-REC all bad; get next
	   2046   14  CONTINUE
	   2047 C
	   2048 C If low bitrate, make sure that N points to an even spin (odd spins 
	   2049 C have been emptied by concatenation).
	   2050 C If high bitrate, decrement because N was incremented after the 1st 
	   2051 C good spin was found.
	   2052 C
	   2053       IF(.NOT.SCI.EDB(N).BITRATE)THEN

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  26
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2054         N=N+MOD(N,2)
	   2055         IF(N.GE.60)GOTO 13   ! This SCI-REC all bad; get next 
	   2056       ELSE
	   2057         N=N-1
	   2058       ENDIF
	   2059 C
	   2060 C Check FIFO mode, telemetry mode, TGS mode, and trigger mode; place info in header.
	   2061 C
	   2062       ITEMP = HDB.BDH.DAT(221)
	   2063       IF(IBITS(ITEMP,7,1).EQ.1)THEN
	   2064         FIFO='ON '
	   2065       ELSE
	   2066         FIFO='OFF'
	   2067       ENDIF
	   2068 C  
	   2069       ITEMP = SCI.EDB(N).TLM_Mode
	   2070       IF(ITEMP.EQ.0)ITEMP=10
	   2071       IF(ITEMP.EQ.128)ITEMP=9
	   2072       IF(ITEMP.EQ.256)ITEMP=10
	   2073       MODE_AT_START = MODE(ITEMP)
	   2074 C
	   2075       ITEMP = STICS_RATE.EDB(N).RATE(179)
	   2076       IF(IBITS(ITEMP,7,1).EQ.1)THEN
	   2077         TGS='ON '
	   2078       ELSE
	   2079         TGS='OFF'
	   2080       ENDIF
	   2081 C
	   2082       ITEMP = HDB.BDH.DAT(25)
	   2083       TRIGGER_MODE_CODE = IBITS(ITEMP,1,3)
	   2084 C
	   2085 c Get S/C position at beginning of time period
	   2086 c
	   2087       X1_GSE = L1_SR_HEADER.GSE_POS.X/6380.0 
	   2088       Y1_GSE = L1_SR_HEADER.GSE_POS.Y/6380.0 
	   2089       Z1_GSE = L1_SR_HEADER.GSE_POS.Z/6380.0 
	   2090       WRITE(6,*)X1_GSE,Y1_GSE,Z1_GSE
	   2091 
	   2092 
	   2093 C   **********************************************************
	   2094 C   *							     *
	   2095 C   *			OPEN OUTPUT FILES		     *
	   2096 C   *			WRITE HEADER			     *
	   2097 C   *							     *
	   2098 C   **********************************************************
	   2099 C
	   2100 	RONOFF = 'OFF'					!some info on user input
	   2101         IF(DATA_FILTER_RANGECHECK.EQ.1) RONOFF = ' ON'
	   2102         TONOFF = ' ON'
	   2103 C
	   2104 C Open  output files
	   2105 C
	   2106        IF(IFILE.EQ.1) THEN
	   2107 	   OPEN(UNIT= 55, NAME= OUTFILENAME1, FORM='FORMATTED', 
	   2108      &     TYPE='NEW', RECL=400)
	   2109 
	   2110 	   OPEN(UNIT= 56, NAME= OUTFILENAME2, FORM='FORMATTED', 

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  27
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2111      &     TYPE='NEW', RECL=400)
	   2112 
	   2113 	   CALL TIME(RUN_TIME)			!Get run time
	   2114 	   CALL DATE(RUN_DATE)			!Get run date
	   2115 
	   2116            WRITE(55,'(A)') '  STICS SECTORED FLUX FOR '//LABELS(ION_CHOICE)
	   2117  	   WRITE(55,'(A)') ' ============================='
	   2118 	   WRITE(55,'(A,I2)') '  Ion Number = ',ION_CHOICE
	   2119 	   WRITE(55,'(A)') '  Run time  '//RUN_TIME//'   '//RUN_DATE
	   2120 	   WRITE(55,'(A,I5,A)') '  Flux Type:',FLUX_TYPE, ' (1=omni-directional, 2=parallel beam)'
	   2121            WRITE(55,17) OUTFILENAME1
	   2122   	   WRITE(55,16) FULL_L1_NAME	   
	   2123 	   WRITE(56,'(A,A27)')' Errors found while generating the file : ',OUTFILENAME1
	   2124 	   WRITE(56,*)'  Run time  '//RUN_TIME//'   '//RUN_DATE  
	   2125 	   WRITE(56,*)
	   2126 	   WRITE(56,*)' DOY:HR:MN:SEC                  COMMENTS'
	   2127 
	   2128            WRITE(55,18) 'Wall',TRIGGER_MODE(TRIGGER_MODE_CODE),FIFO,TGS,MODE_AT_START 
	   2129                        
	   2130            WRITE(55,19)DATA_DVSTEP_MIN, DATA_DVSTEP_MAX,COINC(DATA_FILTER_COINC),
	   2131      .              RANGESEL(DATA_FILTER_RANGE),
	   2132      .              RONOFF,DATA_MSPEED_MIN,DATA_MSPEED_MAX,TONOFF,
	   2133      .              START.YEAR,MONTH, DAYOFMONTH,START.HR,START.MIN,START.SEC,
	   2134      .              END.YEAR,ENDMONTH,ENDDAYOFMONTH,END.HR,END.MIN,END.SEC
	   2135 
	   2136 	   WRITE(55,945) DVSTEP_MIN1, DVSTEP_MAX1, DPU_EPQ(DVSTEP_MIN1), DPU_EPQ(DVSTEP_MAX1),
	   2137      .			  DVSTEP_MIN2, DVSTEP_MAX2, DPU_EPQ(DVSTEP_MIN2), DPU_EPQ(DVSTEP_MAX2)
	   2138  945	   FORMAT(1X,' DVS RANGES USED: 1) ',I2.2,' - ',I2.2,' (',F5.1,' - ',F5.1,'keV/e)',
	   2139      .               /,19X,'2) ',I2.2,' - ',I2.2,' (',F5.1,' - ',F5.1,'keV/e)',/)
	   2140       	   WRITE(55,950)(I,I=0,15)		!Write labels to header
	   2141  950       FORMAT(1X,' For each time interval, lines 1&2 corresponds to DVS ranges 1&2,'/,
	   2142      .            1X,' respectively, for telescope 1.  Similarly, lines 3&4 are for telescope 2,',/
	   2143      .            1X,' and lines 5&6 are for telescope 3.',//,
	   2144      .            1X,' Interval Start Time  ',T40,'SECTORS',/,1X,' YEAR DOY:HR:MN:SC   SPEED   ',
	   2145      .               16(5X,I2,5X))
	   2146 
	   2147        ENDIF		!first input file
	   2148 
	   2149 C    format statements for headers:
	   2150 
	   2151   16    FORMAT('  ',T10,'Input Level 1 Filename: ',A)
	   2152   17    FORMAT(T3 ,'Output Filename: ',A27)
	   2153   18    FORMAT(T3,'Clock selected: ',A,5X,'Trigger mode is ',A22,/,
	   2154      .         T3,'FIFO mode is ',A3,9X,'TGS  mode is ',A3,/,
	   2155      .         T3,'Telemetry mode is ',A17,/)
	   2156 
	   2157   19     FORMAT(T3,'FILTERING CHOICES:', /,
	   2158      .              T11,'Voltage step selection =  ', I2, ' to ' ,I2,/,
	   2159      .              T11,'Event type selection   =',A10,/,
	   2160      .              T11,'Range selection        =     ',A5,/,
	   2161      .              T11,'Range checking is ',A3,/,
	   2162      .		    T11,'Velocity range         = ',I4,' to ',I6,//,   
	   2163      .              T11,'Telescope checking is ',A3,//,
	   2164      .              T3,'Start Time:  ',I4,I2.2,I2.2,2X,I2.2,2(':',I2.2),5X,
	   2165      .              'End Time:  ',I4,I2.2,I2.2,2X,I2.2,2(':',I2.2))
	   2166 
	   2167 

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  28
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2168 
	   2169 C
	   2170 C Initialize arrays to 0
	   2171 C
	   2172   50   SUM_SW_SPEED = 0
	   2173        SPEED_HITS = 0
	   2174 
	   2175        DO I = 0,31
	   2176 	 DO J = 0,15
	   2177 	   DO K = 0,2
	   2178              BASIC_PHA(I,J,K) = 0
	   2179 	     BASIC_W(I,J,K) = 0
	   2180       	   END DO
	   2181 	 END DO
	   2182        END DO
	   2183 
	   2184        DO I = 0,31
	   2185 	 DO J = 1,8
	   2186 	   DO K = 0,2
	   2187              BASIC_RATE(I,J,K) = 0
	   2188       	   END DO
	   2189 	 END DO
	   2190        END DO
	   2191  
	   2192        DO L=1,3					!Telescope
	   2193          DO J= 0,15
	   2194 	   SECT_DATA_ENRG1(L,J) =0
	   2195 	   SECT_DATA_ENRG2(L,J) =0
	   2196            DO I = 0,31					!voltage step
	   2197              DVS_HITS(I) = 0
	   2198 	     DO K = 0,2				!range
	   2199                RAW_COUNTS(I,J,K,L) = 0
	   2200 	       CORR_DATA(I,J,K,L) = 0
	   2201  	     END DO
	   2202 	   END DO
	   2203 	 END DO
	   2204        END DO
	   2205 
	   2206 C
	   2207 C Set Sci Rec boundary
	   2208 C
	   2209       SR_INTERVAL = L1_SR_HEADER.SR_COUNT + INTERVAL
	   2210 
	   2211 
	   2212 C     ***************************************************
	   2213 C     *		Get the Basic Core data			*
	   2214 C     ***************************************************
	   2215 C
	   2216  100  CALL WIND_L1_GET_BASIC( L1_LUN, SCI, STATUS)
	   2217       IF (STATUS .NE. 1) GOTO 9030
	   2218 C
	   2219 C Get Housekeeping Data Block
	   2220 C
	   2221       CALL WIND_L1_GET_HDB( L1_LUN, HDB, STATUS)
	   2222       IF (STATUS .NE. 1) GOTO 9050
	   2223 C
	   2224 C Get STICS rates and PHA

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  29
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2225 C
	   2226       CALL WIND_L1_GET_STICS( L1_LUN, STICS_RATE, STICS_PHA, STATUS )
	   2227       IF (STATUS .NE. 1) GOTO 9080
	   2228 
	   2229 C Get bitrate of 1st good spin.  At HBR, there is data in every spin;
	   2230 C At LBR there is data only in even-numbered spins.
	   2231 
	   2232       BITRATE = SCI.EDB(N).BITRATE
	   2233       IF(BITRATE)THEN
	   2234         INCREMENT = 1
	   2235       ELSE
	   2236         INCREMENT = 2
	   2237       ENDIF
	   2238 C
	   2239 C Set flags for start and stop
	   2240       STARTFOUND=.FALSE.
	   2241       ENDFOUND=.FALSE.
	   2242 C
	   2243 C For Bad HDB skip entire Science Record
	   2244 C
	   2245       IF(HDB.Qual .NE. 0) THEN
	   2246         BAD_HDB = BAD_HDB + 1
	   2247         WRITE(56,150) TIME_TO_USE.DOY, TIME_TO_USE.HR,TIME_TO_USE.MIN,TIME_TO_USE.SEC
	   2248  150    FORMAT(1X,I4.3,3(':',I2.2),3X, 'Bad HDB found')
	   2249 	GOTO 800
	   2250       ENDIF
	   2251 C
	   2252 C Output STICS PHA one science record.
	   2253 C
	   2254       DO 800 J=0,59,INCREMENT		!0-59 spins
	   2255         TIME_TO_USE = SCI.EDB(J).W_TIME
	   2256 C
	   2257 C Compare time read to start time. If the time read is greater than or equal to the user-
	   2258 C specified start time, then begin processing data.
	   2259 C
	   2260         IF(.NOT.STARTFOUND)THEN
	   2261           STARTFOUND=COMPARE_TIME_GE(TIME_TO_USE,START)
	   2262         ENDIF
	   2263         IF(STARTFOUND)THEN
	   2264 C
	   2265 C Compare time read to end time. If time read is greater than the user-specified end time, 
	   2266 C we're done. Go to the part of the code that closes files and STOP's program.
	   2267 C
	   2268           ENDFOUND=COMPARE_TIME_GE(TIME_TO_USE,END)
	   2269           IF(ENDFOUND)GO TO 907
	   2270 
	   2271 C
	   2272 C Get start time for first interval
	   2273 C
	   2274 	  IF (FIRST_TIME) THEN
	   2275 	    INT_START_TIME = TIME_TO_USE
	   2276 	    FIRST_TIME = .FALSE.
	   2277       	    SR_INTERVAL = L1_SR_HEADER.SR_COUNT + INTERVAL
	   2278 	  ENDIF
	   2279 
	   2280 C
	   2281 C Check quality flags. If PHA, BR, or overall quality flags are bad, skip this spin

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  30
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2282 C
	   2283           IF(BITRATE)THEN
	   2284             IF(SCI.EDB(J).Qual.NE.0)GOTO 800
	   2285           ELSE
	   2286             IF((SCI.EDB(J).Qual.NE.0).OR.(SCI.EDB(J+1).Qual.NE.0))GOTO 800
	   2287           ENDIF
	   2288           IF(SCI.EDB(J).ST_BR_Qual.NE.0)GOTO 800
	   2289           IF(SCI.EDB(J).ST_P_Qual.NE.0)GOTO 800
	   2290 C
	   2291 C Get MASS Speed at start time and at the beginning of every Sci Record.
	   2292 C 
	   2293 	  IF((J .EQ. 0) .OR. (FIRSTSPEED .EQ. 0)) THEN
	   2294             CALL WIND_L1_GET_MASS(L1_LUN,MASS_RATE,MASS_PHA,STATUS)   ! mass data
	   2295             IF (STATUS .NE. 1) GOTO 9085
	   2296 
	   2297       	    CALL SMS_MASS_SPEED(HDB, MASS_RATE,  	!input
	   2298      .         BULK_SPEED, BULK_UNCER, ERR_SPD_FLAG , ERR_MESSAGE)	!output
	   2299 
	   2300             IF((ERR_SPD_FLAG .EQ. 0) .AND. (BULK_UNCER .GT. 0) .AND. (BULK_UNCER .LT. 150.0)) THEN
	   2301 	      SW_SPEED = BULK_SPEED
	   2302             ELSE
	   2303 	      BAD_SPEED = BAD_SPEED + 1
	   2304 	      WRITE(56,151)TIME_TO_USE.DOY,TIME_TO_USE.HR,TIME_TO_USE.MIN,TIME_TO_USE.SEC,
	   2305      .                     BULK_SPEED,BULK_UNCER,ERR_MESSAGE
	   2306  151	      FORMAT(1X,I4.3,3(':',I2.2),3X,'Invalid speed encountered:  ',
	   2307      .               F10.1,' +/- ',F10.1,' km/s',/,16X,A) 
	   2308 	      SW_SPEED = 0
	   2309 C	      GOTO 800
	   2310             ENDIF
	   2311 	      
	   2312 	  ENDIF
	   2313 
	   2314   	  FIRSTSPEED = -1		!Change after giving 1st valid speed
	   2315 
	   2316 
	   2317 C
	   2318 C Get dpps enable information, voltage step, and default value of e/q. 
	   2319 C
	   2320           ITEMP =HDB.BDH.DAT(24)
	   2321           ITEMP2=HDB.BDH.DAT(25)
	   2322 	  DPPSPLUS  = IBITS(ITEMP,7,1)
	   2323           DPPSMINUS = IBITS(ITEMP2,0,1) 
	   2324 
	   2325           ITEMP = STICS_RATE.EDB(J).RATE(179)
	   2326           DVSTEP = IBITS(ITEMP,0,5)
	   2327 C
	   2328 C Check for valid voltage step
	   2329 C
	   2330       	  ITEMP = HDB.BDH.DAT(25)
	   2331       	  DPPS_STEP_MODE = IBITS(ITEMP,6,2)			!Get stepping mode
	   2332 
	   2333 	  CALL VOLTAGE_CHECK(DPPS_STEP_MODE, J, BITRATE, DVSTEP, DVS_CHECK)
	   2334 	  IF (DVS_CHECK .EQ. -1) THEN
	   2335      	    BAD_DVS = BAD_DVS + 1
	   2336 	    WRITE(56,153) TIME_TO_USE.DOY,TIME_TO_USE.HR,TIME_TO_USE.MIN,TIME_TO_USE.SEC,
	   2337      .      		  J, DPPS_STEP_MODE, DVSTEP
	   2338  153	    FORMAT(1X,I4.3,3(':',I2.2),3X,'Spin # = ',I2,'  Step Mode = ',I2,'   DVS = ',I2)

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  31
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2339 	  ENDIF
	   2340 
	   2341 C Check voltage step filter and solar wind speed filter
	   2342 
	   2343           IF ( (DVSTEP.GE.DATA_DVSTEP_MIN) .AND.
	   2344      .         (DVSTEP.LE.DATA_DVSTEP_MAX) .AND.
	   2345 		
	   2346      .         ( (DATA_FILTER_MSPEED .LT. 0) .OR. 
	   2347      .           ((SW_SPEED.GE.DATA_MSPEED_MIN) .AND.
	   2348      .            (SW_SPEED.LE.DATA_MSPEED_MAX)) )   ) THEN
	   2349 
	   2350 C
	   2351 C Get info for determining speed statistics
	   2352 C
	   2353             IF(SW_SPEED .GE. DATA_MSPEED_MIN .AND. SW_SPEED .LE. DATA_MSPEED_MAX) THEN
	   2354 	      IF(SW_SPEED .LT. LOW_SPEED) LOW_SPEED = SW_SPEED
	   2355 	      IF(SW_SPEED .GT. HIGH_SPEED) HIGH_SPEED = SW_SPEED
	   2356               SPEED_HITS = SPEED_HITS +1.0
	   2357               SUM_SW_SPEED = SUM_SW_SPEED + SW_SPEED
	   2358 	    ENDIF
	   2359 C
	   2360 C If HDB flag is bad, calculate e/q as if both DPPS plates are ON
	   2361 C
	   2362 	   IF(HDB.Qual .NE. 0) THEN
	   2363 		DPPSMINUS = 1
	   2364 		DPPSPLUS  = 1 
	   2365                 DPU_E_OVER_Q = 6.190722 * (1.1225857**DVSTEP)
	   2366 	   ELSE
	   2367   	        CALL DPU_EQ(DPPSPLUS,DPPSMINUS,DVSTEP,DPU_E_OVER_Q)
	   2368            ENDIF
	   2369 C
	   2370 C Get bit rate
	   2371 C
	   2372            IF(SCI.EDB(J).BITRATE)THEN
	   2373                RATEFLAG='H'                ! High bit rate
	   2374            ELSEIF(TIME_TO_USE.YEAR.NE.0)THEN
	   2375                RATEFLAG='L'                ! Low bit rate
	   2376            ELSE
	   2377                RATEFLAG='?'                ! Bit rate indeterminate, due to bad quality data
	   2378            ENDIF
	   2379 
	   2380 C
	   2381 C Count number of spins for which each voltage step was used 
	   2382 C
	   2383            IF(RATEFLAG .EQ. 'H')THEN
	   2384 	       DVS_HITS(DVSTEP) = DVS_HITS(DVSTEP) + 1.0
	   2385 	   ELSE
	   2386 	       DVS_HITS(DVSTEP) = DVS_HITS(DVSTEP) + 2.0
	   2387 	   ENDIF
	   2388 
	   2389 C	*************************************************
	   2390 C       *						*
	   2391 C	*	Determine BR weighting factor   	*
	   2392 C	*						*
	   2393 C	*************************************************
	   2394 
	   2395 	   ITEMP = HDB.BDH.DAT(189)		      !rate compression codes

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  32
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2396            CODE_C1 = BTEST(ITEMP,1)
	   2397            CODE_C2 = BTEST(ITEMP,2)
	   2398 
	   2399 	   ITEMP = STICS_RATE.EDB(J).RATE(179)       !if TGS off, then there 
	   2400 	   IF (IBITS (ITEMP,7,1) .EQ. 1) THEN	      !also Fe matrix rates available
	   2401 	        TGS = 'ON'
	   2402 	   ELSE
	   2403 		TGS = 'OFF'
	   2404 	   ENDIF
	   2405 
	   2406 C	   ***** get the PHA COUNT in each basic rate  ******
	   2407 C Look through all the pha for this voltage step, and determine the count in 
	   2408 C each basic rate region and sector
	   2409 
	   2410            DO I = 0, (SCI.EDB(J).STICS_Len-1) * 4, 4
	   2411               CALL DISSECT_STICS_PHA(STICS_PHA.EDB(J).PHA(I),
	   2412      .                      STOP_ID,START_ID_RANGE,ENERGY,SECTOR,
	   2413      .                      SSD_ID,TIME_OF_FLIGHT,PSTART,RANGE)
	   2414 
	   2415               BASIC_PHA(DVSTEP,SECTOR,RANGE) = BASIC_PHA(DVSTEP,SECTOR,RANGE) + 1.0
	   2416            END DO
	   2417 
	   2418 
	   2419 C		***** get the Basic Rates  ******
	   2420 
	   2421 	   DO 220 II=120,143			!these are the basic rates
	   2422 	      STICS_RATES(II+1) = WIND_DECOMPRESS(STICS_RATE.EDB(J).RATE(II),CODE_C1)
	   2423  220       CONTINUE
	   2424 
	   2425 C Get out basic rates for ranges R0, R1, R2. Each range has 8 Basic Rate bins, as cosecutive
	   2426 C sectors are added together, e.g., bin1=sector0+1, bin2=sector2+3,...
	   2427 
	   2428 	   DO 230 II=0,2	!range
	   2429              DO MM = 1,8   	!8 sectors
	   2430 		BASIC_RATE(DVSTEP,MM,II) = BASIC_RATE(DVSTEP,MM,II) + STICS_RATES(120+II*8+MM)
	   2431              END DO	!over sectors
	   2432  230       CONTINUE	!end do over range
	   2433 
	   2434 C
	   2435 C Do loop for all STICS PHA words in this voltage step
	   2436 C
	   2437            DO 300 I=0, (SCI.EDB(J).STICS_Len-1) * 4, 4
	   2438 C
	   2439 C Get parts of PHA word
	   2440 C
	   2441               CALL DISSECT_STICS_PHA(STICS_PHA.EDB(J).PHA(I),
	   2442      .                      STOP_ID,START_ID_RANGE,ENERGY,SECTOR,
	   2443      .                      SSD_ID,TIME_OF_FLIGHT,PSTART,RANGE)
	   2444 
	   2445 C check data quality on telescope consistency
	   2446               CALL TELESCOPE_ID (TIME_OF_FLIGHT,ENERGY,
	   2447      .            PSTART,STOP_ID,SSD_ID, TELE_IDENT, TELE_FLAG)
	   2448 C
	   2449 C Calculate Mass and M/Q using DPU algorithms
	   2450 C
	   2451               CALL MMPQ_DPU_WSTICS(DPPSPLUS,DPPSMINUS,DVSTEP,
	   2452      .                           ENERGY,TIME_OF_FLIGHT,

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  33
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2453      .                           DPU_MASS_OVER_Q,DPU_MASS,
	   2454      .                           DPU_NM,DPU_NQ,DPU_RANGE)
	   2455 	      IF (FIFO .EQ. 'ON ') DPU_RANGE = 2
	   2456 		
	   2457               CALL USER_NMNQ_PHA_BINNED(DPPSPLUS,DPPSMINUS,DVSTEP,  !pha event information
	   2458      .                    ENERGY,TIME_OF_FLIGHT,
	   2459      .                    NQ_MAX,MQMAX,MQMIN,    !information for binning
	   2460      .                    NM_MAX,MMAX, MMIN,
	   2461      .                    ELOW,EHIGH,TLOW,THIGH,      !return values
	   2462      .                    RKM,RKQ,
	   2463      .                    AM,BM,C1_EQ,C2A_EQ,C2B_EQ,D1_EQ,D2_EQ,EMQ,
	   2464      .                    BK_C2, BK_MQ,
	   2465      .                    PHA_NQ,PHA_NM)			!return information
	   2466 
	   2467               	                  
	   2468 	      IF ( (DATA_FILTER_RANGE.EQ.0)  .OR.
	   2469      .             (RANGE .EQ. 0 .AND. SEL_RANGE(0))  .OR.
	   2470      .             (RANGE .EQ. 1 .AND. SEL_RANGE(1))  .OR.
	   2471      .             (RANGE .EQ. 2 .AND. SEL_RANGE(2)) ) THEN
	   2472 
	   2473 	           IF ( (DATA_FILTER_COINC.EQ.0)  .OR. 
	   2474      .                (DATA_FILTER_COINC.EQ.1 .AND. DPU_MASS.EQ.0.)  .OR.
	   2475      .                (DATA_FILTER_COINC.EQ.2 .AND. DPU_MASS.GT.0.) ) THEN
	   2476 
	   2477 	                 IF ( 
	   2478      .                      (  DATA_FILTER_RANGECHECK.EQ.0 .OR.
	   2479      .                      (DATA_FILTER_RANGECHECK.EQ.1 .AND.	! range OK
	   2480      .                            RANGE.EQ.DPU_RANGE)  )
	   2481      .                      .AND. (TELE_FLAG.EQ.0)  ) THEN ! telescope OK
	   2482 C
	   2483 C Increment NQNM arrays
	   2484 C
	   2485 	                      IF (PHA_NQ.GE.0  .AND.  PHA_NM.GE.0) THEN
	   2486 	                         CALL ION_IDENTIFIER( USER_NM_MID(PHA_NM),USER_NQ_MID(PHA_NQ), 
	   2487      .				        SPECIES_MASS,SPECIES_CHARGE,ION_INDEX)
	   2488 				 IF(ION_INDEX.EQ.ION_CHOICE)
	   2489      .		                   RAW_COUNTS(DVSTEP,SECTOR,RANGE,TELE_IDENT) = 
	   2490      .					RAW_COUNTS(DVSTEP,SECTOR,RANGE,TELE_IDENT) + 1.0
	   2491                               ENDIF
	   2492                          ENDIF     !check range and/or telescope conditions
	   2493                    ENDIF	!data_filtering by coincidence conditions
	   2494               ENDIF     !data filtering by range
	   2495 
	   2496  300       CONTINUE		!end pha for this given voltage step
	   2497 
	   2498           ENDIF   ! data within user selected voltage step range
	   2499 
	   2500         ENDIF     ! data within user selected time
	   2501 
	   2502  800  CONTINUE
	   2503 
	   2504 C
	   2505 C Read next Science Record
	   2506 C
	   2507  905  CALL WIND_L1_READ_SR( L1_LUN, CNTR, L1_SR_HEADER, STATUS )
	   2508 
	   2509       IF (.NOT. STARTFOUND) GO TO 100

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  34
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2510 
	   2511       IF((ABS(L1_SR_HEADER.SR_COUNT - SR_INTERVAL) .GT. 500) .AND. (STATUS .NE. RMS$_EOF))
	   2512      +     GOTO 905   !In case of bad Sci Rec Num
	   2513 
	   2514 C
	   2515 C Average rates over interval. Average rates if END_TIME reached or at EOF.
	   2516 C
	   2517  907  IF((L1_SR_HEADER.SR_COUNT .GE. SR_INTERVAL) .OR.
	   2518      +   (ENDFOUND) .OR. (STATUS .EQ. RMS$_EOF))THEN
	   2519 C
	   2520 C Calculate mean speed
	   2521 C
	   2522 	IF(SPEED_HITS .GT. 0) THEN
	   2523       	  SPEED_MEAN  = SUM_SW_SPEED/SPEED_HITS
	   2524 	ELSE
	   2525 	  SPEED_MEAN  = 0
	   2526 	ENDIF
	   2527                  
	   2528 C
	   2529 C Calculate Basic Rate normalization factors. Divide Basic Rate bin by the sum of the 
	   2530 C corresponding two Basic_PHA sectors
	   2531 C
	   2532       	DO I = 0, 31
	   2533 	  DO K = 0,2
	   2534 	    DO J = 0,15,2
	   2535 	      IF(BASIC_PHA(I,J,K).GE.1.0 .OR. BASIC_PHA(I,J+1,K).GE.1.0)THEN
	   2536 	         BASIC_W(I,J,K) = BASIC_RATE(I,(J+2)/2,K)/(BASIC_PHA(I,J,K) + BASIC_PHA(I,J+1,K)) 
	   2537 	         IF(BASIC_W(I,J,K) .LT. 1.0) THEN		!for bad Basic Rate 
	   2538 C     .		   ( (BASIC_RATE(I,(J+2)/2,K) - (BASIC_PHA(I,J,K) + BASIC_PHA(I,J+1,K))) .GT. 50000.0)) THEN
	   2539 		   BASIC_W(I,J,K) = 1.0
	   2540 		   BAD_BR = BAD_BR + 1
	   2541 		   WRITE(56,250)TIME_TO_USE.DOY,TIME_TO_USE.HR,TIME_TO_USE.MIN,TIME_TO_USE.SEC,
	   2542      .			      J,J+1,BASIC_RATE(I,(J+2)/2,K),(BASIC_PHA(I,J,K) + BASIC_PHA(I,J+1,K))
	   2543  250		   FORMAT(1X,I4.3,3(':',I2.2),3X,'Sectors',I2,'+',I2,'  Basic Rate = ',F7.0,3X,
	   2544      .                       'Basic PHA = ', F7.0)
	   2545 	         ELSE
	   2546 		   GOOD_BR = GOOD_BR + 1
	   2547 	         ENDIF
	   2548 	      ELSE
	   2549 	         BASIC_W(I,J,K) = 1.0
	   2550 	      ENDIF
	   2551               BASIC_W(I,J+1,K) = BASIC_W(I,J,K)
	   2552 	    END DO
	   2553        	  END DO
	   2554         END DO
	   2555 C
	   2556 C Do Basic Rate normalization and efficiency correction 
	   2557 C
	   2558         DO I = 0, 31
	   2559           IF(DVS_HITS(I).EQ.0)DVS_HITS(I)=1.0
	   2560 	  DO J = 0,15
	   2561 	    DO K = 0,2
	   2562 	      DO L = 1,3
	   2563                 CORR_DATA(I,J,K,L) = RAW_COUNTS(I,J,K,L) * BASIC_W(I,J,K) * DEADTIME_CORR(J)
	   2564      .				   /(EFF_CORR(I,ION_CHOICE) * DVS_HITS(I) * GEO_FAC * DELTA_T)
	   2565 	      END DO
	   2566             END DO

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  35
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2567           END DO
	   2568         END DO	
	   2569 
	   2570 C			****************************
	   2571 C			*       SECTORED ARRAYS    *
	   2572 C			****************************
	   2573 C Sum over Basic Rates and voltage steps for different energy ranges.
	   2574 C
	   2575 	DO L = 1,3
	   2576 	  DO J = 0, 15
	   2577 	    DO K = 0,2
	   2578               DO I = DVSTEP_MIN1, DVSTEP_MAX1
	   2579 	         SECT_DATA_ENRG1(L,J) = SECT_DATA_ENRG1(L,J) + CORR_DATA(I,J,K,L)
	   2580 	      END DO
	   2581               DO II = DVSTEP_MIN2, DVSTEP_MAX2
	   2582 	         SECT_DATA_ENRG2(L,J) = SECT_DATA_ENRG2(L,J) + CORR_DATA(II,J,K,L)
	   2583 	      END DO
	   2584 	    END DO
	   2585      	  END DO
	   2586         END DO
	   2587 C
	   2588 C Write data to output file
	   2589 C 
	   2590 	WRITE(55,955)INT_START_TIME.YEAR, INT_START_TIME.DOY, INT_START_TIME.HR,
	   2591      .		     INT_START_TIME.MIN, INT_START_TIME.SEC,SPEED_MEAN,
	   2592      .               (SECT_DATA_ENRG1(1,J),J=0,15), (SECT_DATA_ENRG2(1,JJ),JJ=0,15)
	   2593  955    FORMAT(2X,I4,1X,I3,3(':',I2.2),2X,F7.1,2X,16(1X,1PE11.4),/,30X,16(1X,1PE11.4))
	   2594 
	   2595         DO L = 2, 3
	   2596 	  WRITE(55,956) (SECT_DATA_ENRG1(L,J),J=0,15), (SECT_DATA_ENRG2(L,JJ),JJ=0,15)
	   2597  956      FORMAT(30X,16(1X,1PE11.4),/,30X,16(1X,1PE11.4))
	   2598         END DO
	   2599 
	   2600 	INT_START_TIME = TIME_TO_USE		!Set Start time for next interval
	   2601 
	   2602 	IF(ENDFOUND) GOTO 2000
	   2603  	IF(STATUS.EQ.RMS$_EOF)GO TO 1990   	!If End-of-file
	   2604 
	   2605 	GOTO 50					!To re-initialize arrays for next interval
	   2606       ENDIF !{L1_SR_COUNT .GE. ....}
	   2607 
	   2608       IF (STATUS .NE. 1) GOTO 9020
	   2609 C
	   2610       GO TO 100
	   2611 C
	   2612 C Close files and STOP
	   2613 C
	   2614  1990  IF (START.YEAR .GE. 0) GO TO 1000
	   2615  2000  CALL WIND_L1_CLOSE( L1_LUN, STATUS )      ! Close input file
	   2616       IF (STATUS .NE. 1) GOTO 9090
	   2617 
	   2618 
	   2619 C
	   2620 C Write error information to screen and error file
	   2621 
	   2622       WRITE(6,*)'BAD HDBs = ', BAD_HDB
	   2623       WRITE(6,*)'BAD DVS  = ', BAD_DVS

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  36
                                                                21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2624       WRITE(6,*)'BAD BRs = ', BAD_BR, '   GOOD BRs = ', GOOD_BR
	   2625       WRITE(6,*)'BAD SPEEDS = ',BAD_SPEED
	   2626       WRITE(56,920) BAD_HDB, BAD_DVS, BAD_SPEED, BAD_BR,GOOD_BR
	   2627  920  FORMAT(//,1X,'Total Bad HDBs = ',I2,/,1X,'Total Invalid DVS = ',I3,/,
	   2628      .          1X,'Total Bad Speeds = ',I3,/,1X,'Total Bad Basic Rates = ',I4,
	   2629      .          5X,'Total Good Basic Rates = ', I10)
	   2630 
	   2631 C     ***********************************************************
	   2632 C     *								*
	   2633 C     *			CLOSE FILES				*
	   2634 C     ***********************************************************
	   2635 
	   2636       CLOSE(UNIT=55)				! Close flux file
	   2637       CLOSE(UNIT=56)                            ! Close ERROR file
	   2638 
	   2639       TYPE *,' OUTPUT FILE WRITTEN TO CURRENT DIRECTORY'
	   2640 
	   2641       STOP
	   2642 
	   2643 C
	   2644 C Come here for errors
	   2645 C
	   2646 9010  TYPE *,'ERROR OPENING L1 FILE; STATUS=',STATUS
	   2647       STOP
	   2648 9020  TYPE *,'ERROR READING SCIENCE RECORD ',CNTR,'; STATUS=',STATUS
	   2649       STOP
	   2650 9030  TYPE *,'ERROR GETTING BASIC CORE; STATUS=',STATUS
	   2651       STOP
	   2652 9050  TYPE *,'ERROR GETTING HDB; STATUS=',STATUS
	   2653       STOP
	   2654 9080  TYPE *,'ERROR GETTING STICS DATA; STATUS=',STATUS
	   2655       STOP
	   2656 9085  TYPE *,'ERROR GETTING MASS DATA; STATUS=',STATUS
	   2657       STOP
	   2658 
	   2659 9090  TYPE *,'ERROR CLOSING L1 FILE; STATUS=',STATUS
	   2660       STOP
	   2661       END

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  37
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1128 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               178868 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              3888 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               29296   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2563 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               216387


ENTRY POINTS

    Address   Type  Name           
                                   
  4-00000000        STICS_PHA_TREND


VARIABLES

    Address   Type  Name                       Address   Type  Name                       Address   Type  Name                  
                                                                                                                                
  2-000010B4  R*4   AVE_SPEED                2-00001040  I*4   DAYOFMONTH               0-00000108  I*4   DVSTEP                
  1-00000144  I*4   BAD_BR                   0-00000094  R*4   DELTA_T                  0-00000050  I*4   DVSTEP_MAX1           
  1-00000148  I*4   BAD_DVS                  0-00000104  I*4   DPPSMINUS                0-0000004C  I*4   DVSTEP_MAX2           
  1-00000134  I*4   BAD_HDB                  0-00000100  I*4   DPPSPLUS                 0-00000048  I*4   DVSTEP_MIN1           
  1-0000014C  I*4   BAD_SPEED                0-0000010C  I*4   DPPS_STEP_MODE           0-00000044  I*4   DVSTEP_MIN2           
  1-0000013C  R*4   BETA                         **      I*4   DPU_BK_C2                2-000010C4  I*4   DVS_CHECK             
  0-000000F8  L*1   BITRATE                      **      R*4   DPU_BK_MQ                1-00000138  R*4   EFF                   
  0-00000080  I*4   BK_C2                        **      R*4   DPU_C1_EQ                    **      R*4   EHIGH                 
      **      R*4   BK_MQ                        **      R*4   DPU_C2A_EQ                   **      R*4   ELOW                  
  2-00001030# L*4   BRACK                        **      R*4   DPU_C2B_EQ               2-00001048  I*4   ENDDAYOFMONTH         
  2-000010B8  R*4   BULK_SPEED                   **      R*4   DPU_D1_EQ                0-000000F4  L*4   ENDFOUND              
  2-000010BC  R*4   BULK_UNCER                   **      R*4   DPU_D2_EQ                2-00001044  I*4   ENDMONTH              
      **      R*4   C1_EQ                        **      R*4   DPU_EHIGH                2-00001088  I*4   ENERGY                
      **      R*4   C2A_EQ                       **      R*4   DPU_ELOW                 2-000010B0  R*4   ENERGY_BANDWIDTH      
      **      R*4   C2B_EQ                   2-00001058  R*4   DPU_E_OVER_Q             2-00012310  CHAR  ERR_MESSAGE           
  2-000010D0  I*4   CNTR                   REG-00000025  R*4   DPU_KM                   2-000010C8  I*4   ERR_SPD_FLAG          
  0-0000010C  L*4   CODE_C1                REG-00000027  R*4   DPU_KQ                   2-00000FD8  CHAR  FIFO                  
      **      L*4   CODE_C2                  2-0000105C  R*4   DPU_MASS                 0-000000A0  L*4   FIRSTFILE             
      **      R*4   D1_EQ                    2-00001060  R*4   DPU_MASS_OVER_Q          1-00000150  I*4   FIRSTSPEED            
      **      R*4   D2_EQ                        **      R*4   DPU_MMAX                 0-000000A4  L*4   FIRST_TIME            
  0-0000008C  I*4   DATA_DVSTEP_MAX              **      R*4   DPU_MMIN                 2-000010AC  I*4   FLUX_TYPE             
  0-00000084  I*4   DATA_DVSTEP_MIN              **      R*4   DPU_MQMAX                2-00010200  CHAR  FULL_L1_NAME          
      **      I*4   DATA_FILTER            REG-00000024  R*4   DPU_MQMIN                0-00000090  R*4   GEO_FAC               
  0-00000068  I*4   DATA_FILTER_COINC        2-00001068  I*4   DPU_NM                 REG-########  L*4   GOODSPIN              
      **      I*4   DATA_FILTER_DVSTEP           **      I*4   DPU_NM_MAX               1-00000154  I*4   GOOD_BR               
  0-0000005C  I*4   DATA_FILTER_MSPEED       2-0000106C  I*4   DPU_NQ                   0-00000098  R*4   HIGH_SPEED            
  0-00000064  I*4   DATA_FILTER_RANGE            **      I*4   DPU_NQ_MAX               0-0000003C# I*4   I                     
  0-00000060  I*4   DATA_FILTER_RANGECHECK   2-00001064  I*4   DPU_RANGE                2-0000102C  I*4   IFILE                 
  0-00000054  I*4   DATA_MSPEED_MAX              **      R*4   DPU_THIGH              REG-########  I*4   II                    
  0-00000058  I*4   DATA_MSPEED_MIN              **      R*4   DPU_TLOW               REG-0000000E  I*4   INCREMENT             

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  38
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

    Address   Type  Name                       Address   Type  Name                       Address   Type  Name                  
                                                                                                                                
REG-0000000F  I*4   INM                      0-0000006C  I*4   NM_MAX                   2-00001084  I*4   STOP_ID               
REG-00000003  I*4   INQ                    REG-########  I*4   NN                       0-000000E8  R*4   SUM_SW_SPEED          
  2-000010A8  I*4   INTERVAL                 0-00000088  I*4   NQ_MAX                   2-000010C0  R*4   SW_SPEED              
  2-00001034  I*4   ION_CHOICE               0-000000B0  I*4   OPENMODE               REG-00000005  I*4   TELE_FLAG             
  2-000010A4  I*4   ION_INDEX                2-00012250  CHAR  OUTFILENAME1           REG-0000000E  I*4   TELE_IDENT            
  2-000010D4  I*4   ISTEP                    2-000122B0  CHAR  OUTFILENAME2             2-00000FE0  CHAR  TGS                   
REG-########  I*4   ITEMP                    2-00001028  I*4   OUTUNIT                      **      R*4   THIGH                 
REG-00000010  I*4   ITEMP2                   2-00001070  I*4   PHA_NM                   2-00001094  I*4   TIME_OF_FLIGHT        
  0-00000038# I*4   J                      REG-0000000D  I*4   PHA_NQ                       **      R*4   TLOW                  
REG-########  I*4   JJ                       2-00001098  I*4   PSTART                   2-00000FF8  CHAR  TONOFF                
REG-0000000C  I*4   JSAVE                    2-0000109C  I*4   RANGE                  REG-0000000D  I*4   TRIGGER_MODE_CODE     
REG-########  I*4   K                        2-00000FE8  CHAR  RATEFLAG                 2-000010A0  R*4   UNUSED_PHA            
  2-000010CC  I*4   KK                     REG-00000027  R*4   RKM                      2-000010D8  CHAR  USERNAME1             
REG-########  I*4   L                      REG-00000028  R*4   RKQ                          **      R*4   USER_MMAX             
  2-000101B0  CHAR  L1FILENAME               2-00000FF0  CHAR  RONOFF                       **      R*4   USER_MMIN             
  1-00000130  I*4   L1_LUN                   2-00001100  CHAR  RUN_DATE                     **      R*4   USER_MQMAX            
  2-00012190  CHAR  LISFIL1                  2-00000FD0  CHAR  RUN_TIME                     **      R*4   USER_MQMIN            
  2-000121F0  CHAR  LISFIL2                  2-0000108C  I*4   SECTOR                       **      I*4   USER_NM_MAX           
  0-0000009C  R*4   LOW_SPEED                2-0000107C  R*4   SPECIES_CHARGE               **      I*4   USER_NQ_MAX           
REG-00000015  I*4   MM                       2-00001074  R*4   SPECIES_ENERGY               **      L*4   USE_SC_CLOCK          
REG-0000002D  R*4   MMAX                     2-00001078  R*4   SPECIES_MASS             0-000000B8  R*4   X1_GSE                
REG-00000026  R*4   MMIN                     0-000000EC  R*4   SPEED_HITS               2-0000104C  R*4   X2_GSE                
  2-00001110  CHAR  MODE_AT_START            0-00000040# R*4   SPEED_MEAN               0-000000BC  R*4   Y1_GSE                
  2-0000103C  I*4   MONTH                    1-00000140  R*4   SPIN_TIME                2-00001050  R*4   Y2_GSE                
REG-0000002C  R*4   MQMAX                    0-000000F0  I*4   SR_INTERVAL              2-00001000  CHAR  YORN                  
REG-00000025  R*4   MQMIN                    2-00001090  I*4   SSD_ID                   0-000000C0  R*4   Z1_GSE                
REG-########  I*4   N                      REG-0000000F  L*4   STARTFOUND               2-00001054  R*4   Z2_GSE                
REG-00000000  I*4   NAMELEN                  2-00001080  I*4   START_ID_RANGE                                                   
REG-00000017  I*4   NINDEX                   2-00001038  I*4   STATUS                                                           


RECORDS

    Address   Name            Structure                Bytes     Address   Name            Structure                Bytes
                                                                                                                         
  2-00001010  END             T                            8   2-00012360  SCI             CORE                      7384
  2-00014038  HDB             HDBSTR                     324   2-00001008  START           T                            8
  2-00001020  INT_START_TIME  T                            8   2-00016CA0  STICS_PHA       ST_PHA                   36720
  6-00000000  L1_FILE_HEADER  ST_L1_FILE_HEADER          400   2-00014180  STICS_RATE      ST_RATE                  11040
  6-00000190  L1_SR_HEADER    ST_L1_SR_HEADER            244   2-00001018  TIME_TO_USE     T                            8
  2-00020390  MASS_PHA        MA_PHA                   45960                                                             
  2-0001FC10  MASS_RATE       MA_RATE                   1920                                                             


ARRAYS

     Address  Type  Name                   Bytes  Dimensions

  2-00001170  R*4   AM                        24  (6)
  2-000032B0  R*4   BASIC_PHA               6144  (0:31, 0:15, 0:2)
  2-000026B0  R*4   BASIC_RATE              3072  (0:31, 8, 0:2)
  2-00004AB0  R*4   BASIC_W                 6144  (0:31, 0:15, 0:2)
  2-00001188  R*4   BM                        24  (6)
  1-00000378  R*4   CHARGE_ION               120  (30)
  1-00000158  CHAR  COINC                     30  (0:2)

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  39
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

  2-000062B0  R*4   CORR_DATA              18432  (0:31, 0:15, 0:2, 3)
  2-000011AC  R*4   DEADTIME_CORR             64  (0:15)
  2-00001134  R*4   DPU_AM                    24  (6)
  2-0000114C  R*4   DPU_BM                    24  (6)
  2-00001164  R*4   DPU_EMQ                   12  (3)
  2-0002B718  R*4   DPU_EPQ                  128  (0:31)
  2-0002B798  R*4   DPU_NM_M                 284  (0:70)
  2-000011F0  R*4   DPU_NQ_MPQ               524  (0:130)
  2-0002B8B4  R*4   DVS_HITS                 128  (0:31)
  2-0000F2B0  R*4   EFF_CORR                3840  (0:31, 30)
  2-000011A0  R*4   EMQ                       12  (3)
  2-00010250  CHAR  INPUTFILES              8000  (100)
  1-000001A0  CHAR  LABELS                   120  (30)
  1-000003F0  R*4   MASS_ION                 120  (30)
  1-00000218  CHAR  MODE                     170  (10)
  1-00000178  CHAR  RANGESEL                  35  (0:6)
  2-0000AAB0  R*4   RAW_COUNTS             18432  (0:31, 0:15, 0:2, 3)
  2-0002B934  R*4   SECT_DATA_ENRG1          192  (3, 0:15)
  2-0002B9F4  R*4   SECT_DATA_ENRG2          192  (3, 0:15)
  2-00001128  L*4   SEL_RANGE                 12  (0:2)
  2-000023E0  I*4   STICS_RATES              716  (179)
  1-000002C8  CHAR  TRIGGER_MODE             176  (0:7)
  2-00001400  R*4   USER_NM_M                804  (0:200)
  2-00001BF0  R*4   USER_NM_MID              804  (0:200)
  2-00001F20  R*4   USER_NQ_MID             1204  (0:300)
  2-00001730  R*4   USER_NQ_MPQ             1204  (0:300)



LABELS

    Address   Label     Address   Label     Address   Label     Address   Label     Address   Label     Address   Label
                                                                                                                       
      **       2          **       14         **       150    4-000040D0   905        **       1001       **       9085
  4-00001330   3          **       16         **       151    4-0000413C   907    4-00004C24   1990       **       9090
      **       6          **       17         **       153        **       920        **       2000                    
      **       7          **       18     4-00000000   220        **       945        **       9010                    
      **       9          **       19         **       230        **       950        **       9020                    
      **       11         **       33         **       250        **       955        **       9030                    
      **       12     4-000027A0   50     4-000040A4   300        **       956        **       9050                    
      **       13         **       100    4-000040B0   800    4-000014A0   1000       **       9080                    


FUNCTIONS AND SUBROUTINES REFERENCED

  Type  Name                                Type  Name                                Type  Name                             
                                                                                                                             
        CNVRT_T_YRMONDAY_TO_YEARDAY               TELESCOPE_ID                              WIND_L1_GET_HDB                  
  L*4   COMPARE_TIME_GE                           USER_NMNQ_COEFF                           WIND_L1_GET_MASS                 
        DISSECT_STICS_PHA                         USER_NMNQ_PHA_BINNED                      WIND_L1_GET_STICS                
        DPU_DEFAULT_COEFF                         USER_REQUESTS_DATA_TYPE                   WIND_L1_OPEN                     
        DPU_EQ                                    VOLTAGE_CHECK                             WIND_L1_OPEN_NEXT                
        ION_IDENTIFIER                      I*4   WIND_DECOMPRESS                           WIND_L1_READ_SR                  
        MMPQ_DPU_WSTICS                           WIND_GET_FILENAME                                                          
        OMR_EFF                                   WIND_L1_CLOSE                                                              
        SMS_MASS_SPEED                            WIND_L1_GET_BASIC                                                          

STICS_PHA_TREND                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  40
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2662 
	   2663 
	   2664 C	*************************************************
	   2665 C	*		SUBROUTINES			*
	   2666 C	*************************************************
	   2667 
	   2668 
	   2669 C***************************************************************************
	   2670 
	   2671       SUBROUTINE USER_REQUESTS_DATA_TYPE(
	   2672      .           FILTER_COINC,
	   2673 C     .           FILTER_DVSTEP,
	   2674 C     .		 DVSTEP_MIN,
	   2675 C     .		 DVSTEP_MAX,
	   2676      .           FILTER_RANGE,
	   2677      .           SRANGE,
	   2678      .           RANGECHECK,
	   2679      .           FILTER_SPEED,
	   2680      .           SPEED_MIN,
	   2681      .           SPEED_MAX)
	   2682 
	   2683 C     user inputs for data filtering by data type
	   2684 C     13.Jan.95  ABG
	   2685 C     17.Aug.95  add solar wind speed
	   2686 
	   2687 
	   2688       IMPLICIT NONE
	   2689 
	   2690 C     data filtering options
	   2691       INTEGER*4  FILTER_COINC,	!data filtering by coincidence 
	   2692 C					 conditions
	   2693 C     .           FILTER_DVSTEP,	!data filter by voltage step
	   2694 C     .           DVSTEP_MIN,	!dv step min-max values for data filter
	   2695 C     .           DVSTEP_MAX,
	   2696      .           FILTER_RANGE,   !range selection
	   2697      .           RANGECHECK,
	   2698      .           FILTER_SPEED,       !MASS derived solar wind speed selection
	   2699      .           SPEED_MIN, 
	   2700      .           SPEED_MAX
	   2701 
	   2702       LOGICAL SRANGE(0:2)			!accept / reject this range
	   2703       CHARACTER*5 RSELECTION(0:6) /		!range selection
	   2704      .                           '2 1 0' ,
	   2705      .                           '    0' ,
	   2706      .                           '  1  ' ,
	   2707      .                           '2    ' ,
	   2708      .                           '2   0' ,
	   2709      .                           '2 1  ' ,
	   2710      .                           '  1 0' /
	   2711 
	   2712       INTEGER*4  I,J,K
	   2713       CHARACTER*1 YORN			!yes or no answer
	   2714 
	   2715 
	   2716 
	   2717       TYPE 7
	   2718     7 FORMAT(' Enter desired data filtering ',

USER_REQUESTS_DATA_TYPE                                         21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  41
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2719      .       'by coincidence conditions: ',/,
	   2720      .       '   0 = no filtering (no M or M/Q restrictions) ',/,
	   2721      .       '   1 = M/Q-only     (i.e., M/Q > 0, Mass = 0) ',/,
	   2722      .       '   2 = M & M/Q      (i.e., M/Q > 0, Mass > 0) ',/,
	   2723      .       '       ',$)
	   2724       ACCEPT *, FILTER_COINC
	   2725 
	   2726 C      TYPE 8
	   2727 C    8 FORMAT(' Enter desired data filtering by voltage step range: ',/,
	   2728 C     .       '   -1 = no voltage step filtering (all e/q values) ',/,
	   2729 C     .       '    0 = voltage step filtering desired',/,
	   2730 C     .       '        ',$)
	   2731 C      ACCEPT *, FILTER_DVSTEP
	   2732 C      IF (FILTER_DVSTEP .GT. -1) THEN
	   2733 C         TYPE 9
	   2734 C    9    FORMAT(' Enter minimum and maximum voltage steps (inclusive)',/
	   2735 C     .          '     ',$)	  
	   2736 C	 ACCEPT *, DVSTEP_MIN, DVSTEP_MAX
	   2737 C      ENDIF
	   2738 
	   2739       TYPE 10 , (RSELECTION(I),I=0,6)
	   2740    10 FORMAT(' Enter range selection: ',/,
	   2741      .       '    0 = ',A5,'  (i.e., all ranges) ',/,
	   2742      .       '    1 = ',A5,/,
	   2743      .       '    2 = ',A5,/,
	   2744      .       '    3 = ',A5,/,
	   2745      .       '    4 = ',A5,/,
	   2746      .       '    5 = ',A5,/,
	   2747      .       '    6 = ',A5 )
	   2748        ACCEPT *, FILTER_RANGE
	   2749        TYPE 11, RSELECTION(FILTER_RANGE)
	   2750    11  FORMAT (/' User selected the following ranges : 'A5/)
	   2751       SRANGE(0) = .FALSE.	!reject range 0 events
	   2752       SRANGE(1) = .FALSE.	!reject range 1 events
	   2753       SRANGE(2) = .FALSE.	!reject range 2 events
	   2754 
	   2755        IF (  (FILTER_RANGE.EQ.0) .OR. (FILTER_RANGE.EQ.1) .OR.
	   2756      .       (FILTER_RANGE.EQ.4) .OR. (FILTER_RANGE.EQ.6) )
	   2757      .		SRANGE(0) = .TRUE.
	   2758        IF (  (FILTER_RANGE.EQ.0) .OR. (FILTER_RANGE.EQ.2) .OR.
	   2759      .       (FILTER_RANGE.EQ.5) .OR. (FILTER_RANGE.EQ.6) )
	   2760      .		SRANGE(1) = .TRUE.
	   2761        IF (  (FILTER_RANGE.EQ.0) .OR. (FILTER_RANGE.EQ.3) .OR.
	   2762      .       (FILTER_RANGE.EQ.4) .OR. (FILTER_RANGE.EQ.5) )
	   2763      .		SRANGE(2) = .TRUE.
	   2764 
	   2765        TYPE 12
	   2766    12  FORMAT(' Do you want to limit the output to range checks? '
	   2767      .        '[y/n] ',$)
	   2768        ACCEPT 13, YORN
	   2769    13  FORMAT (A)
	   2770        IF (YORN.EQ.'Y' .OR. YORN.EQ.'y') RANGECHECK=1
	   2771 
	   2772        TYPE 15
	   2773    15  FORMAT(' Enter desired data filtering by solar wind speed range: ',/,
	   2774      .       '    -1 = no filtering by MASS speed ',/,
	   2775      .       '    0  = MASS speed filtering desired',/,

USER_REQUESTS_DATA_TYPE                                         21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  42
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2776      .       '        ',$)
	   2777       ACCEPT *, FILTER_SPEED
	   2778       IF (FILTER_SPEED .GT. -1) THEN
	   2779          TYPE 16
	   2780    16    FORMAT(' Enter minimum and maximum solar wind speed (inclusive)',/
	   2781      .          '     ',$)	  
	   2782 	 ACCEPT *, SPEED_MIN, SPEED_MAX
	   2783       ENDIF
	   2784 
	   2785 
	   2786        RETURN
	   2787        END


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1128 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               178868 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              3888 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               29296   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2563 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               216387


ENTRY POINTS

    Address   Type  Name                   
                                           
  4-00005930        USER_REQUESTS_DATA_TYPE


VARIABLES

    Address   Type  Name             Address   Type  Name             Address   Type  Name             Address   Type  Name        
                                                                                                                                   
      **      I*4   FILTER_COINC REG-00000003  I*4   I                  **      I*4   RANGECHECK     2-00000FB0  CHAR  YORN        
      **      I*4   FILTER_RANGE   2-00000FB8  I*4   J                  **      I*4   SPEED_MAX                                    
      **      I*4   FILTER_SPEED   2-00000FBC  I*4   K                  **      I*4   SPEED_MIN                                    


ARRAYS

     Address  Type  Name              Bytes  Dimensions

  1-000000F0  CHAR  RSELECTION           35  (0:6)
      **      L*4   SRANGE               12  (0:2)




USER_REQUESTS_DATA_TYPE                                         21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  43
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

LABELS

    Address   Label     Address   Label     Address   Label     Address   Label
                                                                               
      **       7          **       11         **       13         **       16  
      **       10         **       12         **       15                      

USER_REQUESTS_DATA_TYPE                                         21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  44
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2788 
	   2789 
	   2790 
	   2791 C***************************************************************************
	   2792 
	   2793       SUBROUTINE DPU_DEFAULT_COEFF(DNQ_MAX,DMQMAX,DMQMIN,   
	   2794      .		            DNM_MAX,DMMAX, DMMIN,
	   2795      .                      DEMIN,DEMAX,DTMIN,DTMAX,
	   2796      .                      DA,DB,DC1,DC2A,DC2B,DD1,DD2,DE,
	   2797      .                      DBREAK_C2, DBREAK_MQ,
	   2798      .                      DKM,DKQ,DNM_BINS,DNQ_BINS)
	   2799 
	   2800 C***
	   2801 C     This SUBROUTINE returns DPU default coefficients
	   2802 C***
	   2803 
	   2804       IMPLICIT NONE
	   2805 
	   2806       REAL*4 DA(6),			!mass coefficients
	   2807      .       DB(6),      		!NM coefficients
	   2808      .       DC1,DC2A,DC2B		!mass/charge coefficients
	   2809 C			 		C1= time of flight **2 of 1 keV proton
	   2810 C			 		C2= carbon foil correction
	   2811       INTEGER*4 DBREAK_C2  		!NQ value of C2 break point (83)
	   2812       REAL*4    DBREAK_MQ  		!M/Q value of C2 break point (~11)
	   2813 
	   2814       REAL*4 DD1,DD2,	!E/Q coefficients, D1= analyzer constant
	   2815 C			                   D2= step resolution
	   2816      .       DE(3)
	   2817 
	   2818       REAL*4 DEMIN, DEMAX,		   !min max energy and time
	   2819      .       DTMIN, DTMAX
	   2820 
	   2821       INTEGER*4  DNM_MAX, DNQ_MAX !DPU default max bin values
	   2822 
	   2823       REAL*4 DMMAX, DMMIN,    !DPU DEFAULT measurable mass range in amu 
	   2824      .       DMQMAX, DMQMIN   !DPU DEFAULT measurable m/q range in amu/e        
	   2825 
	   2826       REAL*4  DKM,DKQ           !NM, NQ resolution parameters
	   2827       REAL*4  DNM_BINS(0:70),  !Nm and Nq bin lower boundary values in mass 
	   2828      .        DNQ_BINS(0:130)   !	and m/q, based on DKM and DKQ and 
	   2829 C				        M min,M/q min
	   2830 
	   2831       INTEGER*4 I,J,K
	   2832      
	   2833 C   ****
	   2834 C   *  Initialize constants with default dpu values (ref:  pages 345-349  
	   2835 C   *  of WIND SMS COMMAND AND DATA FORMATS FOR THE SMS INSTRUMENT R.3.0) 
	   2836 C   ****	
	   2837 
	   2838       DNM_MAX = 59
	   2839       DNQ_MAX = 126
	   2840       DMMAX  = 95.
	   2841       DMMIN  = 0.5
	   2842       DMQMAX = 42.
	   2843       DMQMIN = 0.9
	   2844 

DPU_DEFAULT_COEFF                                               21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  45
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2845       DA(1) = 2.69575
	   2846       DA(2) = -0.843766
	   2847       DA(3) = -2.38009
	   2848       DA(4) = 0.385641
	   2849       DA(5) = 0.0513127
	   2850       DA(6) = 0.0690096
	   2851 
	   2852 
	   2853       DC1 = 1.9159E-05
	   2854       DC2A= 1.5
	   2855       DC2B= 2.5
	   2856       DBREAK_C2 = 83
	   2857 C          m/q = MQmin *   kQ                     **(nq-1)
	   2858       DBREAK_MQ = 0.9   * ( (42.0/0.9)**(1./126.) )**(83.-1.)
	   2859 
	   2860       DD1 = 6.190722
	   2861       DD2 = 1.1225857
	   2862 
	   2863       DEMIN = 21.0
	   2864       DEMAX = 2675.0
	   2865       DTMIN = 11.0
	   2866       DTMAX = 408.0
	   2867 
	   2868 C  ***
	   2869 C  *              calculate binning parameters                
	   2870 C  *              M(lower bound of Nm) = Mmin * kM**(Nm-1)    
	   2871 C  *              M/Q(lower bound of Nq) = MQmin * kQ**(Nq-1) 
	   2872 C  ***
	   2873 
	   2874       DKM = ( DMMAX/DMMIN )**(1./(FLOAT(DNM_MAX)-1.))   !substract 1 from
	   2875 C                                                    nm_max (= overflow m)
	   2876       DKQ = (DMQMAX/DMQMIN)**(1./FLOAT(DNQ_MAX))
	   2877 
	   2878       DO I = 0,70
	   2879          DNM_BINS(I) = 0.
	   2880          IF(I.GT.0.  .AND.  I.LE.DNM_MAX) 
	   2881      .        DNM_BINS(I) = DMMIN * DKM**(FLOAT(I)-1.)
	   2882       END DO
	   2883 
	   2884       DO I = 0, 130
	   2885          DNQ_BINS(I) = 0.
	   2886          IF(I.GT.0  .AND.  I.LE.DNQ_MAX+1) 
	   2887      .        DNQ_BINS(I) = DMQMIN *DKQ**(FLOAT(I)-1.)
	   2888       END DO
	   2889 
	   2890 C     coefficients related to both D values and binning resolution
	   2891       	DE(1) = -351.6997334
	   2892       	DE(2) = 32.7867706
	   2893       	DE(3) = 65.5735412
	   2894 
	   2895 C     coefficients related to both A values and binning resolution
	   2896         DB(1) = 38.4605
	   2897         DB(2) = -9.32689
	   2898         DB(3) = -26.3092
	   2899         DB(4) = 4.26283
	   2900         DB(5) = 0.567205
	   2901         DB(6) = 0.762824

DPU_DEFAULT_COEFF                                               21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  46
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2902 
	   2903 
	   2904       RETURN
	   2905       END


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1128 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               178868 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              3888 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               29296   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2563 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               216387


ENTRY POINTS

    Address   Type  Name             
                                     
  4-00005D48        DPU_DEFAULT_COEFF


VARIABLES

    Address   Type  Name          Address   Type  Name          Address   Type  Name          Address   Type  Name     
                                                                                                                       
      **      I*4   DBREAK_C2       **      R*4   DD2             **      R*4   DMMIN           **      R*4   DTMIN    
      **      R*4   DBREAK_MQ       **      R*4   DEMAX           **      R*4   DMQMAX    REG-########  I*4   I        
      **      R*4   DC1             **      R*4   DEMIN           **      R*4   DMQMIN      2-00000010  I*4   J        
      **      R*4   DC2A            **      R*4   DKM             **      I*4   DNM_MAX     2-00000014  I*4   K        
      **      R*4   DC2B            **      R*4   DKQ             **      I*4   DNQ_MAX                                
      **      R*4   DD1             **      R*4   DMMAX           **      R*4   DTMAX                                  


ARRAYS

     Address  Type  Name            Bytes  Dimensions

      **      R*4   DA                 24  (6)
      **      R*4   DB                 24  (6)
      **      R*4   DE                 12  (3)
      **      R*4   DNM_BINS          284  (0:70)
      **      R*4   DNQ_BINS          524  (0:130)


DPU_DEFAULT_COEFF                                               21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  47
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2906 
	   2907 C**************************************************************************
	   2908       SUBROUTINE USER_NMNQ_COEFF(UNQ_MAX,UMQMAX,UMQMIN,    !user input
	   2909      .		            UNM_MAX,UMMAX, UMMIN,
	   2910      .                      EMIN,EMAX,TMIN,TMAX,      !return values
	   2911      .                      NQ_MAX,MQMAX,MQMIN,
	   2912      .                      NM_MAX,MMAX ,MMIN,
	   2913      .                      KM,KQ,
	   2914      .                      A,B,C1,C2A,C2B,D1,D2,E,
	   2915      .                      BREAK_C2, BREAK_MQ)
	   2916 C*******************************************************************
	   2917 C     This SUBROUTINE calculates coefficients for nm and nq        *
	   2918 C     parameters         					   *
	   2919 C     Original version 24 Jan 95 by ABG                            *
	   2920 C     History:							   *
	   2921 C                                                                  *
	   2922 c*******************************************************************
	   2923       IMPLICIT NONE
	   2924 
	   2925       REAL*4 A(6),	!mass coefficients
	   2926      .       B(6),      !NM coefficients
	   2927      .       C1,C2A,C2B	!mass/charge coefficients
	   2928 C			 C1= time of flight **2 of 1 keV proton
	   2929 C			 C2= carbon foil correction
	   2930       INTEGER*4 BREAK_C2  !NQ value of C2 break point (83)
	   2931       REAL*4    BREAK_MQ  !M/Q value of C2 break point (~11)
	   2932 
	   2933       REAL*4 D1,D2,	!E/Q coefficients, D1= analyzer constant
	   2934 C			                   D2= step resolution
	   2935      .       E(3)
	   2936 
	   2937       INTEGER*4 DEFAULT_NQ,DEFAULT_NM   !default dpu algorithm used
	   2938 
	   2939       REAL*4 EMIN, EMAX,		!min max energy and time
	   2940      .       TMIN, TMAX
	   2941 
	   2942       INTEGER*4  NM_MAX,  NQ_MAX, 	   !max bin values 
	   2943      .           UNM_MAX, UNQ_MAX, 	   !USER max bin values (-1 = use default)
	   2944      .           DNM_MAX/59/, DNQ_MAX/126/ !DPU default max bin values
	   2945 
	   2946       REAL*4 MMAX,  MMIN,    !measurable mass range in amu 
	   2947      .       MQMAX, MQMIN,   !measurable m/q range in amu/e
	   2948      .       UMMAX, UMMIN,   !USER measurable mass range in amu (-1 = use default)
	   2949      .       UMQMAX,UMQMIN,  !USER measurable m/q range in amu/e (-1 = use default)
	   2950      .       DMMAX  /95./, DMMIN  /0.5/,  !DPU DEFAULT measurable mass range in amu 
	   2951      .       DMQMAX /42./, DMQMIN /0.9/   !DPU DEFAULT measurable m/q range in amu/e        
	   2952 
	   2953       REAL*4  KM,KQ           !NM, NQ resolution parameters
	   2954 
	   2955       INTEGER*4 I,J,K
	   2956      
	   2957 C   ***********************************************************************
	   2958 C   *  Initialize constants with default dpu values (ref:  pages 345-349  *
	   2959 C   *  of WIND SMS COMMAND AND DATA FORMATS FOR THE SMS INSTRUMENT R.3.0) *
	   2960 C   ***********************************************************************	
	   2961 
	   2962       A(1) = 2.69575

USER_NMNQ_COEFF                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  48
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   2963       A(2) = -0.843766
	   2964       A(3) = -2.38009
	   2965       A(4) = 0.385641
	   2966       A(5) = 0.0513127
	   2967       A(6) = 0.0690096
	   2968 
	   2969 
	   2970       C1 = 1.9159E-05
	   2971       C2A= 1.5
	   2972       C2B= 2.5
	   2973       BREAK_C2 = 83
	   2974 C          m/q = MQmin *   kQ                     **(nq-1)
	   2975       BREAK_MQ = 0.9   * ( (42.0/0.9)**(1./126.) )**(83.-1.)
	   2976 
	   2977       D1 = 6.190722
	   2978       D2 = 1.1225857
	   2979 
	   2980       EMIN = 21.0
	   2981       EMAX = 2675.0
	   2982       TMIN = 11.0
	   2983       TMAX = 408.0
	   2984 
	   2985 C   ***********************************************************************
	   2986 C   *  determine if default (i.e., dpu) binning will be used, in whole or *
	   2987 C   *  in part, or not at all.  Otherwise user input for min, max, number *
	   2988 C   *  of bins will be used.                                              *
	   2989 C   ***********************************************************************
	   2990 
	   2991       DEFAULT_NQ = 0		!initialize flag for dpu default
	   2992       DEFAULT_NM = 0
	   2993       IF(UMMIN.LT.0.  .AND.  UMMAX.LT.0.   .AND.   UNM_MAX.LT.0)
	   2994      .   DEFAULT_NM = 1		!if true, dpu bins for nm to be used
	   2995       IF(UMQMAX.LT.0. .AND.  UMQMIN.LT.0.  .AND.   UNQ_MAX.LT.0) 
	   2996      .   DEFAULT_NQ = 1		!if true, dpu bins for nq to be used
	   2997 
	   2998       IF(UMMIN.LT.0.)  THEN
	   2999              MMIN = DMMIN
	   3000       ELSE
	   3001              MMIN = UMMIN
	   3002       ENDIF
	   3003 
	   3004       IF(UMMAX.LT.0.) THEN
	   3005               MMAX = DMMAX
	   3006       ELSE
	   3007               MMAX = UMMAX
	   3008       ENDIF
	   3009 
	   3010       IF(UMQMIN.LT.0.) THEN
	   3011               MQMIN = DMQMIN
	   3012       ELSE
	   3013               MQMIN = UMQMIN
	   3014       ENDIF
	   3015 
	   3016       IF(UMQMAX.LT.0.) THEN
	   3017               MQMAX = DMQMAX 
	   3018       ELSE
	   3019               MQMAX = UMQMAX

USER_NMNQ_COEFF                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  49
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   3020       ENDIF
	   3021 
	   3022       IF(UNM_MAX.LT.0) THEN
	   3023             NM_MAX = DNM_MAX
	   3024       ELSE
	   3025             NM_MAX = UNM_MAX +1   !(DPU formulas use overflow mass as nmmax)
	   3026       ENDIF
	   3027 
	   3028       IF(UNQ_MAX.LT.0) THEN
	   3029             NQ_MAX = DNQ_MAX
	   3030       ELSE
	   3031             NQ_MAX = UNQ_MAX
	   3032       ENDIF
	   3033 
	   3034 
	   3035 
	   3036 C  ************************************************************
	   3037 C  *              calculate binning parameters                *
	   3038 C  *              M(lower bound of Nm) = Mmin * kM**(Nm-1)    *
	   3039 C  *              M/Q(lower bound of Nq) = MQmin * kQ**(Nq-1) *
	   3040 C  ************************************************************
	   3041 
	   3042       KM = ( MMAX/MMIN )**(1./(FLOAT(NM_MAX)-1.))   !substract 1 from
	   3043 C                                                    nm_max (= overflow m)
	   3044       KQ = (MQMAX/MQMIN)**(1./FLOAT(NQ_MAX))
	   3045 
	   3046 
	   3047       IF (DEFAULT_NQ .EQ. 1) THEN
	   3048       	E(1) = -351.6997334
	   3049       	E(2) = 32.7867706
	   3050       	E(3) = 65.5735412
	   3051       ELSE
	   3052 	E(1) = 1. + (  (ALOG(C1) - ALOG(MQMIN))/ALOG(KQ) )
	   3053         E(2) = 1. / ALOG(KQ)
	   3054         E(3) = 2. / ALOG(KQ)
	   3055         BREAK_C2 = IFIX ( ALOG(BREAK_MQ/MQMIN) / ALOG(KQ) )
	   3056       END IF
	   3057 
	   3058       IF (DEFAULT_NM .EQ. 1) THEN
	   3059         B(1) = 38.4605
	   3060         B(2) = -9.32689
	   3061         B(3) = -26.3092
	   3062         B(4) = 4.26283
	   3063         B(5) = 0.567205
	   3064         B(6) = 0.762824
	   3065       ELSE
	   3066         B(1) = 1. + (  (A(1)-ALOG(MMIN)) / ALOG(KM) )
	   3067         B(2) = A(2) / ALOG(KM)
	   3068         B(3) = A(3) / ALOG(KM)
	   3069         B(4) = A(4) / ALOG(KM)
	   3070         B(5) = A(5) / ALOG(KM)
	   3071         B(6) = A(6) / ALOG(KM)
	   3072       ENDIF
	   3073 
	   3074       RETURN
	   3075       END

USER_NMNQ_COEFF                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  50
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1128 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               178868 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              3888 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               29296   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2563 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               216387


ENTRY POINTS

    Address   Type  Name           
                                   
  4-00006008        USER_NMNQ_COEFF


VARIABLES

    Address   Type  Name           Address   Type  Name           Address   Type  Name           Address   Type  Name      
                                                                                                                           
      **      I*4   BREAK_C2     1-00000124  R*4   DMMIN            **      R*4   KM               **      R*4   UMMAX     
      **      R*4   BREAK_MQ     1-00000128  R*4   DMQMAX           **      R*4   KQ               **      R*4   UMMIN     
      **      R*4   C1           1-0000012C  R*4   DMQMIN           **      R*4   MMAX             **      R*4   UMQMAX    
      **      R*4   C2A          1-00000118  I*4   DNM_MAX          **      R*4   MMIN             **      R*4   UMQMIN    
      **      R*4   C2B          1-0000011C  I*4   DNQ_MAX          **      R*4   MQMAX            **      I*4   UNM_MAX   
      **      R*4   D1               **      R*4   EMAX             **      R*4   MQMIN            **      I*4   UNQ_MAX   
      **      R*4   D2               **      R*4   EMIN             **      I*4   NM_MAX                                   
REG-00000007  I*4   DEFAULT_NM   2-00000FC0  I*4   I                **      I*4   NQ_MAX                                   
REG-00000006  I*4   DEFAULT_NQ   2-00000FC4  I*4   J                **      R*4   TMAX                                     
  1-00000120  R*4   DMMAX        2-00000FC8  I*4   K                **      R*4   TMIN                                     


ARRAYS

     Address  Type  Name        Bytes  Dimensions

      **      R*4   A              24  (6)
      **      R*4   B              24  (6)
      **      R*4   E              12  (3)


USER_NMNQ_COEFF                                                 21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  51
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   3076 
	   3077 
	   3078 C**************************************************************************
	   3079       
	   3080       SUBROUTINE USER_NMNQ_PHA_BINNED(DPPSP,DPPSM,DVSTEP,ECHN,TCHN,    !this pha event
	   3081      .                      NQ_MAX,MQMAX,MQMIN,    !information for binning
	   3082      .                      NM_MAX,MMAX, MMIN,
	   3083      .                      EMIN,EMAX,TMIN,TMAX,      
	   3084      .                      KM,KQ,
	   3085      .                      A,B,C1,C2A,C2B,D1,D2,E,
	   3086      .                      BREAK_C2, BREAK_MQ,
	   3087      .                      NQ,NM)			!return information
	   3088 
	   3089 C*******************************************************************
	   3090 C     This SUBROUTINE calculates ln bins for MASS and MASS/CHARGE  *
	   3091 C     given the number of bins requested by the user, plus         * 
	   3092 C     the status of the +/- DPPS, DV Step number, the compressed   *
	   3093 C     energy channel number,and the time-of-flight channel number  *
	   3094 C     for WIND-STICS. The algorithms for m, m/q are those used by  *
	   3095 C     the DPU  as of July 17, 1992.                                *
	   3096 C     Original version 24 Jan 95 by ABG from a routine by SChotoo. *
	   3097 C     History:
	   3098 C                
	   3099 c*******************************************************************
	   3100       IMPLICIT NONE
	   3101 
	   3102       REAL*4 A(6),	!mass coefficients
	   3103      .       B(6),      !NM coefficients
	   3104      .       C1,C2A,C2B	!mass/charge coefficients
	   3105 C			 C1= time of flight **2 of 1 keV proton
	   3106 C			 C2= carbon foil correction
	   3107       INTEGER*4 BREAK_C2  !NQ value of C2 break point (83)
	   3108       REAL*4    BREAK_MQ  !M/Q value of C2 break point (~11)
	   3109 
	   3110       REAL*4 D1,D2,	!E/Q coefficients, D1= analyzer constant
	   3111 C			                   D2= step resolution
	   3112      .       E(3)
	   3113       INTEGER*4 DPPSP,  !enable bit for dpps plus plate
	   3114      .          DPPSM,  !enable bit for dpps minus plate
	   3115      .          DVSTEP, !deflection voltage step number 
	   3116      .          ECHN    !compressed energy channel number
	   3117       REAL*4 ED,        !decompressed energy channel number            
	   3118      .       EMEAS,     !measured energy in keV
	   3119      .       EMIN,EMAX, !measurable energy range in keV 
	   3120      .       EPQ,       !E/Q
	   3121      .       M,         !mass in amu
	   3122      .       MPQ	!mass per charge in amu/e
	   3123       INTEGER*4  NM,NQ   		   !mass bin, m/q bin
	   3124       INTEGER*4  NM_MAX,  NQ_MAX 	   !max bin values 
	   3125 
	   3126       REAL*4 MMAX,  MMIN,    !measurable mass range in amu 
	   3127      .       MQMAX, MQMIN   !measurable m/q range in amu/e
	   3128 
	   3129       REAL*4  KM,KQ           !NM, NQ resolution parameters
	   3130 
	   3131    
	   3132       INTEGER*4 TCHN    !time channel number

USER_NMNQ_PHA_BINNED                                            21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  52
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   3133       REAL*4 TEMP,         
	   3134      .       TMIN,TMAX, !measurable time-of-flight range in ns
	   3135      .       TOF,       !measured time-of-flight in ns
	   3136      .       XX,YY
	   3137 
	   3138       INTEGER*4 I,J,K
	   3139      
	   3140 C  **************************************************************
	   3141 C  *			PHA Channel number conversions	 	*
	   3142 C  **************************************************************
	   3143 
	   3144 C     Energy Channel Number (ECHN) must first be decompressed (ED) 
	   3145 C     from 9-bit to 10-bit
	   3146       IF (ECHN .LT. 256) ED = ECHN
	   3147       IF ((ECHN .GE. 256).AND.(ECHN .LT. 384))ED = 2.0*ECHN - 256.0 + 0.5
	   3148       IF (ECHN .GE. 384) ED = 4.0*ECHN - 1024.0 + 1.5
	   3149 
	   3150 C     Calculate measured energy in keV from decompressed channel number
	   3151       EMEAS = (ED + 6)/0.37654782
	   3152 
	   3153      
	   3154 C     Calculate time of flight in ns from time channel number
	   3155       TOF = (TCHN - 44)/2.3725306895
	   3156 
	   3157 
	   3158 C  ******************************************************************
	   3159 C  *                   E/Q, M/Q, and M algorithms                   *
	   3160 C  *                   Nm, Nq values                                *
	   3161 C  ******************************************************************
	   3162 
	   3163 C     Calculate the e/q value based on the default dpu algorithm and constants.
	   3164           IF(IAND(DPPSP, DPPSM).EQ.1)THEN               !both plates on
	   3165             EPQ = D1 * (D2**DVSTEP)
	   3166           ELSE IF (DPPSP.EQ.1 .OR. DPPSM.EQ.1) THEN     !one plate on  
	   3167             EPQ = 0.5 * D1 * (D2**DVSTEP)                
	   3168           ELSE                                          !neither plate on
	   3169             EPQ = 0
	   3170           ENDIF
	   3171 
	   3172 C     Calculate mass per charge in amu/e
	   3173     
	   3174       MPQ = C1*(EPQ - C2A)*(TOF**2) 
	   3175       IF (MPQ .GE. BREAK_MQ) MPQ = C1*(EPQ - C2B)*(TOF**2)   
	   3176 
	   3177       IF (TOF .GT. 0) THEN
	   3178            NQ = E(1) + E(2)*ALOG(D1* (D2**DVSTEP) - C2A) +
	   3179      .          E(3)*ALOG(TOF)
	   3180            IF (NQ .GE. BREAK_C2)       
	   3181      .      NQ = E(1) + E(2)*ALOG(D1* (D2**DVSTEP) - C2B) +
	   3182      .     	 E(3)*ALOG(TOF)
	   3183            IF (NQ .GT. NQ_MAX) NQ = NQ_MAX+1	!M/Q overflow
	   3184            IF (NQ .LT. 1  ) NQ = 0	        !M/Q underflow
	   3185       ELSE
	   3186          NQ = 0
	   3187       ENDIF
	   3188 
	   3189 C     Calculate mass in amu

USER_NMNQ_PHA_BINNED                                            21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  53
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   3190       IF ((EMEAS .GT. EMIN) .AND. (EMEAS .LT. EMAX) .AND.                
	   3191      .    (TOF   .GT. TMIN) .AND. (TOF   .LT. TMAX) ) THEN
	   3192 
	   3193          XX = ALOG(EMEAS)
	   3194          YY = ALOG(TOF)
	   3195          TEMP = A(1) + A(2)*XX + A(3)*YY + A(4)*XX*YY
	   3196          TEMP = TEMP + A(5)*XX*XX + A(6)*YY*YY*YY
	   3197          M = EXP(TEMP)
	   3198 
	   3199          NM = B(1) + B(2)*XX + B(3)*YY + B(4)*XX*YY +
	   3200      .        B(5)*XX*XX + B(6)*YY*YY*YY
	   3201 
	   3202          IF (NM .GE. NM_MAX) THEN
	   3203               NM =  NM_MAX		!overflow mass class  (59)
	   3204 	 ELSE IF (NM .LT. 1) THEN
	   3205               NM =  NM_MAX + 1		!underflow mass class (60)
	   3206 	 ENDIF
	   3207       ELSE IF(EMEAS .LE. EMIN) THEN
	   3208 	 M   = 0
	   3209          NM  = 0                       !mass zero event
	   3210       ELSE IF (EMEAS .GE. EMAX) THEN
	   3211 	 M   = 0
	   3212          NM  = NM_MAX + 2	       !energy overflow (61)
	   3213       ELSE IF (TOF .LE. TMIN) THEN
	   3214          M   = 0 
	   3215 	 NM  = NM_MAX + 3              !time underflow (62)
	   3216       ELSE IF (TOF .GE. TMAX) THEN
	   3217 	 M   = 0
	   3218          NM  = NM_MAX + 4              !time overflow (63)
	   3219       END IF             
	   3220 
	   3221 
	   3222       RETURN
	   3223       END

USER_NMNQ_PHA_BINNED                                            21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  54
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1128 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               178868 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              3888 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               29296   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2563 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               216387


ENTRY POINTS

    Address   Type  Name                
                                        
  4-00006480        USER_NMNQ_PHA_BINNED


VARIABLES

    Address   Type  Name         Address   Type  Name         Address   Type  Name         Address   Type  Name    
                                                                                                                   
      **      I*4   BREAK_C2       **      I*4   ECHN           **      R*4   KQ             **      I*4   NQ_MAX  
      **      R*4   BREAK_MQ   2-00000000  R*4   ED             **      R*4   M              **      I*4   TCHN    
      **      R*4   C1             **      R*4   EMAX           **      R*4   MMAX           **      R*4   TEMP    
      **      R*4   C2A      REG-00000022  R*4   EMEAS          **      R*4   MMIN           **      R*4   TMAX    
      **      R*4   C2B            **      R*4   EMIN     REG-00000021  R*4   MPQ            **      R*4   TMIN    
      **      R*4   D1       REG-00000024  R*4   EPQ            **      R*4   MQMAX    REG-00000023  R*4   TOF     
      **      R*4   D2         2-00000004  I*4   I              **      R*4   MQMIN    REG-00000025  R*4   XX      
      **      I*4   DPPSM      2-00000008  I*4   J              **      I*4   NM       REG-00000020  R*4   YY      
      **      I*4   DPPSP      2-0000000C  I*4   K              **      I*4   NM_MAX                               
      **      I*4   DVSTEP         **      R*4   KM             **      I*4   NQ                                   


ARRAYS

     Address  Type  Name        Bytes  Dimensions

      **      R*4   A              24  (6)
      **      R*4   B              24  (6)
      **      R*4   E              12  (3)


USER_NMNQ_PHA_BINNED                                            21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  55
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   3224 
	   3225 
	   3226 C***************************************************************************************
	   3227 C
	   3228        SUBROUTINE TELESCOPE_ID (TIME_OF_FLIGHT,ENERGY,
	   3229      .                PSTART,STOP_ID,SSD_ID, TELE_ID, CHECK_TELE)
	   3230 C
	   3231 C      this subroutine determines which telescope (1, 2, 3) the pha word comes 
	   3232 C		from based on PSTART, or if the information from all the detectors 
	   3233 C		is inconsistent, the check_tele flag is set
	   3234 C      HISTORY:  derived from TELESCOPE_CHECK, 18Aug95 - ABG
	   3235 
	   3236        INTEGER*4 ENERGY,		!energy pulse height
	   3237      .           TIME_OF_FLIGHT,	!time pulse height
	   3238      .           PSTART,		!FSR id
	   3239      .           STOP_ID,		!RSR id
	   3240      .           SSD_ID,		!Solid state detector id
	   3241      .           TELE_ID,		!based on PSTART if TOF>0, or SSD if only E>0
	   3242      .           CHECK_TELE		!flag = 0 if all detectors match, 1 if not
	   3243 
	   3244 
	   3245                  CHECK_TELE = 0		!initialize
	   3246 		 TELE_ID    = 0         
	   3247 
	   3248 C                ssd checks
	   3249 	  	 IF (SSD_ID.EQ.0 .AND. ENERGY.NE.0) CHECK_TELE = 1
	   3250 	         IF (SSD_ID.EQ.1 
	   3251      .               .AND.
	   3252      .                    (PSTART.NE.1 .AND. PSTART.NE.2 .AND.
	   3253      .                     PSTART.NE.7 .AND. PSTART.NE.0) ) CHECK_TELE = 1
	   3254 	         IF (SSD_ID.EQ.2 
	   3255      .               .AND.
	   3256      .                (PSTART.NE.3 .AND. PSTART.NE.4 .AND.
	   3257      .                 PSTART.NE.8 .AND. PSTART.NE.0) ) CHECK_TELE = 1
	   3258 	         IF (SSD_ID.EQ.3 
	   3259      .                 .AND.
	   3260      .                (PSTART.NE.5 .AND. PSTART.NE.6 .AND.
	   3261      .                 PSTART.NE.9 .AND. PSTART.NE.0) ) CHECK_TELE = 1
	   3262 	         IF (SSD_ID.EQ.1 
	   3263      .               .AND.
	   3264      .                (STOP_ID.NE.1 .AND. STOP_ID.NE.0) ) CHECK_TELE = 1
	   3265 	         IF (SSD_ID.EQ.2 
	   3266      .               .AND.
	   3267      .                (STOP_ID.NE.2 .AND. STOP_ID.NE.0) ) CHECK_TELE = 1
	   3268 	         IF (SSD_ID.EQ.3 
	   3269      .               .AND.
	   3270      .                (STOP_ID.NE.3 .AND. STOP_ID.NE.0) ) CHECK_TELE = 1
	   3271 
	   3272 C                stop checks
	   3273 	  	 IF (STOP_ID.EQ.0 .AND. TIME_OF_FLIGHT.NE.0) CHECK_TELE = 1
	   3274 	         IF (STOP_ID.EQ.1 
	   3275      .               .AND.
	   3276      .                    (PSTART.NE.1 .AND. PSTART.NE.2 .AND.
	   3277      .                     PSTART.NE.7 .AND. PSTART.NE.0) ) CHECK_TELE = 1
	   3278 	         IF (STOP_ID.EQ.2 
	   3279      .               .AND.
	   3280      .                (PSTART.NE.3 .AND. PSTART.NE.4 .AND.

TELESCOPE_ID                                                    21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  56
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   3281      .                 PSTART.NE.8 .AND. PSTART.NE.0) ) CHECK_TELE = 1
	   3282 	         IF (STOP_ID.EQ.3 
	   3283      .                 .AND.
	   3284      .                (PSTART.NE.5 .AND. PSTART.NE.6 .AND.
	   3285      .                 PSTART.NE.9 .AND. PSTART.NE.0) ) CHECK_TELE = 1
	   3286 	         IF (STOP_ID.EQ.1 
	   3287      .               .AND.
	   3288      .                (SSD_ID.NE.1 .AND. SSD_ID.NE.0) ) CHECK_TELE = 1
	   3289 	         IF (STOP_ID.EQ.2 
	   3290      .               .AND.
	   3291      .                (SSD_ID.NE.2 .AND. SSD_ID.NE.0) ) CHECK_TELE = 1
	   3292 	         IF (STOP_ID.EQ.3 
	   3293      .               .AND.
	   3294      .                (SSD_ID.NE.3 .AND. SSD_ID.NE.0) ) CHECK_TELE = 1
	   3295 
	   3296 
	   3297 C                start checks
	   3298 C			start id only if TOF>0
	   3299 	  	 IF (PSTART.EQ.0 .AND. TIME_OF_FLIGHT.NE.0) CHECK_TELE = 1
	   3300 
	   3301 C			start id consistent with stop id
	   3302   	         IF ( (PSTART.EQ.1 .OR. PSTART.EQ.2  .OR. PSTART.EQ.7)
	   3303      .               .AND.
	   3304      .                (STOP_ID.NE.1 .AND. STOP_ID.NE.0) ) CHECK_TELE = 1
	   3305 	         IF ( (PSTART.EQ.3 .OR. PSTART.EQ.4  .OR. PSTART.EQ.8)
	   3306      .               .AND.
	   3307      .                (STOP_ID.NE.2 .AND. STOP_ID.NE.0) ) CHECK_TELE = 1
	   3308 	         IF ( (PSTART.EQ.5 .OR. PSTART.EQ.6  .OR. PSTART.EQ.9)
	   3309      .               .AND.
	   3310      .                (STOP_ID.NE.3 .AND. STOP_ID.NE.0) ) CHECK_TELE = 1
	   3311 
	   3312 C			start id consistent with solid state detector id
	   3313 	         IF ( (PSTART.EQ.1 .OR. PSTART.EQ.2  .OR. PSTART.EQ.7)
	   3314      .               .AND.
	   3315      .                (SSD_ID.NE.1 .AND. SSD_ID.NE.0) ) CHECK_TELE = 1
	   3316 	         IF ( (PSTART.EQ.3 .OR. PSTART.EQ.4  .OR. PSTART.EQ.8)
	   3317      .               .AND.
	   3318      .                (SSD_ID.NE.2 .AND. SSD_ID.NE.0) ) CHECK_TELE = 1
	   3319 	         IF ( (PSTART.EQ.5 .OR. PSTART.EQ.6  .OR. PSTART.EQ.9)
	   3320      .               .AND.
	   3321      .                (SSD_ID.NE.3 .AND. SSD_ID.NE.0) ) CHECK_TELE = 1
	   3322 
	   3323 	
	   3324 C  	find telescope ID if check_tele ok:
	   3325         IF (CHECK_TELE.EQ.0) THEN
	   3326 	  IF (PSTART.NE.0) THEN
	   3327   	    IF (PSTART.EQ.1 .OR. PSTART.EQ.2  .OR. PSTART.EQ.7) TELE_ID = 1
	   3328 	    IF (PSTART.EQ.3 .OR. PSTART.EQ.4  .OR. PSTART.EQ.8) TELE_ID = 2
	   3329 	    IF (PSTART.EQ.5 .OR. PSTART.EQ.6  .OR. PSTART.EQ.9) TELE_ID = 3
	   3330 	  ELSE IF (SSD_ID.NE.0) THEN
	   3331 	    IF (SSD_ID.EQ.1) TELE_ID = 1
	   3332 	    IF (SSD_ID.EQ.2) TELE_ID = 2
	   3333 	    IF (SSD_ID.EQ.3) TELE_ID = 3
	   3334 	  ENDIF
	   3335         ENDIF
	   3336 
	   3337        RETURN

TELESCOPE_ID                                                    21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  57
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   3338        END


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1128 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               178868 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              3888 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               29296   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2563 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               216387


ENTRY POINTS

    Address   Type  Name        
                                
  4-00006920        TELESCOPE_ID


VARIABLES

    Address   Type  Name               Address   Type  Name               Address   Type  Name          
                                                                                                        
      **      I*4   CHECK_TELE           **      I*4   SSD_ID               **      I*4   TIME_OF_FLIGHT
      **      I*4   ENERGY               **      I*4   STOP_ID                                          
      **      I*4   PSTART               **      I*4   TELE_ID                                          

TELESCOPE_ID                                                    21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  58
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   3339 
	   3340 
	   3341 c***************************************************************************************************
	   3342       SUBROUTINE OMR_EFF(EFF_DATA)
	   3343 c***************************************************************************************************
	   3344 C This routine calculates the efficiency for different ions at each voltage step. These efficiencies 
	   3345 C are for triple coincidence only, i.e. both mass/charge and non-zero mass obtained. 
	   3346 c
	   3347 c Created 30-MAR-1995 	by	K. CHOTOO from the one in WSTICS_RATES as template
	   3348 c
	   3349 C Subroutines called:	WSTICSEFF
	   3350 c Revision History:
	   3351 C	24-OCT-1996	K.CHOTOO	!Mass of ion included in efficiency correction
	   3352 C
	   3353 C***************************************************************************************************
	   3354 			IMPLICIT NONE
	   3355       REAL*4 DCR_FSR,			!DCR/FSR
	   3356      .       deltaE,			!Energy bandwidth (=0.019E)
	   3357      .       E,				!Energy
	   3358      .       EFF_DATA(0:31,1:30),      	!Matrix rate efficiency TCR/Io
	   3359      .       EPQ(0:31),            	!Energy/charge for each voltage step
	   3360      .       DCR_RSR,			!DCR/RSR
	   3361      .	     ION_CHARGE(1:30),		!Charge of ions
	   3362      .       ION_MASS(1:30),		!Mass of ions
	   3363      .       M,				!Mass
	   3364      .       MR_ENERGY(0:31,1:30),	!Total energy at each voltage step for rates
	   3365      .       TCR_FSR			!TCR/FSR             
	   3366 
	   3367       INTEGER I,J			!Counters
	   3368 
	   3369       DATA ION_MASS/1.000,3.971,3.971,11.916,11.916,11.916,15.872,15.872,15.872,20.019,24.112,24.112,
	   3370      .              27.863,27.863,27.863,55.404,55.404,55.404,55.404,55.404,55.404,55.404,
	   3371      .              0,0,0,0,0,0,0,0/
	   3372 
	   3373       DATA ION_CHARGE/1.0, 2.0, 1.0, 6.0, 5.0, 4.0, 7.0, 6.0, 1.0, 8.0, 10.0, 8.0, 12.0,
	   3374      .                9.0, 8.0, 16.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 0,0,0,0,0,0,0,0/
	   3375 
	   3376 
	   3377 C		************ STATEMENTS *************
	   3378 
	   3379       DO 10  I = 0,31
	   3380         EPQ(I) = 6.190722 * (1.1225857**I)
	   3381   10  CONTINUE
	   3382 
	   3383       DO 15 J=1,30			!Initialize efficiency array to 1.0
	   3384         DO 14 I=0,31
	   3385           EFF_DATA(I,J) = 1.0
	   3386   14    CONTINUE
	   3387   15  CONTINUE
	   3388 
	   3389       DO 20 I = 0,31
	   3390        DO 18 J = 1,22
	   3391          MR_ENERGY(I,J)  = EPQ(I) * ION_CHARGE(J)	
	   3392   18   CONTINUE
	   3393   20  CONTINUE 
	   3394 
	   3395       DO 40 J=1,22

OMR_EFF                                                         21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  59
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

	   3396         DO 30 I=0,31
	   3397           M = ION_MASS(J)
	   3398           E = MR_ENERGY(I,J)
	   3399           deltaE = 0.019*E				!Energy bandwidth
	   3400           CALL WSTICSEFF(E,M,DCR_RSR,TCR_FSR,DCR_FSR)
	   3401           IF(J .LE. 3) THEN
	   3402 	    IF((DCR_FSR * DCR_RSR).GT. 0) THEN		!Use DCR/Io for H+, He+2, and He+1
	   3403               EFF_DATA(I,J) = DCR_FSR * DCR_RSR * deltaE / M
	   3404             ELSE
	   3405               EFF_DATA(I,J) = 1.0
	   3406             ENDIF
	   3407 	  ELSE	    
	   3408 	    IF((TCR_FSR * DCR_RSR).GT. 0) THEN		!Use TCR/Io for other ions
	   3409               EFF_DATA(I,J) = TCR_FSR * DCR_RSR * deltaE / M	
	   3410             ELSE
	   3411               EFF_DATA(I,J) = 1.0
	   3412 	    ENDIF
	   3413 	  ENDIF
	   3414   30    CONTINUE
	   3415   40  CONTINUE
	   3416 
	   3417       RETURN
	   3418       END


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1128 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               178868 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              3888 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               29296   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2563 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               216387


ENTRY POINTS

    Address   Type  Name   
                           
  4-00006D68        OMR_EFF


VARIABLES

    Address   Type  Name        Address   Type  Name        Address   Type  Name   
                                                                                   
  2-00000018  R*4   DCR_FSR   0-0000000C# R*4   E         0-00000008# R*4   M      
  2-0000001C  R*4   DCR_RSR REG-########  I*4   I         2-00000020  R*4   TCR_FSR
REG-00000025  R*4   DELTAE  REG-########  I*4   J                                  



OMR_EFF                                                         21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  60
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37

ARRAYS

     Address  Type  Name              Bytes  Dimensions

      **      R*4   EFF_DATA           3840  (0:31, 30)
  2-00000F30  R*4   EPQ                 128  (0:31)
  1-00000000  R*4   ION_CHARGE          120  (30)
  1-00000078  R*4   ION_MASS            120  (30)
  2-00000030  R*4   MR_ENERGY          3840  (0:31, 30)



LABELS

    Address   Label     Address   Label     Address   Label     Address   Label
                                                                               
  4-00000000   10         **       15         **       20         **       40  
  4-00000000   14     4-00000000   18     4-0000715C   30                      


FUNCTIONS AND SUBROUTINES REFERENCED

  Type  Name           
                       
        WSTICSEFF      

OMR_EFF                                                         21-MAR-1997 23:37:34    DEC Fortran V6.2-508                Page  61
                                Symbol Table                    21-MAR-1997 23:37:23    [WIND.SOFTWARE.STICS]STICS_PHA_TREND.FOR;37



  +---------------------------------------------------+
  |               KEY TO ADDRESS CODE FORMATS         |
  |   ppp-oooooooo  - In Psect ppp, Offset oooooooo   |
  |   ***-********  - External                        |
  |               # - Suffix: Also In Registers       |
  |   REG-rrrrrrrr  - In Register rrrrrrrr            |
  |   REG-########  - In Various Registers            |
  |        **       - Not Used; Not Allocated         |
  +---------------------------------------------------+


COMMAND QUALIFIERS

  /ALIGNMENT=(COMMONS=(PACKED,NOMULTILANGUAGE),RECORDS=PACKED)
  /ASSUME=(ACCURACY_SENSITIVE,BACKSLASH,NODUMMY_ALIASES,NOUNDERSCORE)
  /CHECK=(ASSERTIONS,BOUNDS,FORMAT,FP_EXCEPTIONS,OVERFLOW,NOUNDERFLOW)
  /DEBUG=(NOSYMBOLS,TRACEBACK)
  /DESIGN=(NOCOMMENTS)
  /SHOW=(DICTIONARY,INCLUDE,MAP,PREPROCESSOR)
  /STANDARD=(NOSEMANTIC,NOSOURCE_FORM,NOSYNTAX)
  /WARNINGS=(NOALIGNMENT,NOARGUMENT_CHECKING,NODECLARATIONS,GENERAL,NOTRUNCATED_SOURCE,UNCALLED,
             UNINITIALIZED,UNREACHABLE,UNUSED)
  /NOAUTOMATIC  /BLAS=NOMAPPED  /CONVERT=NATIVE  /NOCROSS_REFERENCE  /NOD_LINES  /ERROR_LIMIT=30  /EXTEND_SOURCE
  /NOPAD_SOURCE  /NOF77  /FLOAT=G_FLOAT  /IEEE_MODE=FAST  /ROUNDING_MODE=NEAREST
  /GRANULARITY=QUADWORD  /INSTRUCTION_SET=FLOATING  /INTEGER_SIZE=32  /NOMACHINE_CODE
  /MATH_LIBRARY=ACCURATE  /NAMES=UPPERCASE  /OPTIMIZE=(LEVEL=4,UNROLL=0)  /REAL_SIZE=32  /NORECURSIVE
  /NOSEPARATE_COMPILATION  /NOSYNCHRONOUS_EXCEPTIONS  /NOSYNTAX_ONLY  /TERMINAL=NOSTATISTICS  /NOTIE  /VMS
  /NOANALYSIS_DATA
  /NODIAGNOSTICS
  /INCLUDE=(.FOR,.f,FORT$INCLUDE:.FOR,FORT$INCLUDE:.f)
  /LIST=SMS1:[WIND.SOFTWARE.STICS]STICS_PHA_TREND.LIS;23
  /OBJECT=SMS1:[WIND.SOFTWARE.STICS]STICS_PHA_TREND.OBJ;22
  /NOLIBRARY
   sys$lib=SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1

COMPILER: DEC Fortran V6.2-508-274F

COMPILATION STATISTICS

  CPU time:         12.07 seconds
  Elapsed time:     14.79 seconds
  Pagefaults:         948
  I/O Count:          121
