STICS_ION_VELOCITY                                               3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page   1
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	      1 CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
	      2       PROGRAM VSHIFT_SPECTRA
	      3 C
	      4 C This program reads a WIND L1 data file and dissects the PHA data, calculates 
	      5 C the m & m/q for each event, then bins them to the corresponding ion, with 
	      6 C user requested data selection criteria imposed.
	      7 C Data has basic rate and efficiency corrections applied. The flux for the different
	      8 C ions are calculated and written to the output file along with the error and the raw
	      9 C counts.  If the flux is omni-directional, the units are #/(cm2-sr-sec-keV/amu), and
	     10 C #/(cm2-sec-keV/amu) for parallel beam.
	     11 C
	     12 C The ion velocity at each voltage step is normalized to the solar wind bulk speed and
	     13 C binned according to fraction of solar wind speed. 
	     14 C 
	     15 C
	     16 C VSHIFT_SPECTRA created 27-SEP-1996 by K.CHOTOO using STICS_PHA_SPECTRA as a template
	     17 C
	     18 C Revision History:
	     19 C	 3-OCT-1996	K.CHOTOO	Error checks written to separate file.
	     20 C	10-OCT-1996	K.CHOTOO	H_SPEED - He2_SPEED should be less than 60 km/s
	     21 C	16-OCT-1996	K.CHOTOO	Average speeds only over selected range
	     22 C	14-JAN-1997	K.CHOTOO	Changed Geometric Factor to values in Master's
	     23 C					Paper. Now using MASS speed routine supplied by
	     24 C					George Ho.
	     25 C	16-JAN-1997	K.CHOTOO	Changed Geometric Factor for parallel beam back
	     26 C					to 0.50 for Kappa Paper.
	     27 C	 7-FEB-1997	K.CHOTOO	Added bin hits to output file
	     28 C	25-FEB-1997	K.CHOTOO	Added new subroutine to identify telescope 2 ions
	     29 C	16-MAR-1997	K.CHOTOO	For Solar wind ions, use Telescope 2 and DVS < 9.
	     30 C	27-MAR-1997	K.CHOTOO	Select data by telescope instead of by START, STOP, 
	     31 C					or SSD IDs. Find Start position at beginning of 
	     32 C					time period instead of at start of day.
	     33 C	 2-JUN-1997	K.CHOTOO 	Use new fudge factor (0.72 +/- 0.18) for parallel 
	     34 C					beam geometric factor = 0.68 +/- 0.17
	     35 C	 4-SEP-1997	K.CHOTOO	Made correction to flux when averaging over more
	     36 C					than one telescope.
	     37 C	 8-SEP-1997	K.CHOTOO	If error in flux is greater than flux, then make
	     38 C					error equal to flux.	
	     39 C	23-SEP-1997	K.CHOTOO	Changed format of output data file for easier 
	     40 C					transfer to Kaleidagraph
	     41 C	 3-DEC-1997	K.CHOTOO	Program can now sum different time periods together.
	     42 C
	     43 C
	     44 CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
	     45 
	     46       IMPLICIT NONE
	     47 
	     48       INCLUDE	'INC_DIR:EDBDEF.INC/NOLIST'

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page   2
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	    586       INCLUDE   'INC_DIR:L1FMT.INC/NOLIST'
	    718       INCLUDE   '($RMSDEF)'
    1	    719 !*** MODULE $RMSDEF ***
    1	    720 CDEC$ OPTIONS/ALIGN=(RECORDS=PACKED,COMMONS=PACKED)
    1	    721  ! 
    1	    722  !  This SDL File Generated by VAX-11 Message V04-00 on 26-JAN-1994 13:51:15.86
    1	    723  ! 
    1	    724  ! 	.TITLE	RMSMSG -RMS COMPLETION CODES
    1	    725  !  *************************************************************************
    1	    726  !  *                                                                       *
    1	    727  !  * COPYRIGHT (C) DIGITAL EQUIPMENT CORPORATION, 1976, 1977, 1978, 1979,  *
    1	    728  !  * 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,     *
    1	    729  !  * 1991,1992                                                             *
    1	    730  !  * ALL RIGHTS RESERVED.                                                  *
    1	    731  !  * UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT LAWS  OF  THE  UNITED *
    1	    732  !  * STATES.                                                               *
    1	    733  !  *                                                                       *
    1	    734  !  * THE SOFTWARE CONTAINED ON THIS MEDIA IS PROPRIETARY TO  AND  EMBODIES *
    1	    735  !  * THE   CONFIDENTIAL   TECHNOLOGY  OF  DIGITAL  EQUIPMENT  CORPORATION. *
    1	    736  !  * POSSESSION, USE, DUPLICATION OR DISSEMINATION  OF  THE  SOFTWARE  AND *
    1	    737  !  * MEDIA  IS  AUTHORIZED  ONLY  PURSUANT TO A VALID WRITTEN LICENSE FROM *
    1	    738  !  * DIGITAL EQUIPMENT CORPORATION.                                        *
    1	    739  !  *                                                                       *
    1	    740  !  * RESTRICTED RIGHTS LEGEND USE, DUPLICATION, OR DISCLOSURE BY THE  U.S. *
    1	    741  !  * GOVERNMENT  IS  SUBJECT  TO RESTRICTIONS AS SET FORTH IN SUBPARAGRAPH *
    1	    742  !  * (C)(1)(II) OF DFARS 252.227-7013, OR IN FAR 52.227-19, AS APPLICABLE. *
    1	    743  !  *                                                                       *
    1	    744  !  *************************************************************************
    1	    745  ! ++
    1	    746  !  FACILITY: RMS
    1	    747  ! 
    1	    748  !  ABSTRACT:
    1	    749  ! 
    1	    750  ! 	THIS MODULE DEFINES ALL RMS COMPLETION CODES.
    1	    751  ! 
    1	    752  !  ENVIRONMENT:
    1	    753  ! 
    1	    754  ! 	THE MESSAGE TRANSLATOR MUST BE USED TO CONVERT RMSMSG.MSG INTO
    1	    755  ! 	RMSMSG.SDL.  THE SDL TRANSLATOR MUST THEN BE USED TO CONVERT
    1	    756  ! 	RMSMSG.SDL INTO RMSMSG.MAR (AND RMSMSG.B32).
    1	    757  ! 
    1	    758  !  AUTHOR: LEO F. LAVERDURE,	CREATION DATE:  10-DEC-1976
    1	    759  ! 
    1	    760  !  MODIFIED BY:
    1	    761  ! 
    1	    762  !                DEE RYAN                                30-SEP-1993
    1	    763  !                CORRECTED USE OF DIGITAL PRODUCT NAMES.
    1	    764  ! 
    1	    765  ! 	X-5	EMW		ELINOR M. WOODS		28-SEP-1993
    1	    766  ! 		MERGE IN OPENVMS VAX CORAL FIX:
    1	    767  ! 
    1	    768  ! 		X-10	EMW0019  ELINOR M. WOODS  	21-SEP-1993
    1	    769  ! 		ADD ONE NEW USER-REPORTABLE ERROR STATUS (WITH AN
    1	    770  ! 		ASSOCIATED STV): NETBTS.  RELOCATE NEW IDXSEARCH STATUS
    1	    771  ! 		(SEE X-9) FROM "ERROR with STV" SECTION TO "ERROR WITHOUT 
    1	    772  ! 		STV" section.  Expand "WITH STV' AND "without STV"
    1	    773  ! 		COMMENTS TO CLARIFY DIFFERENCE BETWEEN TWO.

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page   3
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    774  ! 
    1	    775  ! 	X-4	EMW0016		ELINOR M. WOODS		10-AUG-1993
    1	    776  ! 		MERGE IN CORAL FIX:
    1	    777  ! 
    1	    778  ! 		MODIFY SEVERITY OF TWO DTF ERROR CODES (DTFACC AND
    1	    779  ! 		DTFCRE) FROM FATAL TO ERROR, AS REQUESTED BY SNA/DTF
    1	    780  ! 		FACILITY.		
    1	    781  ! 
    1	    782  ! 		ALSO MOVE NEW IDXSEARCH STATUS FROM ERROR WITH NO 
    1	    783  ! 		STV GROUPING TO ERROR WITH STV GROUPING.
    1	    784  ! 
    1	    785  ! 	X-3	EMW0010		ELINOR M. WOODS		02-JUL-1993
    1	    786  ! 		TO SUPPORT NEW KEY-LESS-THAN FUNCTIONALITY, ADDITION 
    1	    787  ! 		OF ONE USER-REPORTABLE ERROR STATUS:  IDXSEARCH, AND
    1	    788  ! 		TWO NEW RMS-INTERNAL ERROR STATUSES:  LSCAN AND 
    1	    789  ! 		ROOTSRCH.		
    1	    790  ! 
    1	    791  ! 	X-2	CW0019		CHRIS WHITAKER		11-NOV-1992
    1	    792  ! 		MERGE IN OPENVMS VAX V6.0 CHANGES
    1	    793  ! 
    1	    794  ! 		X-8	JM0012	JOHN MUNZER		11-NOV-1992
    1	    795  ! 		CHANGE TEXT FOR RMS$_LNE.
    1	    796  ! 
    1	    797  ! 		X-7	JM0006	JOHN MUNZER		17-APR-1992
    1	    798  ! 		ADD !XL PARAMETER TO RMS$_BUG TO REPORT R2.
    1	    799  ! 
    1	    800  ! 	X-1	RAB		RICHARD A. BISHOP	24-JUN-1991
    1	    801  ! 		MOVED TO [STARLET] FACILITY
    1	    802  ! 
    1	    803  ! 	==================================
    1	    804  ! 	OLD AUDIT TRAIL FOLLOWS:
    1	    805  ! 
    1	    806  ! 	X-33	LSS0154		LEONARD S. SZUBOWICZ	 4-APR-1990
    1	    807  ! 		ALTER TEXT AND FAO PARAMETERS OF RMS$_RUH AND RMS$_BUG
    1	    808  ! 		CONDITION VALUES FOR RMS/DDTM SUPPORT.
    1	    809  ! 
    1	    810  ! 	X-32	PJH		PAUL J. HOULIHAN	17-JAN-1990
    1	    811  ! 		CHANGE TEXT FOR RMS$_INCOMPSHR ERROR MESSAGE.
    1	    812  ! 
    1	    813  ! 	X-31	LSS0130		LEONARD S. SZUBOWICZ	12-OCT-1989
    1	    814  ! 		MERGE OF RMS/DDTM GENERATION X-30D2.
    1	    815  ! 		ADD GENERAL DDTM_ERR ERROR MESSAGE FOR DDTM SERVICE FAILURES;
    1	    816  ! 		STV WILL CONTAIN THE FAILING SYSTEM SERVICE CONDITION VALUE.
    1	    817  ! 
    1	    818  ! 	X-30	LSS0080		LEONARD S. SZUBOWICZ	06-OCT-1988
    1	    819  ! 		ADD RMS$_OK_ACT MESSAGE FOR USE BY FUTURE WORK TO $DISPLAY.
    1	    820  ! 		THIS IS PART OF LATENT SUPPORT FOR RMS/DDTM.
    1	    821  ! 
    1	    822  ! 	X-29	GJA0080		GARY J. ALLISON		06-JUN-1988
    1	    823  ! 		CHANGE TEXT OF SEMANTICS MESSAGE.
    1	    824  ! 
    1	    825  ! 	X-28	GJA0072		GARY J. ALLISON		02-MAR-1988
    1	    826  ! 		ADD EXT_ERR, OPNOTSUP, EXTNOTFOU, AND SEMANTICS MESSAGES.
    1	    827  ! 
    1	    828  ! 	X-27	PMV0072		PETER M. VATNE		08-OCT-1987
    1	    829  ! 		CHANGE RMS$_NOJNLLIC TO RMS$_JNLNOTAUTH.
    1	    830  ! 

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page   4
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    831  !  	X-26	LSS0057		LEONARD S. SZUBOWICZ	15-SEP-1987
    1	    832  ! 		CHANGE TEXT FOR THE RMS$_OK_DUP STATUS SUCH THAT THE MESSAGE
    1	    833  ! 		IS APPLICABLE TO $GET AS WELL AS $PUT.
    1	    834  ! 
    1	    835  ! 	X-25	PMV0068		PETER M. VATNE		11-SEP-1987
    1	    836  ! 		ADD RMS$_NOJNLLIC, NO RMS JOURNALING LICENSE, FOR LMF.
    1	    837  ! 
    1	    838  ! 	X-24	RNM0026		RUSSELL N. MURRAY	15-AUG-1987
    1	    839  ! 		ADD RMS$_SYNCH MESSAGE FOR NOTIFICATION OF SYNCHRONOUS
    1	    840  ! 		COMPLETION.
    1	    841  ! 
    1	    842  ! 	X-23	JEJ0479		JAMES E JOHNSON		13-AUG-1987
    1	    843  ! 		ADD RMS$_IVATRACE MESSAGE.
    1	    844  ! 
    1	    845  ! 	X-22	PMV0061		PETER M. VATNE		03-AUG-1987
    1	    846  ! 		CHANGE RESERVED MESSAGE RMS$_BUG_XX5 TO RMS$_BUG_RU_COMMIT_FAIL
    1	    847  ! 		TO CORRESPOND TO POSITIVE RMS BUGCHECK FTL$_RU_COMMIT_FAIL.
    1	    848  ! 
    1	    849  !  	X-21	LSS0042		LEONARD S. SZUBOWICZ	13-MAY-1987
    1	    850  ! 		CHANGE RESERVED MESSAGE RMS$_BUG_XX4 TO RMS$_BUG_RU_ABORT_FAIL
    1	    851  ! 		TO CORRESPOND TO POSITIVE RMS BUGCHECK FTL$_RU_ABORT_FAIL
    1	    852  ! 	
    1	    853  ! 	X-20	SAD0034		STUART A. DAVIDSON	12-MAR-1987 
    1	    854  ! 		DROP QUOTES FROM SNADTF MESSAGE TEXT.
    1	    855  ! 
    1	    856  ! 	X-19	PJH		PAUL J. HOULIHAN	19-JAN-1987
    1	    857  ! 		MERGE IN 17J1.
    1	    858  ! 
    1	    859  ! 		X-17J1	PJH		PAUL J. HOULIHAN	15-JAN-1987
    1	    860  ! 			FIX SEVERAL SMALL JNL PROBLEMS.
    1	    861  ! 			ADD RMS$_BUG_FLUSH_JNL_FAILED CODE.
    1	    862  ! 
    1	    863  ! 	X-18	KPS0148		KENNETH P. SIEGEL	04-DEC-1986
    1	    864  ! 		ADDED SNPPF (STATISTICS MONITORING NOT SUPPORTED FOR
    1	    865  ! 		PROCESS PERMANENT FILES) ERROR MESSAGE.
    1	    866  ! 
    1	    867  ! 	X-17	PMV0025		PETER M. VATNE		24-NOV-1986
    1	    868  ! 		ADD NEW MESSAGE, RMS$_NOTSAMEJNL.  THIS STATUS IS
    1	    869  ! 		USED TO RESTRICT AI/BI WITH RU JOURNALING TO A
    1	    870  ! 		SINGLE LONG-TERM JOURNAL FILE.
    1	    871  ! 
    1	    872  ! 	X-16	DAS		DAVID A. SOLOMON	18-NOV-1986
    1	    873  ! 		ADD NEW MESSAGE, RMS$_DELJNS. REMOVE RMS$_XCR (BY REPLACING IT
    1	    874  ! 		WITH A PLACEHOLDER), AS JOURNALING BITS ARE NO LONGER
    1	    875  ! 		SPECIFIED IN THE $XABJNL. SLIGHT WORDING CHANGE ON DETACHED
    1	    876  ! 		RU RECOVERY ERROR MESSAGES.
    1	    877  ! 
    1	    878  ! 	X-15	DAS		DAVID A. SOLOMON	12-NOV-1986
    1	    879  ! 		FIX ERROR IN X-5/X-6: JOURNALING VARIANT NOT MERGED
    1	    880  ! 		CORRECTLY, RESULTING IN SEVERAL JOURNALING MESSAGES NUMBERS
    1	    881  ! 		BEING DIFFERENT IN THE MAININE THAN WHAT THEY WERE ON THE
    1	    882  ! 		JOURNALING VARIANT. ALSO, MOVE NEW SNADTF MESSAGES TO RE-USE
    1	    883  ! 		AVAILABLE UNUSED MESSAGE NUMBERS, INSTEAD OF GENERATING NEW
    1	    884  ! 		ONES. FINALLY, CHANGE RMS$_BUG_ABORT TO RMS$_BUG_RU_ACTIVE.
    1	    885  ! 
    1	    886  ! 	X-14	SAD0014		STUART A. DAVIDSON	 4-NOV-1986
    1	    887  ! 		SNADTF - FIX TYPO IN DTFACC, DTFCRE

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page   5
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    888  ! 
    1	    889  ! 	X-13	SAD0014		STUART A. DAVIDSON	 3-NOV-1986
    1	    890  ! 		SNADTF - FIX TYPO, ADD 2 ADDITIONAL MESSAGES.
    1	    891  ! 
    1	    892  ! 	X-12	JEJ0377		JAMES E JOHNSON		29-OCT-1986
    1	    893  ! 		ADD NOEXTEND ERROR CODE TO FLAG FAILED RELATIVE FILE
    1	    894  ! 		EXTENDS DUE TO PREVIOUS FAILURES.
    1	    895  ! 
    1	    896  ! 	X-11	KPS0131		KENNETH P. SIEGEL	25-OCT-1986
    1	    897  ! 		ADDED SNS ERROR CODE FOR STATISTICS NOT SUPPORT ON
    1	    898  ! 		NON-DISK DEVICES.
    1	    899  ! 
    1	    900  ! 	X-10	SAD009		STUART A. DAVIDSON	06-OCT-1986
    1	    901  ! 		ADD COMPLETION CODES FOR SNADTF (IBM DATA XFER)
    1	    902  ! 
    1	    903  ! 	X-9	GJA0003		GARY J. ALLISON		29-SEP-1986
    1	    904  ! 		ADD DETACHED RECOVERY ERROR MESSAGES
    1	    905  ! 
    1	    906  ! 	X-8	PMV0008		PETER M. VATNE		24-SEP-1986
    1	    907  ! 		MODIFY RMS$_ACC_AIJ, RMS$_ACC_BIJ, AND RMS$_ACC_ATJ
    1	    908  ! 		TO ALSO OUTPUT THE STV.
    1	    909  ! 
    1	    910  ! 	X-7	JWT0243		JIM TEAGUE		 2-SEP-1986
    1	    911  ! 		ADD NEW ERRORS FOR COLLATED KEYS.
    1	    912  ! 
    1	    913  ! 	X-6	GJA		GARY J. ALLISON		29-JUL-1986
    1	    914  ! 		REMOVE DUPS FROM JNL MERGE.
    1	    915  ! 
    1	    916  ! 	X-5	GJA		GARY J. ALLISON		29-JUL-1986
    1	    917  ! 		MERGE JOURNALING INTO MAINLINE
    1	    918  ! 
    1	    919  ! 		X-3J6	DAS		DAVID A. SOLOMON	14-APR-1986
    1	    920  ! 			REMOVE RMS$_RUH_FILE (USING A GENERAL RUF MESSAGE INSTEAD).
    1	    921  ! 			CHANGE RMS$_RUH TEXT TO NOT HAVE FAO PARAMETERS. ADD
    1	    922  ! 			RMS$_BUG_RURECERR.
    1	    923  ! 	
    1	    924  ! 		X-3J5	JEJ0302		JAMES E JOHNSON		 4-APR-1986
    1	    925  ! 			ADD RMS$_RRF (ERROR DURING RU RECOVERY) AND
    1	    926  ! 			RMS$_RUH/RMS$_RUH_FILE (USED TO FORM TEXT OF RU HANDLER ERRORS
    1	    927  ! 			SENT TO OPCOM).
    1	    928  ! 	
    1	    929  ! 		X-3J4	JEJ0272		JAMES E JOHNSON		11-FEB-1986
    1	    930  ! 			ADD RMS$_RUF, RMS$_BUG_ABORT CODES.
    1	    931  ! 	
    1	    932  ! 		X-3J3	JEJ0237		JAMES E JOHNSON		16-DEC-1985
    1	    933  ! 			ADD RMS$_RUNDOWN CODE
    1	    934  ! 	
    1	    935  ! 		X-3J2	JEJ0205		JAMES E JOHNSON		25-OCT-1985
    1	    936  ! 			ADD JOURNAL SPECIFIC WRTJNL_XXJ ERROR CODES TO REPLACE
    1	    937  ! 			THE GENERIC ERRWRTJNL CODE.
    1	    938  ! 
    1	    939  ! 	X-4	JEJ0216		JAMES E JOHNSON		18-NOV-1985
    1	    940  ! 		MERGE X-3J2 INTO MAIN LINE FOR V4.4.
    1	    941  ! 
    1	    942  ! 		X-3J2	JEJ0205		JAMES E JOHNSON		25-OCT-1985
    1	    943  ! 			ADD JOURNAL SPECIFIC WRTJNL_XXJ ERROR CODES TO REPLACE
    1	    944  ! 			THE GENERIC ERRWRTJNL CODE.

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page   6
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    945  ! 
    1	    946  ! 	X-3	JEJ0161		JAMES E JOHNSON		 9-SEP-1985
    1	    947  ! 		UPDATE RMS JOURNALING MESSAGES.
    1	    948  ! 
    1	    949  ! 	X-2	JWT0212		JIM TEAGUE		 4-SEP-1985
    1	    950  ! 		ADD (WHAT IS FOR NOW) AN INTERNAL STATUS CODE TO 
    1	    951  ! 		DIFFERENTIATE BETWEEN FINDING A DELETED RECORD (DEL)
    1	    952  ! 		AND FINDING IT BUT WITH A DIFFERENT KEY (KEY_MISMATCH).
    1	    953  ! 		
    1	    954  ! 	V03-024	RAS0314		RON SCHAEFER		21-JUN-1984
    1	    955  ! 		WORK OVER THE MESSAGES ONE MORE TIME:  FIX TYPO IN OK_RNF,
    1	    956  ! 		DELETE ACPEOF ERROR, DELETE WSF ERROR.
    1	    957  ! 
    1	    958  ! 	V03-023	RAS0282		RON SCHAEFER		28-MAR-1984
    1	    959  ! 		MINOR TEXT CHANGES AND COMMENTS ADDED.
    1	    960  ! 		DELETE RMS$_COP ERROR.
    1	    961  ! 
    1	    962  ! 	V03-022	DAS0005		DAVID SOLOMON		19-MAR-1984
    1	    963  ! 		REMOVE RMS$_ECHO (NO LONGER NEEDED AS A RESULT OF NEW
    1	    964  ! 		IMPLEMENTATION FOR ECHO SYS$INPUT -> SYS$OUTPUT).
    1	    965  ! 
    1	    966  ! 	V03-021	JWT0150		JIM TEAGUE		01-FEB-1984
    1	    967  ! 		ADD RMS$_IFF FOR TRYING TO WRITE-ACCESS A FILE ON 
    1	    968  ! 		MAGTAPE THAT HAS NON-0 VALUE FOR ANSI BUFFER OFFSET.
    1	    969  ! 
    1	    970  ! 	V03-020	RAS0233		RON SCHAEFER		 9-JAN-1984
    1	    971  ! 		ADD RMS$_NOVALPRS ERROR FOR $SEARCH NOT PRECEDED BY
    1	    972  ! 		VALID $PARSE.
    1	    973  ! 
    1	    974  ! 	V03-019	JWT0148		JIM TEAGUE		20-DEC-1983
    1	    975  ! 		ADD A JNL XAB ERROR FOR CONFLICTING RU ATTRIBUTES
    1	    976  ! 		ON $CREATE: RMS$_XCR.
    1	    977  ! 
    1	    978  ! 	V03-018	RAS0171		RON SCHAEFER		28-JUL-1983
    1	    979  ! 		ADD RMS$_BUSY; A STRUCTURE-LESS ERROR (R0-ONLY STATUS)
    1	    980  ! 		REPLACING TEMP3.
    1	    981  ! 
    1	    982  ! 	V03-017	DAS0004		DAVID SOLOMON		28-JUN-1983
    1	    983  ! 		ADD RMS$_FILEPURGED; ADD RMS$_ACPEOF FOR ZALEWSKI.
    1	    984  ! 
    1	    985  ! 	V03-016	KPL0007		PETER LIEBERWIRTH	 8-JUN-1983
    1	    986  ! 		FIX SPELLING IN JNL ERROR MESSAGES, ADD CJF ERROR WHICH
    1	    987  ! 		WILL SOON SUBSUME COP AND CQE.
    1	    988  ! 
    1	    989  ! 	V03-015	DAS0003		DAVID SOLOMON		18-FEB-1983
    1	    990  ! 		ADD XNF (REPLACING TEMP9), TMR (NEW), LWC (NEW).
    1	    991  ! 
    1	    992  ! 	V03-014	KBT0497		KEITH B. THOMPSON	18-FEB-1983
    1	    993  ! 		ADD INCOMPSHR ERROR (REUSE OF TEMP1 SLOT)
    1	    994  ! 
    1	    995  ! 	V03-013	RAS0120		RON SCHAEFER		 2-FEB-1983
    1	    996  ! 		ADD ECHO PSEUDO-STATUS TO SUPPORT ECHO OF SYS$INPUT
    1	    997  ! 		TO SYS$OUTPUT.
    1	    998  ! 
    1	    999  ! 	V03-012	JWH0174		JEFFRY W. HORN		24-JAN-1983
    1	   1000  ! 		ADD CQE AND COP ERRORS.
    1	   1001  ! 

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page   7
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1002  ! 	V03-011	KPL0006		PETER LIEBERWIRTH	 7-JAN-1983
    1	   1003  ! 		ADD OK_RULK FOR RECOVERY UNIT SUPPORT.
    1	   1004  ! 
    1	   1005  ! 		ADD REENT ERROR FOR $RENAME.
    1	   1006  ! 		
    1	   1007  ! 	V03-009	JWH0153		JEFFREY W. HORN		 8-DEC-1982
    1	   1008  ! 		ADD NRU ERROR.
    1	   1009  ! 
    1	   1010  ! 	V03-008	JWH0152		JEFFREY W. HORN		 8-DEC-1982
    1	   1011  ! 		ADD JNS ERROR.
    1	   1012  ! 
    1	   1013  ! 	V03-007 MCN0002		MARIA DEL C. NASR	15-NOV-1982
    1	   1014  ! 		REPLACE ORD ERROR CODE ELIMINATED BY MCN0001, SINCE
    1	   1015  ! 		THE NETWORK CODE REFERENCES IT.
    1	   1016  ! 
    1	   1017  ! 	V03-006 MCN0001		MARIA DEL C. NASR	26-OCT-1982
    1	   1018  ! 		PRINT KEY OF REFERENCE OR AREA IDENTIFICATION NUMBER
    1	   1019  ! 		INSTEAD OF XAB ADDRESS FOR ERRORS RETURNED DURING
    1	   1020  ! 		INDEXED FILE CREATION.  ALSO RENAME ALL UNUSED ERROR
    1	   1021  ! 		CODES TO TEMP.
    1	   1022  ! 
    1	   1023  ! 	V03-005	JWH0102		JEFFREY W. HORN		24-SEP-1982
    1	   1024  ! 		ADD RUP ERROR.
    1	   1025  ! 
    1	   1026  ! 	V03-004	RAS0095		RON SCHAEFER		 7-SEP-1982
    1	   1027  ! 		ADD OVRDSKQUOTA ERROR.
    1	   1028  ! 
    1	   1029  ! 	V03-002	JWH0002		JEFFREY W. HORN		26-JUL-1982
    1	   1030  ! 		CONVERT TO .MSG FORMAT.   ADD RUM ERROR.
    1	   1031  ! 
    1	   1032  ! 	V03-001	JWH0001		JEFFREY W. HORN		20-JUL-1982
    1	   1033  ! 		ADD JNF, JOP, AND NOJ ERRORS.
    1	   1034  ! 
    1	   1035  ! 	V02-042	KPL0005		PETER LIEBERWIRTH	 4-FEB-1982
    1	   1036  ! 		ADD ERROR MESSAGES RMS$_EXENQLM AND RMS$_DEADLOCK
    1	   1037  ! 		CORRECTLY.
    1	   1038  ! 
    1	   1039  ! 	V02-041	CDS0001		C D SAETHER	24-JAN-1982
    1	   1040  ! 		ADD GBC AND CRMP ERRORS.
    1	   1041  ! 
    1	   1042  ! 	V02-040	JAK0069		J A KRYCKA	15-JAN-1982
    1	   1043  ! 		ADD SUPPORT AND NETFAIL ERROR CODES.
    1	   1044  ! 
    1	   1045  ! 	V02-039	JAK0068		J A KRYCKA	31-DEC-1981
    1	   1046  ! 		MODIFY TEXT FOR SUP, NET, BUG_DAP, AND ENV ERROR MESSAGES.
    1	   1047  ! 
    1	   1048  ! 	V02-038 LJA0001		LAURIE ANDERSON 20-DEC-1981
    1	   1049  ! 		MODIFIED SOME MESSAGES TO READ BETTER.
    1	   1050  ! 
    1	   1051  ! 	V02-037	JAK0063		J A KRYCKA	31-AUG-1981
    1	   1052  ! 		ADD CRE_STM SUCCESS CODE.
    1	   1053  ! 
    1	   1054  ! 	V02-036	KPL0004		PETER LIEBERWIRTH	13-JAN-1981
    1	   1055  ! 		ADD ENQ SEVERE ERROR MESSAGE, TO INDICATE $ENQ/$DEQ FAILURE.
    1	   1056  ! 		ALSO ADD SUCCESS CODES OK_RRL, AND OK_WAT.
    1	   1057  ! 
    1	   1058  ! 	V02-035	REFORMAT	J A KRYCKA	30-JUL-1980

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page   8
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1059  ! 
    1	   1060  ! --
    1	   1061 	PARAMETER RMS$_FACILITY = '00000001'X
    1	   1062 	PARAMETER RMS$V_STVSTATUS = '0000000E'X	 !  MOVE TO BIT 14 OF THE
    1	   1063  !  STATUS CODE IT INDICATES
    1	   1064  !  THAT STV CONTAINS A SECONDARY
    1	   1065  !  STATUS CODE.
    1	   1066 	PARAMETER RMS$_SUC = '00010001'X
    1	   1067 	PARAMETER RMS$_NORMAL = '00010001'X
    1	   1068  ! +
    1	   1069  ! 
    1	   1070  ! 	SUCCESS CODES
    1	   1071  ! 
    1	   1072  ! -
    1	   1073  !  BIT 16 = BIT 15 = 1
    1	   1074 	PARAMETER RMS$_STALL = '00018001'X
    1	   1075  !  (NOTE: USER NEVER RECEIVES THIS CODE)
    1	   1076 	PARAMETER RMS$_PENDING = '00018009'X
    1	   1077 	PARAMETER RMS$_OK_DUP = '00018011'X
    1	   1078 	PARAMETER RMS$_OK_IDX = '00018019'X
    1	   1079  !   (RECORD HAS BEEN INSERTED, BUT INDEX STRUCTURE IS NO LONGER
    1	   1080  !   OPTIMAL.)
    1	   1081 	PARAMETER RMS$_OK_RLK = '00018021'X
    1	   1082  !  (BECAUSE LOCKER SET RLK IN ROP FIELD WHEN RECORD WAS LOCKED.)
    1	   1083 	PARAMETER RMS$_OK_RRL = '00018029'X
    1	   1084  !  (BECAUSE READER SET RRL IN ROP FIELD WHEN ACCESSING RECORD.)
    1	   1085  !  (THIS CODE USED TO BE OK_RRV)
    1	   1086  ! OK_RRV	;MSG <record was inserted successfully in primary>
    1	   1087  !   (BUT IT MAY NOT BE ACCESSIBLE VIA ONE-OR-MORE SECONDARY KEYS,
    1	   1088  !   AND NOT BY RFA ADDRESSING. FILE RE-ORGANIZATION RECOMMENDED!)
    1	   1089 	PARAMETER RMS$_KFF = '00018031'X
    1	   1090 	PARAMETER RMS$_OK_ALK = '00018039'X
    1	   1091 	PARAMETER RMS$_OK_DEL = '00018041'X
    1	   1092 	PARAMETER RMS$_OK_RNF = '00018049'X
    1	   1093 	PARAMETER RMS$_OK_LIM = '00018051'X
    1	   1094 	PARAMETER RMS$_OK_NOP = '00018059'X
    1	   1095 	PARAMETER RMS$_OK_WAT = '00018061'X
    1	   1096  !  (BECAUSE WAT BIT IN ROP WAS SET AND RECORD WAS ALREADY
    1	   1097  !  LOCKED.)
    1	   1098 	PARAMETER RMS$_CRE_STM = '00018069'X
    1	   1099 	PARAMETER RMS$_OK_RULK = '00018071'X
    1	   1100 	PARAMETER RMS$_SYNCH = '00018079'X
    1	   1101 	PARAMETER RMS$_OK_ACT = '00018081'X
    1	   1102 	PARAMETER RMS$_OK_NOCURTID = '00018089'X
    1	   1103  ! +
    1	   1104  ! 
    1	   1105  ! 	SUCCESS CODES PASSED THRU FROM DRIVERS AND ACP -	BIT 15 = 0
    1	   1106  ! 
    1	   1107  ! -
    1	   1108 	PARAMETER RMS$_CONTROLC = '00010651'X	 !  TERMINAL I/O ABORTED DUE TO CTRL/C
    1	   1109 	PARAMETER RMS$_CONTROLO = '00010609'X
    1	   1110  !  TERMINAL I/O ABORTED DUE TO CTRL/O
    1	   1111 	PARAMETER RMS$_CONTROLY = '00010611'X
    1	   1112  !  TERMINAL I/O ABORTED DUE TO CTRL/Y
    1	   1113 	PARAMETER RMS$_CREATED = '00010619'X
    1	   1114  !  FILE WAS CREATED, NOT OPENED
    1	   1115 	PARAMETER RMS$_SUPERSEDE = '00010631'X

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page   9
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1116  !  CREATED FILE SUPERSEDED EXISTING VERSION
    1	   1117 	PARAMETER RMS$_OVRDSKQUOTA = '00010669'X
    1	   1118  !  DISK USAGE EXCEEDS DISK QUOTA
    1	   1119 	PARAMETER RMS$_FILEPURGED = '00010679'X
    1	   1120  !  CREATE FILE CAUSED OLDEST FILE
    1	   1121  !  VERSION TO BE PURGED
    1	   1122  ! +
    1	   1123  ! 
    1	   1124  ! 	WARNING CODES
    1	   1125  ! 
    1	   1126  ! -
    1	   1127  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1128 	PARAMETER RMS$_BOF = '00018198'X
    1	   1129 	PARAMETER RMS$_RNL = '000181A0'X
    1	   1130 	PARAMETER RMS$_RTB = '000181A8'X
    1	   1131 	PARAMETER RMS$_TMO = '000181B0'X
    1	   1132 	PARAMETER RMS$_TNS = '000181B8'X
    1	   1133 	PARAMETER RMS$_BES = '000181C0'X
    1	   1134 	PARAMETER RMS$_PES = '000181C8'X
    1	   1135  ! +
    1	   1136  ! 
    1	   1137  ! 	ERROR CODES - WITHOUT STV (THAT IS, STV MAY BE USED BUT NO ASSOCIATED
    1	   1138  ! 		      CONDITION CODE IS IN STV)
    1	   1139  ! 
    1	   1140  ! -
    1	   1141  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1142 	PARAMETER RMS$_ACT = '0001825A'X
    1	   1143 	PARAMETER RMS$_DEL = '00018262'X
    1	   1144 	PARAMETER RMS$_INCOMPSHR = '0001826A'X
    1	   1145 	PARAMETER RMS$_DNR = '00018272'X
    1	   1146 	PARAMETER RMS$_EOF = '0001827A'X
    1	   1147 	PARAMETER RMS$_FEX = '00018282'X
    1	   1148 	PARAMETER RMS$_FLK = '0001828A'X
    1	   1149 	PARAMETER RMS$_FNF = '00018292'X
    1	   1150 	PARAMETER RMS$_PRV = '0001829A'X
    1	   1151 	PARAMETER RMS$_REX = '000182A2'X
    1	   1152 	PARAMETER RMS$_RLK = '000182AA'X
    1	   1153 	PARAMETER RMS$_RNF = '000182B2'X
    1	   1154  !   (RECORD NEVER WAS IN FILE, OR HAS BEEN DELETED.)
    1	   1155 	PARAMETER RMS$_WLK = '000182BA'X
    1	   1156 	PARAMETER RMS$_EXP = '000182C2'X
    1	   1157 	PARAMETER RMS$_NMF = '000182CA'X
    1	   1158 	PARAMETER RMS$_SUP = '000182D2'X
    1	   1159  !  (NOTE THAT SUPPORT HAS REPLACED SUP EXCEPT WHEN RMS CANNOT
    1	   1160  !  MAP THE DAP STATUS CODE INTO A FAL STATUS CODE.)
    1	   1161  !  (NOTE ALSO THAT SUP SHOULD HAVE BEEN DEFINED AS A SEVERE
    1	   1162  !  ERROR CODE. HOWEVER, SUPPORT IS A SEVERE ERROR CODE.)
    1	   1163 	PARAMETER RMS$_RSA = '000182DA'X
    1	   1164 	PARAMETER RMS$_CRC = '000182E2'X
    1	   1165 	PARAMETER RMS$_WCC = '000182EA'X
    1	   1166 	PARAMETER RMS$_IDR = '000182F2'X
    1	   1167 	PARAMETER RMS$_LWC = '000182FA'X
    1	   1168 	PARAMETER RMS$_UNUSED1 = '00018302'X
    1	   1169 	PARAMETER RMS$_NOVALPRS = '0001830A'X
    1	   1170 	PARAMETER RMS$_KEY_MISMATCH = '00018312'X
    1	   1171 	PARAMETER RMS$_RUH = '0001831A'X
    1	   1172 	PARAMETER RMS$_JND = '00018322'X

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  10
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1173 	PARAMETER RMS$_BADPHASE = '0001832A'X
    1	   1174 	PARAMETER RMS$_TOWDR = '00018332'X
    1	   1175 	PARAMETER RMS$_NEXDR = '0001833A'X
    1	   1176 	PARAMETER RMS$_INVDRMSG = '00018342'X
    1	   1177 	PARAMETER RMS$_RU_ACTIVE = '0001834A'X
    1	   1178 	PARAMETER RMS$_UNKRUFAC = '00018352'X
    1	   1179 	PARAMETER RMS$_LIMBO = '0001835A'X
    1	   1180 	PARAMETER RMS$_IVATRACE = '00018362'X
    1	   1181 	PARAMETER RMS$_OPNOTSUP = '0001836A'X
    1	   1182 	PARAMETER RMS$_EXTNOTFOU = '00018372'X
    1	   1183 	PARAMETER RMS$_EXT_ERR = '0001837A'X
    1	   1184 	PARAMETER RMS$_SEMANTICS = '00018382'X
    1	   1185 	PARAMETER RMS$_LSCAN = '0001838A'X
    1	   1186 	PARAMETER RMS$_ROOTSRCH = '00018392'X
    1	   1187 	PARAMETER RMS$_IDXSEARCH = '0001839A'X
    1	   1188 	PARAMETER RMS$_NETBTS = '000183A2'X
    1	   1189  ! +
    1	   1190  ! 
    1	   1191  ! 	ERROR CODES - WITH STV ERROR CODE (THAT IS, STV CONTAINS AN ASSOCIATED CONDITION CODE)
    1	   1192  ! 
    1	   1193  ! -
    1	   1194  !  BIT 16 = BIT 15 = BIT 14 = 1
    1	   1195 	PARAMETER RMS$_ACC = '0001C002'X
    1	   1196 	PARAMETER RMS$_CRE = '0001C00A'X
    1	   1197 	PARAMETER RMS$_DAC = '0001C012'X
    1	   1198 	PARAMETER RMS$_ENT = '0001C01A'X
    1	   1199 	PARAMETER RMS$_EXT = '0001C022'X
    1	   1200 	PARAMETER RMS$_FND = '0001C02A'X
    1	   1201 	PARAMETER RMS$_MKD = '0001C032'X
    1	   1202 	PARAMETER RMS$_DPE = '0001C03A'X
    1	   1203 	PARAMETER RMS$_SPL = '0001C042'X
    1	   1204 	PARAMETER RMS$_DNF = '0001C04A'X
    1	   1205 	PARAMETER RMS$_RUF = '0001C052'X
    1	   1206 	PARAMETER RMS$_WRTJNL_AIJ = '0001C05A'X
    1	   1207 	PARAMETER RMS$_WRTJNL_BIJ = '0001C062'X
    1	   1208 	PARAMETER RMS$_WRTJNL_ATJ = '0001C06A'X
    1	   1209 	PARAMETER RMS$_WRTJNL_RUJ = '0001C072'X
    1	   1210 	PARAMETER RMS$_RRF = '0001C07A'X
    1	   1211 	PARAMETER RMS$_DDTM_ERR = '0001C082'X
    1	   1212  ! +
    1	   1213  ! 
    1	   1214  ! 	SEVERE ERROR CODES - WITHOUT STV (THAT IS, STV MAY BE USED BUT NO ASSOCIATED
    1	   1215  ! 			     CONDITION CODE IS IN STV)
    1	   1216  ! 
    1	   1217  ! -
    1	   1218  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1219 	PARAMETER RMS$_DTFCDDREC = '000183EC'X
    1	   1220 	PARAMETER RMS$_AID = '000183F4'X
    1	   1221 	PARAMETER RMS$_ALN = '000183FC'X
    1	   1222 	PARAMETER RMS$_ALQ = '00018404'X
    1	   1223 	PARAMETER RMS$_ANI = '0001840C'X
    1	   1224 	PARAMETER RMS$_AOP = '00018414'X
    1	   1225 	PARAMETER RMS$_BKS = '0001841C'X
    1	   1226 	PARAMETER RMS$_BKZ = '00018424'X
    1	   1227 	PARAMETER RMS$_BLN = '0001842C'X
    1	   1228 	PARAMETER RMS$_BUG = '00018434'X
    1	   1229 	PARAMETER RMS$_BUG_DDI = '0001843C'X

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  11
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1230 	PARAMETER RMS$_BUG_DAP = '00018444'X
    1	   1231 	PARAMETER RMS$_BUG_RU_ACTIVE = '0001844C'X
    1	   1232 	PARAMETER RMS$_BUG_RURECERR = '00018454'X
    1	   1233 	PARAMETER RMS$_BUG_FLUSH_JNL_FAILED = '0001845C'X
    1	   1234 	PARAMETER RMS$_BUG_RU_ABORT_FAIL = '00018464'X
    1	   1235 	PARAMETER RMS$_BUG_RU_COMMIT_FAIL = '0001846C'X
    1	   1236 	PARAMETER RMS$_BUG_XX6 = '00018474'X
    1	   1237 	PARAMETER RMS$_BUG_XX7 = '0001847C'X
    1	   1238 	PARAMETER RMS$_BUG_XX8 = '00018484'X
    1	   1239 	PARAMETER RMS$_BUSY = '0001848C'X
    1	   1240 	PARAMETER RMS$_CCR = '00018494'X
    1	   1241 	PARAMETER RMS$_CHG = '0001849C'X
    1	   1242 	PARAMETER RMS$_CHK = '000184A4'X
    1	   1243 	PARAMETER RMS$_COD = '000184AC'X
    1	   1244 	PARAMETER RMS$_CUR = '000184B4'X
    1	   1245 	PARAMETER RMS$_DAN = '000184BC'X
    1	   1246 	PARAMETER RMS$_DEV = '000184C4'X
    1	   1247 	PARAMETER RMS$_DIR = '000184CC'X
    1	   1248 	PARAMETER RMS$_DME = '000184D4'X
    1	   1249 	PARAMETER RMS$_DNA = '000184DC'X
    1	   1250 	PARAMETER RMS$_DTP = '000184E4'X
    1	   1251 	PARAMETER RMS$_DUP = '000184EC'X
    1	   1252 	PARAMETER RMS$_DVI = '000184F4'X
    1	   1253 	PARAMETER RMS$_ESA = '000184FC'X
    1	   1254 	PARAMETER RMS$_ESS = '00018504'X
    1	   1255 	PARAMETER RMS$_FAB = '0001850C'X
    1	   1256 	PARAMETER RMS$_FAC = '00018514'X
    1	   1257 	PARAMETER RMS$_FLG = '0001851C'X
    1	   1258 	PARAMETER RMS$_FNA = '00018524'X
    1	   1259 	PARAMETER RMS$_FNM = '0001852C'X
    1	   1260 	PARAMETER RMS$_FSZ = '00018534'X
    1	   1261 	PARAMETER RMS$_FOP = '0001853C'X
    1	   1262 	PARAMETER RMS$_FUL = '00018544'X
    1	   1263 	PARAMETER RMS$_IAL = '0001854C'X
    1	   1264 	PARAMETER RMS$_IAN = '00018554'X
    1	   1265 	PARAMETER RMS$_IDX = '0001855C'X
    1	   1266 	PARAMETER RMS$_IFI = '00018564'X
    1	   1267 	PARAMETER RMS$_IMX = '0001856C'X
    1	   1268 	PARAMETER RMS$_IOP = '00018574'X
    1	   1269 	PARAMETER RMS$_IRC = '0001857C'X
    1	   1270 	PARAMETER RMS$_ISI = '00018584'X
    1	   1271 	PARAMETER RMS$_KBF = '0001858C'X
    1	   1272 	PARAMETER RMS$_KEY = '00018594'X
    1	   1273 	PARAMETER RMS$_KRF = '0001859C'X
    1	   1274 	PARAMETER RMS$_KSZ = '000185A4'X
    1	   1275 	PARAMETER RMS$_LAN = '000185AC'X
    1	   1276 	PARAMETER RMS$_RUNDOWN = '000185B4'X
    1	   1277 	PARAMETER RMS$_LNE = '000185BC'X
    1	   1278 	PARAMETER RMS$_DTFCVT = '000185C4'X
    1	   1279 	PARAMETER RMS$_MRN = '000185CC'X
    1	   1280 	PARAMETER RMS$_MRS = '000185D4'X
    1	   1281 	PARAMETER RMS$_NAM = '000185DC'X
    1	   1282 	PARAMETER RMS$_NEF = '000185E4'X
    1	   1283 	PARAMETER RMS$_DTFQUASYN = '000185EC'X
    1	   1284 	PARAMETER RMS$_NOD = '000185F4'X
    1	   1285 	PARAMETER RMS$_NPK = '000185FC'X
    1	   1286 	PARAMETER RMS$_ORD = '00018604'X	 ! ! NOT USED AS OF V4

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  12
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1287 	PARAMETER RMS$_ORG = '0001860C'X
    1	   1288 	PARAMETER RMS$_PBF = '00018614'X
    1	   1289 	PARAMETER RMS$_PLG = '0001861C'X
    1	   1290 	PARAMETER RMS$_POS = '00018624'X
    1	   1291 	PARAMETER RMS$_DTFQUAVAL = '0001862C'X
    1	   1292 	PARAMETER RMS$_QUO = '00018634'X
    1	   1293 	PARAMETER RMS$_RAB = '0001863C'X
    1	   1294 	PARAMETER RMS$_RAC = '00018644'X
    1	   1295 	PARAMETER RMS$_RAT = '0001864C'X
    1	   1296 	PARAMETER RMS$_RBF = '00018654'X
    1	   1297 	PARAMETER RMS$_RFA = '0001865C'X
    1	   1298 	PARAMETER RMS$_RFM = '00018664'X
    1	   1299 	PARAMETER RMS$_RHB = '0001866C'X
    1	   1300 	PARAMETER RMS$_RLF = '00018674'X
    1	   1301 	PARAMETER RMS$_ROP = '0001867C'X
    1	   1302 	PARAMETER RMS$_RRV = '00018684'X
    1	   1303 	PARAMETER RMS$_RVU = '0001868C'X
    1	   1304 	PARAMETER RMS$_RSS = '00018694'X
    1	   1305 	PARAMETER RMS$_RST = '0001869C'X
    1	   1306 	PARAMETER RMS$_RSZ = '000186A4'X
    1	   1307 	PARAMETER RMS$_SEQ = '000186AC'X
    1	   1308 	PARAMETER RMS$_SHR = '000186B4'X
    1	   1309 	PARAMETER RMS$_SIZ = '000186BC'X
    1	   1310 	PARAMETER RMS$_SQO = '000186C4'X
    1	   1311 	PARAMETER RMS$_DTFSESEST = '000186CC'X
    1	   1312 	PARAMETER RMS$_SYN = '000186D4'X
    1	   1313 	PARAMETER RMS$_TRE = '000186DC'X
    1	   1314 	PARAMETER RMS$_TYP = '000186E4'X
    1	   1315 	PARAMETER RMS$_UBF = '000186EC'X
    1	   1316 	PARAMETER RMS$_USZ = '000186F4'X
    1	   1317 	PARAMETER RMS$_VER = '000186FC'X
    1	   1318 	PARAMETER RMS$_XNF = '00018704'X
    1	   1319 	PARAMETER RMS$_XAB = '0001870C'X
    1	   1320 	PARAMETER RMS$_ESL = '00018714'X
    1	   1321 	PARAMETER RMS$_DTFSESTER = '0001871C'X
    1	   1322 	PARAMETER RMS$_ENV = '00018724'X
    1	   1323 	PARAMETER RMS$_PLV = '0001872C'X
    1	   1324 	PARAMETER RMS$_MBC = '00018734'X
    1	   1325 	PARAMETER RMS$_RSL = '0001873C'X
    1	   1326 	PARAMETER RMS$_WLD = '00018744'X
    1	   1327 	PARAMETER RMS$_NET = '0001874C'X	 !  (NOTE THAT NETFAIL HAS REPLACED NET EXCEPT WHEN RMS CANNOT
    1	   1328  !  MAP THE DAP STATUS CODE INTO A FAL STATUS CODE.)
    1	   1329 	PARAMETER RMS$_IBF = '00018754'X
    1	   1330 	PARAMETER RMS$_REF = '0001875C'X
    1	   1331 	PARAMETER RMS$_IFL = '00018764'X
    1	   1332 	PARAMETER RMS$_DFL = '0001876C'X
    1	   1333 	PARAMETER RMS$_KNM = '00018774'X
    1	   1334 	PARAMETER RMS$_IBK = '0001877C'X
    1	   1335 	PARAMETER RMS$_KSI = '00018784'X
    1	   1336 	PARAMETER RMS$_LEX = '0001878C'X
    1	   1337 	PARAMETER RMS$_SEG = '00018794'X
    1	   1338 	PARAMETER RMS$_SNE = '0001879C'X	 ! ! NOT USED AS OF V4
    1	   1339 	PARAMETER RMS$_SPE = '000187A4'X	 ! ! NOT USED AS OF V4
    1	   1340 	PARAMETER RMS$_UPI = '000187AC'X
    1	   1341 	PARAMETER RMS$_ACS = '000187B4'X
    1	   1342 	PARAMETER RMS$_STR = '000187BC'X
    1	   1343 	PARAMETER RMS$_FTM = '000187C4'X

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  13
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1344 	PARAMETER RMS$_GBC = '000187CC'X
    1	   1345 	PARAMETER RMS$_DEADLOCK = '000187D4'X
    1	   1346 	PARAMETER RMS$_EXENQLM = '000187DC'X
    1	   1347 	PARAMETER RMS$_JOP = '000187E4'X
    1	   1348 	PARAMETER RMS$_RUM = '000187EC'X
    1	   1349 	PARAMETER RMS$_JNS = '000187F4'X
    1	   1350 	PARAMETER RMS$_NRU = '000187FC'X
    1	   1351 	PARAMETER RMS$_IFF = '00018804'X
    1	   1352 	PARAMETER RMS$_DTFTRATBL = '0001880C'X
    1	   1353 	PARAMETER RMS$_DTFUNSTYP = '00018814'X
    1	   1354 	PARAMETER RMS$_DTFVERMIS = '0001881C'X
    1	   1355  ! +
    1	   1356  ! 
    1	   1357  ! 	ERROR CODES - WITHOUT STV
    1	   1358  ! 
    1	   1359  ! 	  DTFACC AND DTFCRE WERE ORIGINALLY INCLUDED IN THIS FATAL SEVERITY 
    1	   1360  ! 	  (NO STV) GROUPING.  IN ORDER TO CHANGE THEIR SEVERITY TO ERROR 
    1	   1361  ! 	  (NO STV) AND RETAIN THE SAME MESSAGE CODE VALUE, THE FOLLOWING 
    1	   1362  ! 	  SHIFTS IN SEVERITY FROM FATAL TO ERROR AND THEN BACK AGAIN ARE
    1	   1363  ! 	  DONE, WHILE RETAINING THE SAME ORIGINAL BASE ASSOCIATED WITH EACH.
    1	   1364  ! 
    1	   1365  ! -
    1	   1366  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1367 	PARAMETER RMS$_DTFACC = '00018822'X
    1	   1368  ! +
    1	   1369  ! 
    1	   1370  ! 	SEVERE ERROR CODES - WITHOUT STV
    1	   1371  ! 
    1	   1372  ! -
    1	   1373  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1374 	PARAMETER RMS$_BOGUSCOL = '0001882C'X
    1	   1375 	PARAMETER RMS$_ERRREADCOL = '00018834'X
    1	   1376 	PARAMETER RMS$_ERRWRITECOL = '0001883C'X
    1	   1377 	PARAMETER RMS$_SNS = '00018844'X
    1	   1378 	PARAMETER RMS$_NOEXTEND = '0001884C'X	 ! +
    1	   1379  ! 
    1	   1380  ! 	ERROR CODES - WITHOUT STV
    1	   1381  ! 
    1	   1382  ! -
    1	   1383  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1384 	PARAMETER RMS$_DTFCRE = '00018852'X
    1	   1385  ! +
    1	   1386  ! 
    1	   1387  ! 	SEVERE ERROR CODES - WITHOUT STV
    1	   1388  ! 
    1	   1389  ! -
    1	   1390  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1391 	PARAMETER RMS$_DELJNS = '0001885C'X
    1	   1392 	PARAMETER RMS$_NOTSAMEJNL = '00018864'X
    1	   1393 	PARAMETER RMS$_SNPPF = '0001886C'X
    1	   1394  ! +
    1	   1395  ! 
    1	   1396  ! 	SEVERE ERRORS - WITH STV ERROR CODE (THAT IS, STV CONTAINS AN ASSOCIATED CONDITION CODE)
    1	   1397  ! 
    1	   1398  ! -
    1	   1399  !  BIT 16 = BIT 15 = BIT 14 = 1
    1	   1400 	PARAMETER RMS$_ATR = '0001C0CC'X

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  14
                                                                 4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1401 	PARAMETER RMS$_ATW = '0001C0D4'X
    1	   1402 	PARAMETER RMS$_CCF = '0001C0DC'X
    1	   1403 	PARAMETER RMS$_CDA = '0001C0E4'X
    1	   1404 	PARAMETER RMS$_CHN = '0001C0EC'X
    1	   1405 	PARAMETER RMS$_RER = '0001C0F4'X
    1	   1406 	PARAMETER RMS$_RMV = '0001C0FC'X
    1	   1407 	PARAMETER RMS$_RPL = '0001C104'X
    1	   1408 	PARAMETER RMS$_SYS = '0001C10C'X
    1	   1409 	PARAMETER RMS$_WER = '0001C114'X
    1	   1410 	PARAMETER RMS$_WPL = '0001C11C'X
    1	   1411 	PARAMETER RMS$_IFA = '0001C124'X
    1	   1412 	PARAMETER RMS$_WBE = '0001C12C'X
    1	   1413 	PARAMETER RMS$_ENQ = '0001C134'X
    1	   1414 	PARAMETER RMS$_NETFAIL = '0001C13C'X
    1	   1415 	PARAMETER RMS$_SUPPORT = '0001C144'X
    1	   1416 	PARAMETER RMS$_CRMP = '0001C14C'X
    1	   1417 	PARAMETER RMS$_DTFCFGFIL = '0001C154'X
    1	   1418 	PARAMETER RMS$_REENT = '0001C15C'X
    1	   1419 	PARAMETER RMS$_ACC_RUJ = '0001C164'X
    1	   1420 	PARAMETER RMS$_TMR = '0001C16C'X
    1	   1421 	PARAMETER RMS$_ACC_AIJ = '0001C174'X
    1	   1422 	PARAMETER RMS$_ACC_BIJ = '0001C17C'X
    1	   1423 	PARAMETER RMS$_ACC_ATJ = '0001C184'X
    1	   1424 	PARAMETER RMS$_DTFDEFFIL = '0001C18C'X
    1	   1425 	PARAMETER RMS$_DTFREGFIL = '0001C194'X
    1	   1426 	PARAMETER RMS$_JNLNOTAUTH = '0001C19C'X
    1	   1427 CDEC$ END OPTIONS
    1	   1428 
	   1429 
	   1430 C  	************************************************
	   1431 C	*		data file names                *
	   1432 C	************************************************
	   1433 
	   1434       INTEGER*4 L1_LUN/19/,OUTUNIT,OPENMODE      !lu unit numbers for input,output,
	   1435 C						   mode option for searching 
	   1436 C						   for additional input files
	   1437       INTEGER*4 NAMELEN		        !number of characters in file name
	   1438       CHARACTER L1FILENAME*80		!input L1 data file name
	   1439       CHARACTER FULL_L1_NAME*80		!L1 data file with full directory information
	   1440       CHARACTER INPUTFILES(1:10)*80	!L1 file name array for multiple inputs
	   1441       INTEGER*4 IFILE		        !number of L1 files used (use with INPUTFILES)
	   1442 
	   1443 C     naming the output file
	   1444       LOGICAL   BRACK   		!A variable which is .TRUE. if there is 
	   1445 C                     			   a set of square brackets in the input file name.
	   1446       INTEGER*4 NINDEX, 		!used in rearranging the input file name to     
	   1447 C                      			   create the output file name.                    
	   1448      .          JSAVE   		!used in rearranging the input file name to 
	   1449 C                        		   create the output file name.
	   1450       CHARACTER*90 LISFIL1,LISFIL2	!holds the name of the input file for use
	   1451      .             			!  in creating the default output file names
	   1452       CHARACTER OUTFILENAME1*90, OUTFILENAME2*90
	   1453       CHARACTER*40 USERNAME1		!user defined output file name
	   1454 
	   1455       LOGICAL FIRSTFILE			!set to true if this is the first input file 
	   1456 
	   1457       CHARACTER*9 LABELS(1:30)		!Ion names

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  15
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   1458       DATA LABELS/ '       H ',   '     He2 ',  '     He1 ',   '      C6 ',
	   1459      +             '      C5 ',   '      C4 ',  '      07 ',   '      O6 ',
	   1460      +             '      O1 ',   '     Ne8 ',  '    Mg10 ',   '     Mg8 ',
	   1461      +		   '    Si12 ',   '     Si9 ',  '     Si8 ',   '    Fe16 ',
	   1462      +		   '    Fe14 ',   '    Fe12 ',  '    Fe11 ',   '    Fe10 ',
	   1463      +             '     Fe9 ',   '     Fe8 ',8*'         '/
	   1464 
	   1465       REAL*4 ION_AMU(1:30)			!Mass of ions
	   1466       DATA ION_AMU/1.000,3.971,3.971,11.916,11.916,11.916,15.872,15.872,15.872,20.019,24.112,24.112,
	   1467      .              27.863,27.863,27.863,55.404,55.404,55.404,55.404,55.404,55.404,55.404,
	   1468      .              0,0,0,0,0,0,0,0/
	   1469 
	   1470 
	   1471 C  	************************************************
	   1472 C	*		file, record or data status     *
	   1473 C	************************************************
	   1474 
	   1475       INTEGER*4 STATUS			!did L1 file open successfully
	   1476       LOGICAL   GOODSPIN		!data record has good data
	   1477 
	   1478 C  	************************************************
	   1479 C	*		type of output files           *
	   1480 C	************************************************
	   1481 
	   1482 
	   1483 C  	************************************************
	   1484 C	*		time search status     *
	   1485 C	************************************************
	   1486 
	   1487       LOGICAL COMPARE_TIME_GE,			!check on whether time is inbounds
	   1488      .        STARTFOUND,ENDFOUND,		!start/end time found?
	   1489      .        USE_SC_CLOCK			!which time on L1 to use (wall or s/c)
	   1490 
	   1491       INTEGER*4 MONTH,DAYOFMONTH,		 !user requested start and stop times
	   1492      .          ENDMONTH,ENDDAYOFMONTH		 ! month and day of month
	   1493 
	   1494       CHARACTER RUN_TIME*8, RUN_DATE*9		!run time and date
	   1495       CHARACTER*1 TIME_ANSWER		  !Yes/No reply for adding another time period
	   1496 
	   1497 c		********************************
	   1498 C               *   Spacecraft position in Re  *
	   1499 C		********************************
	   1500       REAL*4 X1_GSE,Y1_GSE,Z1_GSE,     		!Start position
	   1501      .       X2_GSE,Y2_GSE,Z2_GSE		!Stop position
	   1502       INTEGER*4 START_POS/1/			!Change to -1 after getting start position
	   1503 
	   1504 C  	************************************************
	   1505 C	*    intrument and s/c housekeeping info       *
	   1506 C	************************************************
	   1507 
	   1508       CHARACTER FIFO*3, TGS*3, RATEFLAG*1			!FIFO, TGS, BIT RATE characters
	   1509       CHARACTER*17 MODE(10) /'Science mode     ','Engineering mode ',
	   1510      &                       'Maneuver mode    ','Contingency mode ',
	   1511      &                       'Science mode     ','Engineering mode ',
	   1512      &                       'Maneuver mode    ','Contingency mode ',
	   1513      &                       'Transitional mode','Unknown mode     '/,
	   1514      &             MODE_AT_START			      	!value on first good record

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  16
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   1515 
	   1516       INTEGER*4 TRIGGER_MODE_CODE			      	!ADC trigger logic
	   1517       CHARACTER*22 TRIGGER_MODE(0:7) /
	   1518      &   'E                      ','Tn                    ',
	   1519      &   '(Tn.!E)+(Tn.En)        ','Tn.En                 ',
	   1520      &   'E+T                    ','(E.!T)+(Tn.!E)+(Tn.En)',
	   1521      &   'C.(E+T)                ','(E.!T)+(Tn.En)        '/
	   1522 
	   1523       INTEGER*4 DPPS_STEP_MODE		!DPPS Stepping sequence
	   1524       LOGICAL CODE_C1,CODE_C2		!rate compression codes for rate groups 1 and 2
	   1525 
	   1526       LOGICAL*1 BITRATE			!telemetry bit rate 
	   1527       INTEGER*4 INCREMENT    		!this value based on bitrate
	   1528 
	   1529 C    DPPS information
	   1530       INTEGER*4 DPPSPLUS,		!STICS +DPPS on=1, off=0
	   1531      .          DPPSMINUS,		!STICS -DPPS on=1, off=0
	   1532      .		DVS_CHECK,		!-1 for invalid DVS
	   1533      .		DVSTEP,			!DPPS voltage step number (0-31)
	   1534      .		BAD_DVS/0/,		!Number of bad DVS
	   1535      .          BAD_HDB/0/,		!Number of Bad HDBs
	   1536      .		GOOD_BR/0/,BAD_BR/0/		!if Basic Rate .lt. Sum PHA
	   1537 
	   1538 C  	************************************************
	   1539 C	*    data selection options                    *
	   1540 C	************************************************
	   1541 
	   1542       INTEGER*4  DATA_FILTER,		!data filter options 
	   1543      .           DATA_FILTER_COINC,	!data filtering by coincidence 
	   1544 C					 conditions
	   1545      .           DATA_FILTER_DVSTEP,	!data filter by voltage step
	   1546      .           DATA_DVSTEP_MIN,	!dv step min-max values for data filter
	   1547      .           DATA_DVSTEP_MAX,
	   1548      .           DATA_FILTER_RANGE,       !range selection
	   1549      .           DATA_FILTER_RANGECHECK,  !check calculated vs. dpu range
	   1550      .           DIRECTION_FILTER,        !select data by telescope info
	   1551      .           DIRECTION_FILTER_TEL1,   ! telescope 1 id
	   1552      .           DIRECTION_FILTER_TEL2,   ! telescope 2 id
	   1553      .		 DIRECTION_FILTER_TEL3,   ! telescope 3 id
	   1554      .		 DIRECTION_SECTOR_MIN,	  !sector filter: sum sectors .ge. min and .le. max
	   1555      .		 DIRECTION_SECTOR_MAX,
	   1556      .           TELE_FLAG,TELE_IDENT,    !    flag on telescope check, telescope id
	   1557      .           DATA_FILTER_MSPEED,      !speed filter
	   1558      .           DATA_MSPEED_MIN,         !	select data only if MASS solar
	   1559      .           DATA_MSPEED_MAX          !	speed is .GE. MIN and .LE. MAX
	   1560 
	   1561       CHARACTER*10 COINC(0:2) / '       ALL',           !trigger coincidence selection choices
	   1562      .                          '  M/Q-only',
	   1563      .                          '   M/Q & M'/
	   1564 
	   1565       CHARACTER*3 RONOFF, TONOFF            		!range selection ON, OFF status
	   1566       CHARACTER*5 RANGESEL(0:6) /			!range selection choices
	   1567      .                           '2 1 0' ,
	   1568      .                           '    0' ,
	   1569      .                           '  1  ' ,
	   1570      .                           '2    ' ,
	   1571      .                           '2   0' ,

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  17
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   1572      .                           '2 1  ' ,
	   1573      .                           '  1 0' /
	   1574       LOGICAL SEL_RANGE(0:2)
	   1575 
	   1576 
	   1577 C  	************************************************
	   1578 C	*    DPU DEFAULT VALUES and Calculations       *
	   1579 C	************************************************
	   1580 
	   1581 C    dpu default coefficients
	   1582       REAL*4
	   1583      .          DPU_ELOW, DPU_EHIGH,DPU_TLOW,DPU_THIGH,	 !dpu values for Emin,Emax,Tmin,Tmax
	   1584      .          DPU_AM(6),DPU_BM(6),			 !dpu values for mass (A) and 
	   1585 C							      Nm (B) coefficients
	   1586      .          DPU_C1_EQ,DPU_C2A_EQ,			 !    E/Q (C and D) coefficients
	   1587      .          DPU_C2B_EQ,DPU_D1_EQ,DPU_D2_EQ,
	   1588      .          DPU_EMQ(3),				 !    Nq (E) coefficients
	   1589      .          DPU_BK_MQ				 !    M/Q value where C2A vs C2B is used
	   1590       INTEGER*4 DPU_BK_C2	      			 !    Nq value where C2A vs C2B is used
	   1591 
	   1592 C    dpu algorithm values for e/q, mass and m/q:
	   1593       REAL*4    DPU_E_OVER_Q,		!calculated e/q,m, and m/q using dpu algorithm
	   1594      .          DPU_EPQ(0:31),
	   1595      .          DPU_MASS,
	   1596      .          DPU_MASS_OVER_Q
	   1597 
	   1598       INTEGER*4 DPU_RANGE		!dpu algorithm calculation for range
	   1599 
	   1600 C  	************************************************************
	   1601 C	*    DPU DEFAULT MASS, M/Q Matrix binning parameters       *
	   1602 C	************************************************************
	   1603 
	   1604       INTEGER*4 DPU_NQ_MAX,DPU_NM_MAX	!dpu max NQ,NM values (i.e, number of bins)
	   1605       REAL*4    DPU_MQMAX,DPU_MQMIN,	!    max M/Q, min M/Q 
	   1606      .          DPU_MMAX,DPU_MMIN	!    max mass, min mass
	   1607       REAL*4    DPU_KM,DPU_KQ		!    Nm, Nq resolution (KM, KQ)
	   1608 
	   1609       INTEGER*4 DPU_NM,DPU_NQ		!dpu algorithm calculation for Nm and Nm assignments
	   1610 
	   1611       REAL*4    DPU_NM_M(0:70),DPU_NQ_MPQ(0:130)       !mass and m/q values of NM,NQ bin boundaries
	   1612 C						        (lower bounds)
	   1613 
	   1614 C  	************************************************
	   1615 C	*    USER DEFINED  Coefficients		       *
	   1616 C	************************************************
	   1617 
	   1618       REAL*4    ELOW,EHIGH,TLOW,THIGH,               !energy and time range
	   1619      .          AM(6),BM(6), 			     !mass algorithm coefficients
	   1620      .          C1_EQ,C2A_EQ,C2B_EQ,D1_EQ,D2_EQ,     !e/q, m/q algorihm coefficients
	   1621      .          EMQ(3),BK_MQ, 
	   1622      .		RKM, RKQ			     !NM,NQ binning resolution
	   1623       INTEGER*4 BK_C2				     !NQ value for selecting C2
	   1624 
	   1625 C  	************************************************************
	   1626 C	*    USER DEFINED MASS, M/Q Matrix binning parameters      *
	   1627 C	************************************************************
	   1628 

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  18
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   1629 C    binning parameters
	   1630       INTEGER*4 NQ_MAX,NM_MAX,		!user defined max NQ,NM values (i.e, number of bins)
	   1631      .          USER_NQ_MAX,USER_NM_MAX !user request for Nq_max,Nm_max 
	   1632 C					   (allows -1 to mean "use dpu default values")
	   1633       REAL*4    MQMAX,MQMIN,		!user defined M/Q max, min
	   1634      .          USER_MQMAX,USER_MQMIN,	!     request              (-1 = dpu values)
	   1635      .          MMAX, MMIN,		!user defined Mass max, min
	   1636      .          USER_MMAX,USER_MMIN	!     request              (-1 = dpu values)
	   1637 
	   1638       INTEGER*4 PHA_NQ, PHA_NM		!algorithm calculation for Nm and Nm assignments
	   1639 
	   1640       REAL*4    USER_NM_M(0:200)  ,USER_NQ_MPQ(0:300)   !mass and m/q values of bin boundaries
	   1641       REAL*4    USER_NM_MID(0:200),USER_NQ_MID(0:300)   !mass and m/q values of bin middle
	   1642       REAL*4    SPECIES_ENERGY, SPECIES_MASS,		!species energy by voltage step
	   1643      .          SPECIES_CHARGE		  		!species mass and charge of each bin
	   1644 
	   1645 C  	************************************************
	   1646 C	*    STICS DATA			               *
	   1647 C	************************************************
	   1648 
	   1649 C    pha word - dissected:
	   1650       INTEGER*4 START_ID_RANGE,
	   1651      .          STOP_ID,
	   1652      .          ENERGY,
	   1653      .          SECTOR,
	   1654      .          SSD_ID,
	   1655      .          TIME_OF_FLIGHT,
	   1656      .          PSTART,
	   1657      .          RANGE
	   1658 C
	   1659 C To get limits on normalized velocity bins we assume a minimum solar wind speed of 250 km/s
	   1660 C and a maximum of 1100 km/s.  The minimum ion speed for STICS is O+ at DVS 00 = 273 km/s and
	   1661 C the maximum is H+ at DVS 31 = 6539 km/s. 
	   1662 C 	BMIN =  log10(273/1100)/BIN_SIZE = -25   
	   1663 C       BMAX =  log10(6539/250)/BIN_SIZE =  57    where Bin_Size = 0.5*log10(1.1225857) = 0.025
	   1664 C      
	   1665       INTEGER*4 BMIN,BMAX			!limits for array sizes
	   1666       REAL*4 BIN_SIZE                           
	   1667       PARAMETER (BMIN = -25, BMAX = 57, BIN_SIZE = 0.025)
	   1668 
	   1669 C  STICS rates
	   1670       INTEGER*4 WIND_DECOMPRESS			!function to return decompressed rates
	   1671       INTEGER*4 STICS_RATES(179)		!all the stics rates
	   1672       REAL*4    AVG_EPQ(BMIN:BMAX,1:30),	!Average E/Q for each bin
	   1673      .		BASIC_RATE (1:8,0:2), 		!Basic rate arrays accumulated over entire data set
	   1674      .          BASIC_PHA(0:15,0:2), 		!Counters for pha falling within a basic rate domain
	   1675      .		BASIC_W(0:15,0:2),		!Basic rate weight factor weight factors
	   1676      .   	CORR_DATA(BMIN:BMAX,1:30),	!Flux 
	   1677      .		DEADTIME_CORR(0:15),		!Sector accumulation deadtime
	   1678      . 		BIN_HITS(BMIN:BMAX,1:30),	!Counts the number of hits per bin relative to the DVS
	   1679      .		FLUX_ERR(BMIN:BMAX,1:30),	!Error in flux
	   1680      .   	RAW_COUNTS(BMIN:BMAX,1:30),	!Raw PHA data
	   1681      .		SUM_EPQ(BMIN:BMAX,1:30),	!Sum of E/Q for each bin
	   1682      .		V_ION(0:31,1:30)		!Velocity of ion at each voltage step
	   1683 
	   1684        REAL*4  EFF_CORR(0:31,1:30)	     	!Efficiency correction by voltage step and ion
	   1685        REAL*4  EFF /1.0/, UNUSED_PHA

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  19
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   1686        INTEGER*4 BIN_NUM,
	   1687      .		 VBIN, ION_INDEX,		!Ion array index
	   1688      .           VBIN_OVER,			!If VBIN > BMAX, increment by one
	   1689      .		 VBIN_UNDER			!If VBIN < BMAX, increment by one
	   1690 
	   1691        INTEGER*4 FLUX_TYPE			!1 for omni-directional and 2 for parallel beam
	   1692        REAL*4 AREA_FACTOR,        		!Factor by which Geometric Factor increases
	   1693 C						depending on  number of telescopes used.
	   1694      .        BETA/3.0/,			!Azimuthal acceptance angle
	   1695      .	      DELTA_T,				!Delta time
	   1696      .	      ENERGY_BANDWIDTH,	     		!energy bandwidth allowed 
	   1697      .        GEO_FAC,				!Geometric Factor
	   1698      .        SPIN_TIME/3.0/			!Spacecraft spin time = 3.0 secs
	   1699 
	   1700 C  	************************************************
	   1701 C	*    MASS derived Solar Wind values           *
	   1702 C	************************************************
	   1703 
	   1704        REAL*4  AVE_SPEED,		!Average solar wind speed
	   1705      .         BULK_SPEED,		!Solar wind speed
	   1706      .         BULK_UNCER,		!Uncertainty in solar wind speed from width
	   1707      .	       HIGH_SPEED,		!Highest valid speed encountered
	   1708      .	       LOW_SPEED,		!Lowest valid speed encountered
	   1709      .         SPEED_MEAN,		!Average speed over interval
	   1710      .         SPEED_HITS,		!Number of valid speed values in interval
	   1711      .	       SPEED_SIGMA,		!Standard deviation of speed
	   1712      .         SUM_HE2_SPEED,		!Sum of alpha speeds over interval
	   1713      .	       SUM_SW_SPEED,
	   1714      .	       SUM_SQ_SPEED,		!Sum of speed squared
	   1715      .         SW_SPEED                 !chosen solar wind speed to check against                      
	   1716        INTEGER*4 FIRSTSPEED/0/,		!Used to get speed at start time
	   1717      .		 ERR_SPD_FLAG,		!Error speed flag
	   1718      .		 BAD_SPEED/0/		!Number of invalid speed values
	   1719       CHARACTER*80 ERR_MESSAGE		!Message for invalid speed
	   1720 
	   1721 
	   1722 C  	************************************************
	   1723 C	*	DUMMY and TEMPORARY VARIABLES          *
	   1724 C	************************************************
	   1725 
	   1726       CHARACTER*1 YORN			!yes or no answer
	   1727       INTEGER*4   I,II,J,JJ,KK,K,L,N,NN,MM,CNTR,ITEMP,ITEMP2
	   1728       INTEGER*4   INQ,INM, ISTEP
	   1729 
	   1730 C  	************************************************
	   1731 C	*	Getting SMS L1 data:                   *
	   1732 C	************************************************
	   1733 
	   1734       RECORD /CORE/ SCI
	   1735       RECORD /HDBstr/ HDB
	   1736       RECORD /ST_RATE/ STICS_RATE
	   1737       RECORD /ST_PHA/ STICS_PHA
	   1738       RECORD /T/ START, END, TIME_TO_USE
	   1739       RECORD /MA_RATE/ MASS_RATE   ! receives data on rates from MASS sensor
	   1740       RECORD /MA_PHA/ MASS_PHA     ! receives data on tof's from the mass sensor
	   1741 
	   1742 

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  20
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   1743 C   **********************************************************
	   1744 C   *							     *
	   1745 C   *		USER PROMPTS	: input file		     *
	   1746 C   *				  table format		     *
	   1747 C   *				  data filtering	     *
	   1748 C   *				  times			     *
	   1749 C   *							     *
	   1750 C   **********************************************************
	   1751 
	   1752 C			FILE NAME PROMPTS
	   1753 C
	   1754 C Get input L1 filename
	   1755 C
	   1756       L1FILENAME = 'DATA_DIR:WI*L1*.DAT'
	   1757       CALL WIND_GET_FILENAME(L1FILENAME, STATUS)
	   1758       IF(STATUS.NE.1) THEN
	   1759 	WRITE (*,2) STATUS
	   1760     2   FORMAT(' FILE STATUS = ',I3)
	   1761         STOP
	   1762       ENDIF
	   1763 
	   1764 C
	   1765 C Prompt user for matrix resolution :  DPU DEFAULT VALUES are NM_MAX =  59
	   1766 C								NMIN = 0.5
	   1767 C								NMAX =  95
	   1768 C 
	   1769 
	   1770       USER_NM_MAX = -1	     !use DPU default
	   1771       USER_MMIN   = -1	     !use DPU default
	   1772       USER_MMAX   = -1       !use DPU default
	   1773       NM_MAX      = USER_NM_MAX
	   1774       MMIN        = USER_MMIN
	   1775       MMAX        = USER_MMAX
	   1776 
	   1777 C
	   1778 C Prompt user for matrix resolution :  DPU DEFAULT VALUES are NQ_MAX = 126
	   1779 C								NMIN = 0.9
	   1780 C								NMAX = 42
	   1781 
	   1782       USER_NQ_MAX  = -1   !use DPU default
	   1783       USER_MQMIN   = -1	  !use DPU default
	   1784       USER_MQMAX   = -1	  !use DPU default
	   1785       NQ_MAX       = USER_NQ_MAX
	   1786       MQMIN        = USER_MQMIN
	   1787       MQMAX        = USER_MQMAX
	   1788      
	   1789 C   ***********************************************************************
	   1790 C   *                    determine Nm, Nq coefficients                    *
	   1791 C   ***********************************************************************
	   1792 
	   1793        CALL USER_NMNQ_COEFF(USER_NQ_MAX,USER_MQMAX,USER_MQMIN,  !user input
	   1794      .                 USER_NM_MAX,USER_MMAX,USER_MMIN,
	   1795      .                 ELOW,EHIGH,TLOW,THIGH,      		!return values
	   1796      .                 NQ_MAX,MQMAX,MQMIN,
	   1797      .                 NM_MAX,MMAX ,MMIN,
	   1798      .                 RKM,RKQ,
	   1799      .                 AM,BM,C1_EQ,C2A_EQ,C2B_EQ,D1_EQ,D2_EQ,EMQ,

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  21
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   1800      .                 BK_C2, BK_MQ)
	   1801 
	   1802       DO INM = 0,200
	   1803          USER_NM_M(INM) = 0.
	   1804          IF(INM.GT.0.  .AND.  INM.LE.NM_MAX) THEN
	   1805             USER_NM_M(INM) = MMIN * RKM**(FLOAT(INM)-1.)	!lower bounds
	   1806 	    USER_NM_MID(INM) = 0.5* MMIN * (RKM**(FLOAT(INM)-1.) + RKM**FLOAT(INM)) !mid point
	   1807 	 ELSE IF (INM.EQ.0) THEN
	   1808 	    USER_NM_MID(INM) = 0.
	   1809 	 END IF
	   1810       END DO
	   1811 
	   1812       DO INQ = 0, 300
	   1813          USER_NQ_MPQ(INQ) = 0.
	   1814          IF(INQ.GT.0  .AND.  INQ.LE.NQ_MAX+1) THEN
	   1815            USER_NQ_MPQ(INQ) = MQMIN *RKQ**(FLOAT(INQ)-1.)
	   1816  	   USER_NQ_MID(INQ) = 0.5 * MQMIN *( RKQ**(FLOAT(INQ)-1.) + RKQ**FLOAT(INQ))
	   1817          ELSE IF (INQ.EQ.0) THEN
	   1818 	   USER_NQ_MID(INQ) = 0.5 * MQMIN
	   1819 	 ENDIF
	   1820       END DO
	   1821     
	   1822       DO I = 0,31
	   1823         DPU_EPQ(I) = 6.190722 * (1.1225857**I)
	   1824       END DO
	   1825 
	   1826 
	   1827 C			DATA FILTER PROMPTS
	   1828 
	   1829 C
	   1830 C Prompt user for filtering
	   1831 C 
	   1832 C     Initialize default conditions
	   1833       DATA_FILTER = 0			!no data filtering
	   1834       DATA_FILTER_COINC = 0		!no filtering by m or m/q conditions
	   1835       DATA_FILTER_DVSTEP  = -1		!no filtering by e/q
	   1836       DATA_DVSTEP_MIN = 0			!min dv step = 0
	   1837       DATA_DVSTEP_MAX = 31			!max dv step = 31
	   1838       DATA_FILTER_RANGE = 0		!no filtering by range
	   1839       DATA_FILTER_RANGECHECK = 0 	!no filtering by range check
	   1840       SEL_RANGE(0) = .TRUE.			!accept range 0 events
	   1841       SEL_RANGE(1) = .TRUE.			!accept range 1 events
	   1842       SEL_RANGE(2) = .TRUE.			!accept range 2 events
	   1843       DATA_FILTER_MSPEED = -1        	!no check on MASS solar wind speed
	   1844       DATA_MSPEED_MAX    = 1000     		!max sw speed selection is 1000 km/sec
	   1845       DATA_MSPEED_MIN    = 260      		!min sw speed selection is 260 km/sec
	   1846 
	   1847 
	   1848       DIRECTION_FILTER = 1         !YES - filtering by telescope info - see direction_check
	   1849       DIRECTION_FILTER_TEL1  = 1  	! select telescope 1 
	   1850       DIRECTION_FILTER_TEL2  = 2  	! select telescope 2
	   1851       DIRECTION_FILTER_TEL3  = 3  	! select telescope 3
	   1852       AREA_FACTOR = 3.0
	   1853       DIRECTION_SECTOR_MIN   =  0  !Sector range to sum over
	   1854       DIRECTION_SECTOR_MAX   = 15
	   1855 
	   1856       TYPE 6

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  22
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   1857     6 FORMAT(' Is data filtering by DATA TYPE desired? '
	   1858      .      /' (i.e.:  M,M/Q conditions, E/Q (VS), PHA Range, '
	   1859      .      /' Solar Wind Speed)    [Y/N] '$)
	   1860       ACCEPT 7, YORN
	   1861     7 FORMAT (A)
	   1862       IF (YORN.EQ.'Y' .OR. YORN.EQ.'y') THEN
	   1863            DATA_FILTER = 1
	   1864 	   CALL USER_REQUESTS_DATA_TYPE(
	   1865      .           DATA_FILTER_COINC,
	   1866      .           DATA_FILTER_DVSTEP,
	   1867      .		 DATA_DVSTEP_MIN,
	   1868      .		 DATA_DVSTEP_MAX,
	   1869      .           DATA_FILTER_RANGE,
	   1870      .           SEL_RANGE, 
	   1871      .           DATA_FILTER_RANGECHECK,
	   1872      .           DATA_FILTER_MSPEED,
	   1873      .           DATA_MSPEED_MIN,
	   1874      .           DATA_MSPEED_MAX)
	   1875       ENDIF
	   1876 
	   1877       TYPE 8
	   1878     8 FORMAT(/,' Is data filtering by DIRECTION desired? '
	   1879      .      /' (i.e.:  Telescope or Sector) '
	   1880      .      /' [Y/N] '$)
	   1881       ACCEPT 7, YORN
	   1882       IF (YORN.EQ.'Y' .OR. YORN.EQ.'y') THEN
	   1883           DIRECTION_FILTER = 1
	   1884 	  CALL DIRECTION_REQUESTS (
	   1885      .           DIRECTION_FILTER_TEL1,
	   1886      .           DIRECTION_FILTER_TEL2,
	   1887      .		 DIRECTION_FILTER_TEL3,
	   1888      .		 AREA_FACTOR,
	   1889      .		 DIRECTION_SECTOR_MIN,
	   1890      .		 DIRECTION_SECTOR_MAX)
	   1891       ENDIF
	   1892 
	   1893            
	   1894       TYPE 9
	   1895    9  FORMAT(/,' Is the flux omni-directional(1) or a parallel beam(2):  ',$)
	   1896       ACCEPT*, FLUX_TYPE
	   1897       IF(FLUX_TYPE .EQ. 2) THEN
	   1898 	GEO_FAC = 0.68				!parallel beam Geo Fac for each telescope
	   1899 	DELTA_T = SPIN_TIME * BETA/360.0 	!time oberserving sun
	   1900       ELSE
	   1901 	GEO_FAC = 0.029				!isotropic Geo Fac for each telescope
	   1902 	DELTA_T = SPIN_TIME			!time per spin
	   1903       ENDIF
	   1904 C
	   1905 C Prompt user for output filename
	   1906 C
	   1907       WRITE(6,*)'Enter name for output MATRIX file or <RETURN> for default name'
	   1908       READ(5,'(A)') USERNAME1
	   1909                                    
	   1910 
	   1911                        
	   1912 C			TIME PROMPTS
	   1913 C

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  23
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   1914 C Prompt user for start and stop times
	   1915 C
	   1916       TYPE 11
	   1917   11  FORMAT(/' Enter Start time( -1/ = whole file) - ',/,
	   1918      .       ' Year,Month,Day,Hour,Min,Sec: '$) 
	   1919       ACCEPT*, START.YEAR,MONTH,DAYOFMONTH,START.HR,START.MIN,START.SEC
	   1920       IF(START.YEAR.GE.0)THEN
	   1921 C
	   1922 C Convert month and day to day of year.
	   1923 C
	   1924         CALL CNVRT_T_YRMONDAY_TO_YEARDAY( START, MONTH, DAYOFMONTH)
	   1925         IF(START.YEAR.LT.100)START.YEAR=START.YEAR+1900        ! Allow for 2-digit years
	   1926         IF(START.YEAR.LT.1980)START.YEAR=START.YEAR+100        ! Allow for years beyond 1999
	   1927         TYPE 12
	   1928   12    FORMAT(' Enter End time - ',/,
	   1929      .         ' Year,Month,Day,Hour,Min,Sec: '$) 
	   1930         ACCEPT*, END.YEAR,ENDMONTH,ENDDAYOFMONTH,END.HR,END.MIN,END.SEC
	   1931 C
	   1932 C Convert month and day to day of year.
	   1933 C
	   1934         CALL CNVRT_T_YRMONDAY_TO_YEARDAY( END, ENDMONTH, ENDDAYOFMONTH)
	   1935         IF(END.YEAR.LT.100)END.YEAR=END.YEAR+1900        ! Allow for 2-digit years
	   1936         IF(END.YEAR.LT.1980)END.YEAR=END.YEAR+100        ! Allow for years beyond 1999
	   1937       ELSE
	   1938         END.YEAR=3000
	   1939       ENDIF
	   1940 
	   1941 C   **********************************************************
	   1942 C   *							     *
	   1943 C   *		INITIALIZATION				     *
	   1944 C   *							     *
	   1945 C   **********************************************************
	   1946 
	   1947 C Set time format to "wall" time (=0).  For flight data, s/c clock
	   1948 C and wall clock should be equivalent
	   1949 
	   1950        USE_SC_CLOCK = 0
	   1951 
	   1952        LOW_SPEED = 1000
	   1953        HIGH_SPEED = 200
	   1954        SW_SPEED = 0
	   1955        SUM_SQ_SPEED = 0
	   1956        SUM_SW_SPEED = 0
	   1957        SPEED_HITS = 0
	   1958        FIRSTFILE = .TRUE.
	   1959 
	   1960  
	   1961        DO I = BMIN, BMAX			!Normalized velocity bins
	   1962           DO L=1,30				!Ion
	   1963 	    BIN_HITS(I,L) = 0
	   1964 	    CORR_DATA(I,L) = 0
	   1965             RAW_COUNTS(I,L) = 0
	   1966 	    SUM_EPQ(I,L) = 0
	   1967 	  END DO
	   1968        END DO
	   1969 C
	   1970 C At the start of sectors 1-15 there is a 12 ms deadtime during which no data is accumulated.

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  24
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   1971 C The deadtime for sector 0 is 100 ms. Time for each sector = Spin Period/16. For nominal
	   1972 C spin period of 3 secs, each sector time = 0.1875 sec. Therefore, deadtime corrections are:
	   1973 C      	Sector 0    = 0.1875/(0.1875 - 0.100) = 2.143
	   1974 C       Sector 1-15 = 0.1875/(0.1875 - 0.012) = 1.068
	   1975 C
	   1976        DEADTIME_CORR(0) = 2.143
	   1977        DO I = 1,15
	   1978          DEADTIME_CORR(I) = 1.068
	   1979        END DO
	   1980 C
	   1981 C Get efficiency correction factors : ETA1 * ETA2 * DeltaE / Mass
	   1982 C EFF_CORR(DVS,ION_INDEX)
	   1983 C
	   1984       CALL OMR_EFF(EFF_CORR)
	   1985 
	   1986 C
	   1987 C Get velocity of each ion at every voltage step
	   1988 C 
	   1989       CALL STICS_ION_VELOCITY(V_ION)		
	   1990 
	   1991 
	   1992 C   get dpu default values for mass, mq, e/q, etc calculations -
	   1993 C   used here for header information only
	   1994 
	   1995        CALL DPU_DEFAULT_COEFF
	   1996      .                (DPU_NQ_MAX,DPU_MQMAX,DPU_MQMIN,
	   1997      .                 DPU_NM_MAX,DPU_MMAX,DPU_MMIN,
	   1998      .                 DPU_ELOW, DPU_EHIGH,DPU_TLOW,DPU_THIGH,
	   1999      .                 DPU_AM,DPU_BM,DPU_C1_EQ,DPU_C2A_EQ,
	   2000      .                 DPU_C2B_EQ,DPU_D1_EQ,DPU_D2_EQ,
	   2001      .                 DPU_EMQ,DPU_BK_C2,DPU_BK_MQ,DPU_KM,
	   2002      .                 DPU_KQ, DPU_NM_M, DPU_NQ_MPQ)
	   2003 
	   2004 C   **********************************************************
	   2005 C   *							     *
	   2006 C   *			CREATE OUTPUT FILE NAME		     *
	   2007 C   *                        either DEFAULT or		     *
	   2008 C   *                               USER DEFINED             *
	   2009 C   *							     *
	   2010 C   **********************************************************
	   2011 C
	   2012 C   Strip the extension off of the input file name so
	   2013 C   that we can give a new extension to the output file
	   2014 C
	   2015       NINDEX  = 80
	   2016       DO WHILE (L1FILENAME(NINDEX:NINDEX) .NE. '_')
	   2017          NINDEX = NINDEX - 1
	   2018       END DO
	   2019 C
	   2020 C   Find out if the input file name contains some directory
	   2021 C   designation.  This, if it exists, it will also be stripped off.
	   2022 C
	   2023       I = 1
	   2024       DO WHILE (.NOT. BRACK .AND. I .LT. NINDEX)
	   2025          IF (L1FILENAME(I:I) .EQ. '[') BRACK = .TRUE.
	   2026          I = I + 1
	   2027       END DO

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  25
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2028 C
	   2029 C   Now, finally, load the input file name into the output
	   2030 C   file name and add proper extension.  Format of input
	   2031 C   file is SMSDISK3:[WIND.L1DATA]WI_L1_SMS_YYYYMMDD_Vxx.DAT
	   2032 C   Write over all but the _YYYYMMDD_ part.
	   2033 C
	   2034       JSAVE = 1
	   2035       DO 3 I = 1, NINDEX
	   2036          IF (BRACK) THEN
	   2037             IF (L1FILENAME(I:I) .EQ. ']') BRACK = .FALSE.
	   2038          ELSE
	   2039             LISFIL1(JSAVE:JSAVE) = L1FILENAME(I:I)
	   2040             JSAVE = JSAVE + 1
	   2041          ENDIF
	   2042    3  CONTINUE
	   2043       LISFIL1(1:9) = 'STICS_PHA_'
	   2044       LISFIL2 = LISFIL1
	   2045       LISFIL1(JSAVE:JSAVE+8) = 'NMASS.FLX'        
	   2046       LISFIL2(JSAVE:JSAVE+8) = 'NMASS.ERR'
	   2047       OUTFILENAME2 = LISFIL2
	   2048 
	   2049       IF(USERNAME1(1:12) .NE. '            ') THEN
	   2050         OUTFILENAME1 = USERNAME1
	   2051       ELSE
	   2052         OUTFILENAME1 = LISFIL1 				! default matrix filename
	   2053       ENDIF      
	   2054       
	   2055       
	   2056 C   **********************************************************
	   2057 C   *							     *
	   2058 C   *			OPEN L1 INPUT FILE 		     *
	   2059 C   *			READ DATA			     *
	   2060 C   *							     *
	   2061 C   **********************************************************
	   2062 
	   2063 C
	   2064 C Open L1 file for input, and read first SR, Core, HDB, and STICS_RATES
	   2065 C
	   2066  1000 CONTINUE
	   2067       IF (FIRSTFILE .EQ. .FALSE.) THEN
	   2068         IFILE = IFILE + 1
	   2069 	OPENMODE = 1
	   2070 	CALL WIND_L1_OPEN_NEXT(L1_LUN,OPENMODE,L1FILENAME,L1_FILE_HEADER,STATUS)
	   2071       ELSE
	   2072         IFILE = 1
	   2073         FIRSTFILE = .FALSE.
	   2074         CALL WIND_L1_OPEN( L1_LUN, L1FILENAME, L1_FILE_HEADER, STATUS)
	   2075       ENDIF
	   2076       IF (STATUS .NE. 1) GOTO 9010
	   2077 
	   2078       INQUIRE(FILE=L1FILENAME,NAME=FULL_L1_NAME)
	   2079       INPUTFILES(IFILE) = FULL_L1_NAME
	   2080       WRITE(6,1001) FULL_L1_NAME
	   2081  1001 FORMAT(' OPEN FILE ',A)
	   2082   
	   2083       NAMELEN = INDEX(FULL_L1_NAME,' ') - 1
	   2084       IF (NAMELEN .LT. 1) NAMELEN=LEN(FULL_L1_NAME)

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  26
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2085 
	   2086   13  CALL WIND_L1_READ_SR( L1_LUN, CNTR, L1_SR_HEADER, STATUS )
	   2087       IF(STATUS.EQ.RMS$_EOF)GO TO 900
	   2088       IF (STATUS .NE. 1) GOTO 9020
	   2089       CALL WIND_L1_GET_BASIC( L1_LUN, SCI, STATUS)
	   2090       IF (STATUS .NE. 1) GOTO 9030
	   2091       CALL WIND_L1_GET_HDB( L1_LUN, HDB, STATUS)
	   2092       IF (STATUS .NE. 1) GOTO 9050
	   2093       CALL WIND_L1_GET_STICS( L1_LUN, STICS_RATE, STICS_PHA, STATUS )
	   2094       IF (STATUS .NE. 1) GOTO 9080
	   2095 C
	   2096 C Find first good spin, get year and DOY from it.
	   2097 C
	   2098       N=0
	   2099       GOODSPIN=.FALSE.
	   2100       DO 14 WHILE(.NOT.GOODSPIN)
	   2101         K=N/32+1
	   2102         NN=MOD(N,32)
	   2103         GOODSPIN=BTEST(L1_SR_HEADER.PRESENT(K),NN)
	   2104         N=N+1
	   2105         IF(N.GT.59)GOTO 13 ! This SCI-REC all bad; get next
	   2106   14  CONTINUE
	   2107 C
	   2108 C If low bitrate, make sure that N points to an even spin (odd spins 
	   2109 C have been emptied by concatenation).
	   2110 C If high bitrate, decrement because N was incremented after the 1st 
	   2111 C good spin was found.
	   2112 C
	   2113       IF(.NOT.SCI.EDB(N).BITRATE)THEN
	   2114         N=N+MOD(N,2)
	   2115         IF(N.GE.60)GOTO 13   ! This SCI-REC all bad; get next 
	   2116       ELSE
	   2117         N=N-1
	   2118       ENDIF
	   2119 C
	   2120 C Check FIFO mode, telemetry mode, TGS mode, and trigger mode; place info in header.
	   2121 C
	   2122       ITEMP = HDB.BDH.DAT(221)
	   2123       IF(IBITS(ITEMP,7,1).EQ.1)THEN
	   2124         FIFO='ON '
	   2125       ELSE
	   2126         FIFO='OFF'
	   2127       ENDIF
	   2128 C  
	   2129       ITEMP = SCI.EDB(N).TLM_Mode
	   2130       IF(ITEMP.EQ.0)ITEMP=10
	   2131       IF(ITEMP.EQ.128)ITEMP=9
	   2132       IF(ITEMP.EQ.256)ITEMP=10
	   2133       MODE_AT_START = MODE(ITEMP)
	   2134 C
	   2135       ITEMP = STICS_RATE.EDB(N).RATE(179)
	   2136       IF(IBITS(ITEMP,7,1).EQ.1)THEN
	   2137         TGS='ON '
	   2138       ELSE
	   2139         TGS='OFF'
	   2140       ENDIF
	   2141 C

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  27
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2142       ITEMP = HDB.BDH.DAT(25)
	   2143       TRIGGER_MODE_CODE = IBITS(ITEMP,1,3)
	   2144 
	   2145 
	   2146 C   **********************************************************
	   2147 C   *							     *
	   2148 C   *			OPEN OUTPUT FILES		     *
	   2149 C   *			WRITE HEADER			     *
	   2150 C   *							     *
	   2151 C   **********************************************************
	   2152 C
	   2153 	RONOFF = 'OFF'					!some info on user input
	   2154         IF(DATA_FILTER_RANGECHECK.EQ.1) RONOFF = ' ON'
	   2155         TONOFF = ' ON'
	   2156 C
	   2157 C Open PHA file listing output
	   2158 C
	   2159        IF(IFILE.EQ.1) THEN
	   2160 	   OPEN(UNIT= 55, NAME= OUTFILENAME1, FORM='FORMATTED', TYPE='NEW', RECL=1000)
	   2161 
	   2162 	   OPEN(UNIT= 56, NAME= OUTFILENAME2, FORM='FORMATTED', TYPE='NEW', RECL=1000)
	   2163 
	   2164 	   CALL TIME(RUN_TIME)			!Get run time
	   2165 	   CALL DATE(RUN_DATE)			!Get run date
	   2166 
	   2167            WRITE(55,'(A)') '  STICS  ION FLUX NORMALIZED TO SOLAR WIND SPEED '
	   2168 	   WRITE(55,'(A)') '  Run time  '//RUN_TIME//'   '//RUN_DATE
	   2169 	   WRITE(55,'(A,I5,A)') '  Flux Type:',FLUX_TYPE, ' (1=omni-directional, 2=parallel beam)'
	   2170            WRITE(55,17) OUTFILENAME1
	   2171 	   
	   2172 	   WRITE(56,*)' Errors found while generating the file : ', OUTFILENAME1
	   2173 	   WRITE(56,*)'  Run time  '//RUN_TIME//'   '//RUN_DATE  
	   2174 	   WRITE(56,*)
	   2175 	   WRITE(56,*)' DOY:HR:MN:SEC                  COMMENTS'
	   2176 
	   2177            WRITE(55,18) 'Wall',TRIGGER_MODE(TRIGGER_MODE_CODE),FIFO,TGS,MODE_AT_START 
	   2178                        
	   2179            WRITE(55,19)DATA_DVSTEP_MIN, DATA_DVSTEP_MAX,COINC(DATA_FILTER_COINC),
	   2180      .              RANGESEL(DATA_FILTER_RANGE),
	   2181      .              RONOFF,DATA_MSPEED_MIN,DATA_MSPEED_MAX,
	   2182      .		    DIRECTION_FILTER_TEL1,DIRECTION_FILTER_TEL2,DIRECTION_FILTER_TEL3,
	   2183      .		    DIRECTION_SECTOR_MIN,DIRECTION_SECTOR_MAX,TONOFF,
	   2184      .              START.YEAR,MONTH, DAYOFMONTH,START.HR,START.MIN,START.SEC,
	   2185      .              END.YEAR,ENDMONTH,ENDDAYOFMONTH,END.HR,END.MIN,END.SEC
	   2186 
	   2187        ENDIF		!first input file
	   2188 
	   2189 C    format statements for headers:
	   2190 
	   2191   16    FORMAT('  ',T10,'Input Level 1 Filename: ',A)
	   2192   17    FORMAT(T3 ,'Output Filename: ',A28)
	   2193   18    FORMAT(T3,'Clock selected: ',A,5X,'Trigger mode is ',A22,/,
	   2194      .         T3,'FIFO mode is ',A3,9X,'TGS  mode is ',A3,/,
	   2195      .         T3,'Telemetry mode is ',A17,/)
	   2196 
	   2197   19     FORMAT(T3,'FILTERING CHOICES:', /,
	   2198      .              T11,'Voltage step selection =  ', I2, ' to ' ,I2,/,

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  28
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2199      .              T11,'Event type selection   =',A10,/,
	   2200      .              T11,'Range selection        =     ',A5,/,
	   2201      .              T11,'Range checking is ',A3,/,
	   2202      .		    T11,'Velocity range         = ',I4,' to ',I6,//,   
	   2203      .		    T11,'Selected Telescopes =  ',I2,',',I2,',',I2, '  (-1=not selected)', /,
	   2204      .		    T11,'Sectors     =  ',I2,' to ',I2,/,
	   2205      .              T11,'Telescope checking is ',A3,//,
	   2206      .              T3,'Start Time ',I4,1X,I2"/"I2,1X,I2.2,2(':',I2.2),5X,
	   2207      .              'End Time ',I4,1X,I2"/"I2,1X,I2.2,2(':',I2.2))
	   2208 
	   2209 
	   2210 C     ***************************************************
	   2211 C     *		Get the Basic Core data			*
	   2212 C     ***************************************************
	   2213 C
	   2214  100  CALL WIND_L1_GET_BASIC( L1_LUN, SCI, STATUS)
	   2215       IF (STATUS .NE. 1) GOTO 9030
	   2216 C
	   2217 C Get Housekeeping Data Block
	   2218 C
	   2219       CALL WIND_L1_GET_HDB( L1_LUN, HDB, STATUS)
	   2220       IF (STATUS .NE. 1) GOTO 9050
	   2221 C
	   2222 C Get STICS rates and PHA
	   2223 C
	   2224       CALL WIND_L1_GET_STICS( L1_LUN, STICS_RATE, STICS_PHA, STATUS )
	   2225       IF (STATUS .NE. 1) GOTO 9080
	   2226 
	   2227 C Get bitrate of 1st good spin.  At HBR, there is data in every spin;
	   2228 C At LBR there is data only in even-numbered spins.
	   2229 
	   2230       BITRATE = SCI.EDB(N).BITRATE
	   2231       IF(BITRATE)THEN
	   2232         INCREMENT = 1
	   2233       ELSE
	   2234         INCREMENT = 2
	   2235       ENDIF
	   2236 C
	   2237 C Set flags for start and stop
	   2238       STARTFOUND=.FALSE.
	   2239       ENDFOUND=.FALSE.
	   2240 
	   2241       IF(HDB.Qual .NE. 0) THEN
	   2242         BAD_HDB = BAD_HDB + 1
	   2243         WRITE(56,150) TIME_TO_USE.DOY, TIME_TO_USE.HR,TIME_TO_USE.MIN,TIME_TO_USE.SEC
	   2244  150    FORMAT(1X,I4.3,3(':',I2.2),3X, 'Bad HDB found')
	   2245 	GOTO 800
	   2246       ENDIF
	   2247 
	   2248 C
	   2249 C Output STICS PHA one science record.
	   2250 C
	   2251       DO 800 J=0,59,INCREMENT		!0-59 spins
	   2252         TIME_TO_USE = SCI.EDB(J).W_TIME
	   2253 C
	   2254 C Compare time read to start time. If the time read is greater than or equal to the user-
	   2255 C specified start time, then begin processing data.

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  29
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2256 C
	   2257         IF(.NOT.STARTFOUND)THEN
	   2258           STARTFOUND=COMPARE_TIME_GE(TIME_TO_USE,START)
	   2259         ENDIF
	   2260         IF(STARTFOUND)THEN
	   2261 C
	   2262 C Compare time read to end time. If time read is greater than the user-specified end time, 
	   2263 C we're done. Go to the part of the code that closes files and STOP's program.
	   2264 C
	   2265           ENDFOUND=COMPARE_TIME_GE(TIME_TO_USE,END)
	   2266           IF(ENDFOUND)GO TO 901
	   2267 C
	   2268 C Check quality flags. If PHA, BR, or overall quality flags are bad, skip this spin
	   2269 C
	   2270           IF(BITRATE)THEN
	   2271             IF(SCI.EDB(J).Qual.NE.0)GOTO 800
	   2272           ELSE
	   2273             IF((SCI.EDB(J).Qual.NE.0).OR.(SCI.EDB(J+1).Qual.NE.0))GOTO 800
	   2274           ENDIF
	   2275           IF(SCI.EDB(J).ST_BR_Qual.NE.0)GOTO 800
	   2276           IF(SCI.EDB(J).ST_P_Qual.NE.0)GOTO 800
	   2277 
	   2278 C
	   2279 c Get S/C position at beginning of time period
	   2280 c
	   2281 	  IF (START_POS .EQ. 1) THEN
	   2282             X1_GSE = L1_SR_HEADER.GSE_POS.X/6380.0 
	   2283             Y1_GSE = L1_SR_HEADER.GSE_POS.Y/6380.0 
	   2284             Z1_GSE = L1_SR_HEADER.GSE_POS.Z/6380.0 
	   2285             WRITE(6,*)X1_GSE,Y1_GSE,Z1_GSE
	   2286             START_POS = -1
	   2287 	  ENDIF
	   2288 
	   2289 C
	   2290 C Get MASS Speed at start time and at the beginning of every Sci Record.
	   2291 C 
	   2292 	  IF((J .EQ. 0) .OR. (FIRSTSPEED .EQ. 0)) THEN
	   2293             CALL WIND_L1_GET_MASS(L1_LUN,MASS_RATE,MASS_PHA,STATUS)   ! mass data
	   2294             IF (STATUS .NE. 1) GOTO 9085
	   2295 
	   2296       	    CALL SMS_MASS_SPEED(HDB, MASS_RATE,  	!input
	   2297      .         BULK_SPEED, BULK_UNCER, ERR_SPD_FLAG , ERR_MESSAGE)	!output
	   2298 
	   2299             IF((ERR_SPD_FLAG .EQ. 0) .AND. (BULK_UNCER .GT. 0) .AND. (BULK_UNCER .LT. 150.0)) THEN
	   2300 	      SW_SPEED = BULK_SPEED
	   2301             ELSE
	   2302 	      BAD_SPEED = BAD_SPEED + 1
	   2303 	      WRITE(56,151)TIME_TO_USE.DOY,TIME_TO_USE.HR,TIME_TO_USE.MIN,TIME_TO_USE.SEC,
	   2304      .                     BULK_SPEED,BULK_UNCER,ERR_MESSAGE
	   2305  151	      FORMAT(1X,I4.3,3(':',I2.2),3X,'Invalid speed encountered:  ',
	   2306      .               F10.1,' +/- ',F10.1,' km/s',/,16X,A) 
	   2307 	      SW_SPEED = 0
	   2308 	      GOTO 800
	   2309             ENDIF
	   2310 	      
	   2311 	  ENDIF
	   2312 

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  30
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2313 C
	   2314 C Get dpps enable information, voltage step, and default value of e/q. 
	   2315 C
	   2316           ITEMP =HDB.BDH.DAT(24)
	   2317           ITEMP2=HDB.BDH.DAT(25)
	   2318 	  DPPSPLUS  = IBITS(ITEMP,7,1)
	   2319           DPPSMINUS = IBITS(ITEMP2,0,1) 
	   2320 
	   2321           ITEMP = STICS_RATE.EDB(J).RATE(179)
	   2322           DVSTEP = IBITS(ITEMP,0,5)
	   2323 	
	   2324 C
	   2325 C Check for valid voltage step
	   2326 C
	   2327       	  ITEMP = HDB.BDH.DAT(25)
	   2328       	  DPPS_STEP_MODE = IBITS(ITEMP,6,2)			!Get stepping mode
	   2329 
	   2330 	  CALL VOLTAGE_CHECK(DPPS_STEP_MODE, J, BITRATE, DVSTEP, DVS_CHECK)
	   2331 	  IF (DVS_CHECK .EQ. -1) THEN
	   2332      	    BAD_DVS = BAD_DVS + 1
	   2333 	    WRITE(56,153) TIME_TO_USE.DOY,TIME_TO_USE.HR,TIME_TO_USE.MIN,TIME_TO_USE.SEC,
	   2334      .      		  J, DPPS_STEP_MODE, DVSTEP
	   2335  153	    FORMAT(1X,I4.3,3(':',I2.2),3X,'Spin # = ',I2,'  Step Mode = ',I2,'   DVS = ',I2)
	   2336 	  ENDIF
	   2337 
	   2338 
	   2339 C Check voltage step filter and solar wind speed filter
	   2340 
	   2341           IF ( (DVSTEP.GE.DATA_DVSTEP_MIN) .AND.
	   2342      .         (DVSTEP.LE.DATA_DVSTEP_MAX) .AND.
	   2343 		
	   2344      .         (SW_SPEED.GE.DATA_MSPEED_MIN) .AND.
	   2345      .         (SW_SPEED.LE.DATA_MSPEED_MAX) ) THEN
	   2346 
	   2347 C
	   2348 C Get info for determining speed statistics
	   2349 C
	   2350               IF((J .EQ. 0) .OR. (FIRSTSPEED .EQ. 0)) THEN
	   2351 	       IF(SW_SPEED .LT. LOW_SPEED) LOW_SPEED = SW_SPEED
	   2352 	       IF(SW_SPEED .GT. HIGH_SPEED) HIGH_SPEED = SW_SPEED
	   2353                SPEED_HITS = SPEED_HITS +1.0
	   2354                SUM_SW_SPEED = SUM_SW_SPEED + SW_SPEED
	   2355                SUM_SQ_SPEED = SUM_SQ_SPEED + SW_SPEED**2
	   2356               ENDIF
	   2357 
	   2358 C
	   2359 C If HDB flag is bad, calculate e/q as if both DPPS plates are ON
	   2360 C
	   2361 	     IF(HDB.Qual .NE. 0) THEN
	   2362 		DPPSMINUS = 1
	   2363 		DPPSPLUS  = 1 
	   2364                 DPU_E_OVER_Q = 6.190722 * (1.1225857**DVSTEP)
	   2365 	     ELSE
	   2366   	        CALL DPU_EQ(DPPSPLUS,DPPSMINUS,DVSTEP,DPU_E_OVER_Q)
	   2367              ENDIF
	   2368 C
	   2369 C Get bit rate

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  31
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2370 C
	   2371              IF(SCI.EDB(J).BITRATE)THEN
	   2372                RATEFLAG='H'                ! High bit rate
	   2373              ELSEIF(TIME_TO_USE.YEAR.NE.0)THEN
	   2374                RATEFLAG='L'                ! Low bit rate
	   2375              ELSE
	   2376                RATEFLAG='?'                ! Bit rate indeterminate, due to bad quality data
	   2377              ENDIF
	   2378 C
	   2379 C Count number of spins for which each velocity bin was used for each ion 
	   2380 C
	   2381 
	   2382 	     DO I = 1, 22
	   2383 	        BIN_NUM = INT(LOG10(V_ION(DVSTEP,I)/SW_SPEED) / BIN_SIZE)
	   2384                 IF(RATEFLAG .EQ. 'H')THEN
	   2385 	           BIN_HITS(BIN_NUM,I) = BIN_HITS(BIN_NUM,I) + 1.0
	   2386 	     	ELSE
	   2387 	       	   BIN_HITS(BIN_NUM,I) = BIN_HITS(BIN_NUM,I) + 2.0
	   2388 	     	ENDIF
	   2389 	     END DO
	   2390 
	   2391 
	   2392 
	   2393 C	*************************************************
	   2394 C       *						*
	   2395 C	*	Determine BR weighting factor   	*
	   2396 C	*						*
	   2397 C	*************************************************
	   2398 
	   2399 	    ITEMP = HDB.BDH.DAT(189)		      !rate compression codes
	   2400             CODE_C1 = BTEST(ITEMP,1)
	   2401             CODE_C2 = BTEST(ITEMP,2)
	   2402 
	   2403 	    ITEMP = STICS_RATE.EDB(J).RATE(179)       !if TGS off, then there 
	   2404 	    IF (IBITS (ITEMP,7,1) .EQ. 1) THEN	      !also Fe matrix rates available
	   2405 		TGS = 'ON'
	   2406 	    ELSE
	   2407 		TGS = 'OFF'
	   2408 	    ENDIF
	   2409 
	   2410 C		***** get the PHA COUNT in each basic rate  ******
	   2411 
	   2412 	    DO II=0,2		!range 		!initialize for this voltage step
	   2413               DO MM = 0,15	!sector
	   2414 	        BASIC_PHA(MM,II)   = 0
	   2415 	      END DO
	   2416             END DO
	   2417 	    
	   2418 C Look through all the pha for this voltage step, and determine the count in 
	   2419 C each basic rate region and sector
	   2420 
	   2421             DO I = 0, (SCI.EDB(J).STICS_Len-1) * 4, 4
	   2422               CALL DISSECT_STICS_PHA(STICS_PHA.EDB(J).PHA(I),
	   2423      .                      STOP_ID,START_ID_RANGE,ENERGY,SECTOR,
	   2424      .                      SSD_ID,TIME_OF_FLIGHT,PSTART,RANGE)
	   2425 
	   2426               BASIC_PHA(SECTOR,RANGE) = BASIC_PHA(SECTOR,RANGE) + 1.0

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  32
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2427             END DO
	   2428 
	   2429 
	   2430 C		***** get the Basic Rates  ******
	   2431 
	   2432 	    DO 220 II=120,143			!these are the basic rates
	   2433 	      STICS_RATES(II+1) = WIND_DECOMPRESS(STICS_RATE.EDB(J).RATE(II),CODE_C1)
	   2434  220        CONTINUE
	   2435 
	   2436 C Get out basic rates for ranges R0, R1, R2. Each range has 8 Basic Rate bins, as cosecutive
	   2437 C sectors are added together, e.g., bin1=sector0+1, bin2=sector2+3,...
	   2438 
	   2439 	    DO 230 II=0,2	!range
	   2440              DO MM = 1,8   	!8 sectors
	   2441 		BASIC_RATE(MM,II) = STICS_RATES(120+II*8+MM)
	   2442              END DO	!over sectors
	   2443  230        CONTINUE	!end do over range
	   2444 
	   2445 
	   2446 C
	   2447 C Calculate Basic Rate normalization factors. Divide Basic Rate bin by the sum of the 
	   2448 C corresponding two Basic_PHA sectors
	   2449 C                                               
	   2450 	    DO KK = 0,2
	   2451 	      DO JJ = 0,15,2
	   2452 	        IF(BASIC_PHA(JJ,KK).GE.1.0 .OR. BASIC_PHA(JJ+1,KK).GE.1.0)THEN
	   2453 	           BASIC_W(JJ,KK) = BASIC_RATE((JJ+2)/2,KK)/(BASIC_PHA(JJ,KK) + BASIC_PHA(JJ+1,KK)) 
	   2454 		   IF( (BASIC_W(JJ,KK) .LT. 1.0) .OR.		!for bad Basic Rate 
	   2455      .		      ( (BASIC_RATE((JJ+2)/2,KK) - (BASIC_PHA(JJ,KK) + BASIC_PHA(JJ+1,KK))) .GT. 500.0)) THEN
	   2456 		      BASIC_W(JJ,KK) = 1.0
	   2457 		      BAD_BR = BAD_BR + 1
	   2458 		      WRITE(56,250)TIME_TO_USE.DOY,TIME_TO_USE.HR,TIME_TO_USE.MIN,TIME_TO_USE.SEC,
	   2459      .					JJ,JJ+1,BASIC_RATE((JJ+2)/2,KK),
	   2460      .				   	(BASIC_PHA(JJ,KK) + BASIC_PHA(JJ+1,KK))
	   2461  250		      FORMAT(1X,I4.3,3(':',I2.2),3X,'Sectors',I2,'+',I2,'  Basic Rate = ',F5.0,3X,
	   2462      .                       'Basic PHA = ', F5.0)
	   2463 		   ELSE
	   2464 		      GOOD_BR = GOOD_BR + 1
	   2465 		   ENDIF
	   2466 	        ELSE
	   2467 	           BASIC_W(JJ,KK) = 1.0
	   2468 	        ENDIF
	   2469                 BASIC_W(JJ+1,KK) = BASIC_W(JJ,KK)
	   2470 	      END DO
	   2471        	    END DO
	   2472 
	   2473 C
	   2474 C Do loop for all STICS PHA words in this voltage step
	   2475 C
	   2476             DO 300 I=0, (SCI.EDB(J).STICS_Len-1) * 4, 4
	   2477 C
	   2478 C Get parts of PHA word
	   2479 C
	   2480               CALL DISSECT_STICS_PHA(STICS_PHA.EDB(J).PHA(I),
	   2481      .                      STOP_ID,START_ID_RANGE,ENERGY,SECTOR,
	   2482      .                      SSD_ID,TIME_OF_FLIGHT,PSTART,RANGE)
	   2483 

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  33
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2484 C check data quality on telescope consistency
	   2485               CALL TELESCOPE_ID (TIME_OF_FLIGHT,ENERGY,
	   2486      .            PSTART,STOP_ID,SSD_ID, TELE_IDENT, TELE_FLAG)
	   2487 C
	   2488 C Calculate Mass and M/Q using DPU algorithms
	   2489 C
	   2490               CALL MMPQ_DPU_WSTICS(DPPSPLUS,DPPSMINUS,DVSTEP,
	   2491      .                           ENERGY,TIME_OF_FLIGHT,
	   2492      .                           DPU_MASS_OVER_Q,DPU_MASS,
	   2493      .                           DPU_NM,DPU_NQ,DPU_RANGE)
	   2494 	      IF (FIFO .EQ. 'ON ') DPU_RANGE = 2
	   2495 		
	   2496               CALL USER_NMNQ_PHA_BINNED(DPPSPLUS,DPPSMINUS,DVSTEP,  !pha event information
	   2497      .                    ENERGY,TIME_OF_FLIGHT,
	   2498      .                    NQ_MAX,MQMAX,MQMIN,    !information for binning
	   2499      .                    NM_MAX,MMAX, MMIN,
	   2500      .                    ELOW,EHIGH,TLOW,THIGH,      !return values
	   2501      .                    RKM,RKQ,
	   2502      .                    AM,BM,C1_EQ,C2A_EQ,C2B_EQ,D1_EQ,D2_EQ,EMQ,
	   2503      .                    BK_C2, BK_MQ,
	   2504      .                    PHA_NQ,PHA_NM)			!return information
	   2505 
	   2506               	                  
	   2507 	      IF ( (DATA_FILTER_RANGE.EQ.0)  .OR.
	   2508      .             (RANGE .EQ. 0 .AND. SEL_RANGE(0))  .OR.
	   2509      .             (RANGE .EQ. 1 .AND. SEL_RANGE(1))  .OR.
	   2510      .             (RANGE .EQ. 2 .AND. SEL_RANGE(2)) ) THEN
	   2511 
	   2512 	           IF ( (DATA_FILTER_COINC.EQ.0)  .OR. 
	   2513      .                (DATA_FILTER_COINC.EQ.1 .AND. DPU_MASS.EQ.0.)  .OR.
	   2514      .                (DATA_FILTER_COINC.EQ.2 .AND. DPU_MASS.GT.0.) ) THEN
	   2515 
	   2516               	     IF ( (DIRECTION_FILTER .EQ. 0)          .OR.
	   2517      .                 (DIRECTION_FILTER_TEL1 .EQ. TELE_IDENT)  .OR.
	   2518      .                 (DIRECTION_FILTER_TEL2 .EQ. TELE_IDENT)  .OR.
	   2519      .                 (DIRECTION_FILTER_TEL3 .EQ. TELE_IDENT) ) THEN
	   2520 
	   2521 	                 IF ( 
	   2522      .                      (  DATA_FILTER_RANGECHECK.EQ.0 .OR.
	   2523      .                      (DATA_FILTER_RANGECHECK.EQ.1 .AND.	! range OK
	   2524      .                            RANGE.EQ.DPU_RANGE)  )
	   2525      .                      .AND.
	   2526      .                      ( TELE_FLAG.EQ.0 ) ! telescope OK
	   2527      .                      ) THEN
	   2528 			   IF(SECTOR .GE. DIRECTION_SECTOR_MIN .AND. 
	   2529      .			      SECTOR .LE. DIRECTION_SECTOR_MAX)THEN	         
	   2530 C
	   2531 C Increment NQNM arrays
	   2532 C
	   2533 	                      IF (PHA_NQ.GE.0  .AND.  PHA_NM.GE.0) THEN
	   2534 				 IF(TELE_IDENT .EQ. 2 .AND. DVSTEP .LE. 8) THEN
	   2535 	                           CALL T2_ION_IDENTIFIER( USER_NM_MID(PHA_NM),USER_NQ_MID(PHA_NQ), 
	   2536      .				        SPECIES_MASS,SPECIES_CHARGE,ION_INDEX)
	   2537 				 ELSE
	   2538 	                           CALL ION_IDENTIFIER( USER_NM_MID(PHA_NM),USER_NQ_MID(PHA_NQ), 
	   2539      .				        SPECIES_MASS,SPECIES_CHARGE,ION_INDEX)
	   2540 				 ENDIF

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  34
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2541 				 IF(ION_INDEX.GT.0)THEN
	   2542 				   !Normalized velocity bin number
	   2543 				   VBIN = INT(LOG10(V_ION(DVSTEP,ION_INDEX)/SW_SPEED) / BIN_SIZE)
	   2544 		                   RAW_COUNTS(VBIN,ION_INDEX) = 
	   2545      .					RAW_COUNTS(VBIN,ION_INDEX) + 1.0
	   2546 				   CORR_DATA(VBIN,ION_INDEX) = CORR_DATA(VBIN,ION_INDEX) + 
	   2547      .						BASIC_W(SECTOR,RANGE) * DEADTIME_CORR(SECTOR) 
	   2548      .								      /	EFF_CORR(DVSTEP,ION_INDEX) 
	   2549 				   SUM_EPQ(VBIN,ION_INDEX) = SUM_EPQ(VBIN,ION_INDEX) + DPU_E_OVER_Q
	   2550 				 ELSE
	   2551 				   UNUSED_PHA = UNUSED_PHA + 1.0
	   2552 				 ENDIF
	   2553                               ENDIF
	   2554 			   ENDIF   !check sector
	   2555                          ENDIF     !check range and/or telescope conditions
	   2556                       ENDIF     !data filtering by direction 
	   2557                    ENDIF	!data_filtering by coincidence conditions
	   2558               ENDIF     !data filtering by range
	   2559 
	   2560  300        CONTINUE		!end pha for this given voltage step
	   2561 
	   2562           ENDIF   ! data within user selected voltage step range
	   2563 
	   2564   	  FIRSTSPEED = -1		!Change after giving 1st speed
	   2565 
	   2566         ENDIF     ! data within user selected time
	   2567 
	   2568  800  CONTINUE
	   2569 
	   2570 C
	   2571 C Read next Science Record
	   2572 C
	   2573       CALL WIND_L1_READ_SR( L1_LUN, CNTR, L1_SR_HEADER, STATUS )
	   2574       IF(STATUS.EQ.RMS$_EOF)GO TO 900
	   2575       IF (STATUS .NE. 1) GOTO 9020
	   2576 C
	   2577       GO TO 100
	   2578 C
	   2579 C Close files and STOP
	   2580 C
	   2581  900  IF (START.YEAR .GE. 0) GO TO 1000
	   2582  901  CALL WIND_L1_CLOSE( L1_LUN, STATUS )      ! Close input file
	   2583       IF (STATUS .NE. 1) GOTO 9090
	   2584 C
	   2585 C Prompt user for new time period
	   2586 C
	   2587       WRITE(6,*)' Do you want add another time period? (y/n)'
	   2588       READ(5,'(A1)') TIME_ANSWER
	   2589       IF((TIME_ANSWER .EQ. 'Y') .OR. (TIME_ANSWER .EQ. 'y')) THEN
	   2590         STARTFOUND = .FALSE.
	   2591 	ENDFOUND   = .FALSE.
	   2592         L1FILENAME = 'DATA_DIR:WI*L1*.DAT'		!Get input L1 filename
	   2593         CALL WIND_GET_FILENAME(L1FILENAME, STATUS)
	   2594         IF(STATUS.NE.1) THEN
	   2595           WRITE (*,2) STATUS
	   2596           STOP
	   2597         ENDIF

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  35
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2598  							!Prompt user for start and stop times
	   2599         TYPE 11
	   2600         ACCEPT*, START.YEAR,MONTH,DAYOFMONTH,START.HR,START.MIN,START.SEC
	   2601 
	   2602         IF(START.YEAR.GE.0)THEN
	   2603           CALL CNVRT_T_YRMONDAY_TO_YEARDAY( START, MONTH, DAYOFMONTH)
	   2604           IF(START.YEAR.LT.100)START.YEAR=START.YEAR+1900        ! Allow for 2-digit years
	   2605           IF(START.YEAR.LT.1980)START.YEAR=START.YEAR+100        ! Allow for years beyond 1999
	   2606           TYPE 12
	   2607           ACCEPT*, END.YEAR,ENDMONTH,ENDDAYOFMONTH,END.HR,END.MIN,END.SEC
	   2608           CALL CNVRT_T_YRMONDAY_TO_YEARDAY( END, ENDMONTH, ENDDAYOFMONTH)
	   2609           IF(END.YEAR.LT.100)END.YEAR=END.YEAR+1900        ! Allow for 2-digit years
	   2610           IF(END.YEAR.LT.1980)END.YEAR=END.YEAR+100        ! Allow for years beyond 1999
	   2611         ELSE
	   2612           END.YEAR=3000
	   2613         ENDIF
	   2614 	                 				!Open L1 file
	   2615 
	   2616         CALL WIND_L1_OPEN( L1_LUN, L1FILENAME, L1_FILE_HEADER, STATUS)
	   2617       	IF (STATUS .NE. 1) GOTO 9010
	   2618         INQUIRE(FILE=L1FILENAME,NAME=FULL_L1_NAME)
	   2619       	WRITE(6,1001) FULL_L1_NAME
	   2620     	IFILE = IFILE + 1
	   2621         INPUTFILES(IFILE) = FULL_L1_NAME
	   2622 
	   2623         WRITE(55,915)START.YEAR,MONTH, DAYOFMONTH,START.HR,START.MIN,START.SEC,
	   2624      .              END.YEAR,ENDMONTH,ENDDAYOFMONTH,END.HR,END.MIN,END.SEC
	   2625  915    FORMAT(T14,I4,1X,I2"/"I2,1X,I2.2,2(':',I2.2),14X,
	   2626      .              I4,1X,I2"/"I2,1X,I2.2,2(':',I2.2))
	   2627 
	   2628         GOTO 13
	   2629 
	   2630       ENDIF	!time_answer .eq. 'y'.....
	   2631 
	   2632 c
	   2633 c Get S/C position at end of time period
	   2634 c
	   2635       X2_GSE = L1_SR_HEADER.GSE_POS.X/6380.0 
	   2636       Y2_GSE = L1_SR_HEADER.GSE_POS.Y/6380.0 
	   2637       Z2_GSE = L1_SR_HEADER.GSE_POS.Z/6380.0 
	   2638       WRITE(6,*)X2_GSE,Y2_GSE,Z2_GSE
	   2639 
	   2640       DO JJ = 1,IFILE
	   2641        WRITE(55,16) INPUTFILES(JJ)
	   2642       END DO
	   2643  
	   2644       WRITE(6,*)'BAD HDBs = ', BAD_HDB
	   2645       WRITE(6,*)'BAD DVS  = ', BAD_DVS
	   2646       WRITE(6,*)'BAD BRs = ', BAD_BR, '   GOOD BRs = ', GOOD_BR
	   2647       WRITE(6,*)'BAD SPEEDS = ',BAD_SPEED
	   2648       WRITE(56,920) BAD_HDB, BAD_DVS, BAD_SPEED, BAD_BR,GOOD_BR
	   2649  920  FORMAT(//,1X,'Total Bad HDBs = ',I2,/,1X,'Total Invalid DVS = ',I3,/,
	   2650      .          1X,'Total Bad Speeds = ',I3,/,1X,'Total Bad Basic Rates = ',I4,
	   2651      .          5X,'Total Good Basic Rates = ', I10)
	   2652 
	   2653 
	   2654 C

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  36
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2655 C Calculate standard deviation of speed and average
	   2656 C
	   2657       SPEED_MEAN  = SUM_SW_SPEED/SPEED_HITS
	   2658       SPEED_SIGMA = SQRT((SUM_SQ_SPEED - SPEED_HITS*SPEED_MEAN**2)/(SPEED_HITS-1.0))
	   2659       WRITE(55,940)SPEED_MEAN, SPEED_SIGMA, LOW_SPEED, HIGH_SPEED
	   2660  940  FORMAT(/,1X,' Average Solar Wind Speed with sigma (km/s) = ',F6.1,' +/- ',F6.1,
	   2661      .       /,1X,' Range of valid speeds encountered (km/s) = ',F6.1,' to ', F6.1)  
	   2662 C
	   2663 C Write beginning and end positions to output files
	   2664 C
	   2665       WRITE(55,945)X1_GSE,Y1_GSE,Z1_GSE,X2_GSE,Y2_GSE,Z2_GSE  
	   2666  945  FORMAT(1X,' Start postion in GSE cartesian coordinates(Re): ',3F9.3,/
	   2667      .       1X,' Stop  postion in GSE cartesian coordinates(Re): ',3F9.3//)
	   2668 
	   2669       WRITE(55,946)
	   2670  946  FORMAT(1X,' For each ion, the average Energy-per-Charge (E/Qavg) in units of keV/e,'/
	   2671      .       1X,' the raw counts (RawCnt), the flux normalized to solar wind speed in units'/
	   2672      .       1X,' of #/(cm2-sr-sec-keV/amu) or #/(cm2-sec-keV/amu),  and the corresponding'/
	   2673      .       1X,' error (Error) in the flux are given.'/)
	   2674  
	   2675       WRITE(55,950)(LABELS(I),I=1,22)		!Write Ion labels to header
	   2676  950  FORMAT(1X,'  BIN#  ',' Vi/Vsw ',2X,' Hits ',1X, 22(1X,'E/Qavg',2X,'RawCnt',A9,8X,'Error',5X))
	   2677 
	   2678 
	   2679       WRITE(6,*)'UNUSED PHA = ', UNUSED_PHA
	   2680 
	   2681 C
	   2682 C Divide Corrected data by number of hits per bin, Geometric Factor and time.
	   2683 C
	   2684       DO L = 1, 22
	   2685         DO I = BMIN, BMAX
	   2686          IF(BIN_HITS(I,L) .GT. 0)
	   2687      .      CORR_DATA(I,L) = CORR_DATA(I,L) / BIN_HITS(I,L) / GEO_FAC / DELTA_T / AREA_FACTOR
	   2688 	END DO
	   2689       END DO 
	   2690 
	   2691 
	   2692 C
	   2693 C			##########################################
	   2694 C			#     ERROR CALCULATION	& AVERAGE E/Q    #
	   2695 C			##########################################
	   2696       DO L=1,22
	   2697 	DO I = BMIN, BMAX
	   2698 	  IF(RAW_COUNTS(I,L) .GT. 0) THEN
	   2699 	    FLUX_ERR(I,L) = CORR_DATA(I,L)*SQRT(0.0625 + 1.0/RAW_COUNTS(I,L))
	   2700 	    IF(FLUX_ERR(I,L).GT.CORR_DATA(I,L)) FLUX_ERR(I,L) = CORR_DATA(I,L)
	   2701 	    AVG_EPQ(I,L)  = SUM_EPQ(I,L)/RAW_COUNTS(I,L)
	   2702           ELSE
	   2703 	    FLUX_ERR(I,L) = 0
	   2704 	    AVG_EPQ(I,L) = 0
	   2705 	  ENDIF
	   2706 	END DO
	   2707       END DO
	   2708 C
	   2709 C Write flux data to output file. Use mid-point of bin.
	   2710 C 
	   2711       DO I = BMIN, BMAX

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  37
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2712 	WRITE(55,955)I, 10.0**((I+0.5)*BIN_SIZE), BIN_HITS(I,1), 
	   2713      .   (AVG_EPQ(I,L), RAW_COUNTS(I,L), CORR_DATA(I,L), FLUX_ERR(I,L), L=1,22)
	   2714  955    FORMAT(1X,I6,3X,F6.3,3X,F5.0,2X,22(1X,F6.2,2X,F6.0,1X,E12.5,1X,E12.5,1X))
	   2715       END DO
	   2716 C
	   2717 C Write error in flux to output file
	   2718 C 
	   2719 C      WRITE(55,*)
	   2720 C      WRITE(55,*)
	   2721 C      DO I = BMIN, BMAX
	   2722 C	WRITE(55,955)I, 10.0**((I+0.5)*BIN_SIZE), (FLUX_ERR(I,L),L=1,22)
	   2723 C      END DO
	   2724 C
	   2725 C Write raw counts to output file.
	   2726 C 
	   2727 C      WRITE(55,*)
	   2728 C      WRITE(55,*)
	   2729 C      DO I = BMIN, BMAX
	   2730 C	WRITE(55,958)I, 10.0**((I+0.5)*BIN_SIZE), (RAW_COUNTS(I,L),L=1,22)
	   2731 C 958    FORMAT(1X,I6,3X,F6.3,3X,22(1X,F12.1))
	   2732 C      END DO
	   2733 C
	   2734 C Write average E/Q per bin to output file
	   2735 C 
	   2736 C      WRITE(55,*)
	   2737 C      WRITE(55,*)
	   2738 C      DO I = BMIN, BMAX
	   2739 C	WRITE(55,955)I, 10.0**((I+0.5)*BIN_SIZE), (AVG_EPQ(I,L),L=1,22)
	   2740 C      END DO
	   2741 
	   2742 C
	   2743 C Write bin hits to output file.
	   2744 C 
	   2745 C      WRITE(55,*)
	   2746 C      WRITE(55,*)
	   2747 C      DO I = BMIN, BMAX
	   2748 C	WRITE(55,958)I, 10.0**((I+0.5)*BIN_SIZE), (BIN_HITS(I,L),L=1,22)
	   2749 C      END DO
	   2750 
	   2751 C     ***********************************************************
	   2752 C     *								*
	   2753 C     *			CLOSE FILES				*
	   2754 C     ***********************************************************
	   2755 
	   2756       CLOSE(UNIT=55)				! Close flux file
	   2757       CLOSE(UNIT=56)
	   2758       TYPE *,' FILE WRITTEN TO CURRENT DIRECTORY'
	   2759 
	   2760       STOP
	   2761 
	   2762 
	   2763 
	   2764 C
	   2765 C Come here for errors
	   2766 C
	   2767 9010  TYPE *,'ERROR OPENING L1 FILE; STATUS=',STATUS
	   2768       STOP

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  38
                                                                 3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2769 9020  TYPE *,'ERROR READING SCIENCE RECORD ',CNTR,'; STATUS=',STATUS
	   2770       STOP
	   2771 9030  TYPE *,'ERROR GETTING BASIC CORE; STATUS=',STATUS
	   2772       STOP
	   2773 9050  TYPE *,'ERROR GETTING HDB; STATUS=',STATUS
	   2774       STOP
	   2775 9080  TYPE *,'ERROR GETTING STICS DATA; STATUS=',STATUS
	   2776       STOP
	   2777 9085  TYPE *,'ERROR GETTING MASS DATA; STATUS=',STATUS
	   2778       STOP
	   2779 
	   2780 9090  TYPE *,'ERROR CLOSING L1 FILE; STATUS=',STATUS
	   2781       STOP
	   2782       END


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1168 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               187044 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              4244 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               29288   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2432 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               224820


ENTRY POINTS

    Address   Type  Name          
                                  
  4-00000000        VSHIFT_SPECTRA


VARIABLES

    Address   Type  Name                       Address   Type  Name                       Address   Type  Name                  
                                                                                                                                
  0-0000004C  R*4   AREA_FACTOR                  **      R*4   C2B_EQ                   2-00001FBC  I*4   DAYOFMONTH            
  2-00002040  R*4   AVE_SPEED                2-00002058  I*4   CNTR                     0-00000074  R*4   DELTA_T               
  1-00000144  I*4   BAD_BR                   0-000000D8  L*4   CODE_C1                  0-00000094  I*4   DIRECTION_FILTER      
  1-00000138  I*4   BAD_DVS                      **      L*4   CODE_C2                  0-00000080  I*4   DIRECTION_FILTER_TEL1 
  1-0000013C  I*4   BAD_HDB                      **      R*4   D1_EQ                    0-00000084  I*4   DIRECTION_FILTER_TEL2 
  1-00000158  I*4   BAD_SPEED                    **      R*4   D2_EQ                    0-00000088  I*4   DIRECTION_FILTER_TEL3 
  1-0000014C  R*4   BETA                     0-00000070  I*4   DATA_DVSTEP_MAX          0-00000090  I*4   DIRECTION_SECTOR_MAX  
REG-########  I*4   BIN_NUM                  0-0000006C  I*4   DATA_DVSTEP_MIN          0-0000008C  I*4   DIRECTION_SECTOR_MIN  
  0-000000B8  L*1   BITRATE                      **      I*4   DATA_FILTER              0-000000C8  I*4   DPPSMINUS             
  0-00000060  I*4   BK_C2                    0-00000058  I*4   DATA_FILTER_COINC        0-000000C4  I*4   DPPSPLUS              
      **      R*4   BK_MQ                    0-00000064  I*4   DATA_FILTER_DVSTEP       0-000000D0  I*4   DPPS_STEP_MODE        
  2-00001FB0# L*4   BRACK                    0-00000074  I*4   DATA_FILTER_MSPEED           **      I*4   DPU_BK_C2             
  2-00002044  R*4   BULK_SPEED               0-00000054  I*4   DATA_FILTER_RANGE            **      R*4   DPU_BK_MQ             
  2-00002048  R*4   BULK_UNCER               0-00000050  I*4   DATA_FILTER_RANGECHECK       **      R*4   DPU_C1_EQ             
      **      R*4   C1_EQ                    0-00000078  I*4   DATA_MSPEED_MAX              **      R*4   DPU_C2A_EQ            
      **      R*4   C2A_EQ                   0-0000007C  I*4   DATA_MSPEED_MIN              **      R*4   DPU_C2B_EQ            

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  39
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

    Address   Type  Name                       Address   Type  Name                       Address   Type  Name                  
                                                                                                                                
      **      R*4   DPU_D1_EQ              REG-00000009  I*4   INQ                      2-00002000  R*4   SPECIES_MASS          
      **      R*4   DPU_D2_EQ                2-0000202C  I*4   ION_INDEX                0-000000A0  R*4   SPEED_HITS            
      **      R*4   DPU_EHIGH                2-0000205C  I*4   ISTEP                    0-00000040# R*4   SPEED_MEAN            
      **      R*4   DPU_ELOW               REG-########  I*4   ITEMP                    0-0000006C  R*4   SPEED_SIGMA           
  2-00001FE0  R*4   DPU_E_OVER_Q           REG-0000000F  I*4   ITEMP2                   1-00000150  R*4   SPIN_TIME             
REG-00000028  R*4   DPU_KM                   2-00002054  I*4   J                        2-00002018  I*4   SSD_ID                
REG-00000022  R*4   DPU_KQ                   0-00000038# I*4   JJ                       0-000000C0  L*4   STARTFOUND            
  2-00001FE4  R*4   DPU_MASS               REG-0000000D  I*4   JSAVE                    2-00002008  I*4   START_ID_RANGE        
  2-00001FE8  R*4   DPU_MASS_OVER_Q        REG-########  I*4   K                        1-00000134  I*4   START_POS             
      **      R*4   DPU_MMAX               REG-0000000B  I*4   KK                       2-00001FB4  I*4   STATUS                
      **      R*4   DPU_MMIN               REG-########  I*4   L                        2-0000200C  I*4   STOP_ID               
      **      R*4   DPU_MQMAX                2-00013DE0  CHAR  L1FILENAME               2-0000204C  R*4   SUM_HE2_SPEED         
REG-00000024  R*4   DPU_MQMIN                1-00000130  I*4   L1_LUN                   0-00000098  R*4   SUM_SQ_SPEED          
  2-00001FF0  I*4   DPU_NM                   2-000141A0  CHAR  LISFIL1                  0-0000009C  R*4   SUM_SW_SPEED          
      **      I*4   DPU_NM_MAX               2-00014200  CHAR  LISFIL2                REG-00000025  R*4   SW_SPEED              
  2-00001FF4  I*4   DPU_NQ                   0-00000044  R*4   LOW_SPEED                2-00001FD8  I*4   TELE_FLAG             
      **      I*4   DPU_NQ_MAX             REG-########  I*4   MM                       2-00001FDC  I*4   TELE_IDENT            
  2-00001FEC  I*4   DPU_RANGE              REG-0000002C  R*4   MMAX                     2-00001F68  CHAR  TGS                   
      **      R*4   DPU_THIGH              REG-00000025  R*4   MMIN                         **      R*4   THIGH                 
      **      R*4   DPU_TLOW                 2-00002098  CHAR  MODE_AT_START            2-00001F58  CHAR  TIME_ANSWER           
  0-000000CC  I*4   DVSTEP                   2-00001FB8  I*4   MONTH                    2-0000201C  I*4   TIME_OF_FLIGHT        
  2-00001FD4  I*4   DVS_CHECK              REG-0000002D  R*4   MQMAX                        **      R*4   TLOW                  
  1-00000148  R*4   EFF                    REG-00000026  R*4   MQMIN                    2-00001F80  CHAR  TONOFF                
      **      R*4   EHIGH                  REG-########  I*4   N                      REG-00000003  I*4   TRIGGER_MODE_CODE     
      **      R*4   ELOW                   REG-00000000  I*4   NAMELEN                  2-00002028  R*4   UNUSED_PHA            
  2-00001FC4  I*4   ENDDAYOFMONTH          REG-00000017  I*4   NINDEX                   2-00002060  CHAR  USERNAME1             
REG-00000000  L*4   ENDFOUND                 0-0000005C  I*4   NM_MAX                       **      R*4   USER_MMAX             
  2-00001FC0  I*4   ENDMONTH               REG-########  I*4   NN                           **      R*4   USER_MMIN             
  2-00002010  I*4   ENERGY                   0-00000068  I*4   NQ_MAX                       **      R*4   USER_MQMAX            
  2-0000203C  R*4   ENERGY_BANDWIDTH         0-000000B0  I*4   OPENMODE                     **      R*4   USER_MQMIN            
  2-00014320  CHAR  ERR_MESSAGE              2-00014260  CHAR  OUTFILENAME1                 **      I*4   USER_NM_MAX           
  2-00002050  I*4   ERR_SPD_FLAG             2-000142C0  CHAR  OUTFILENAME2                 **      I*4   USER_NQ_MAX           
  2-00001F60  CHAR  FIFO                     2-00001FA8  I*4   OUTUNIT                      **      L*4   USE_SC_CLOCK          
  0-000000A4  L*4   FIRSTFILE                2-00001FF8  I*4   PHA_NM                 REG-00000011  I*4   VBIN                  
  1-00000154  I*4   FIRSTSPEED             REG-00000009  I*4   PHA_NQ                   2-00002030  I*4   VBIN_OVER             
  2-00002038  I*4   FLUX_TYPE                2-00002020  I*4   PSTART                   2-00002034  I*4   VBIN_UNDER            
  2-00013E30  CHAR  FULL_L1_NAME             2-00002024  I*4   RANGE                    2-00001FC8  R*4   X1_GSE                
  0-00000064  R*4   GEO_FAC                  2-00001F70  CHAR  RATEFLAG                 0-0000005C  R*4   X2_GSE                
REG-########  L*4   GOODSPIN               REG-00000028  R*4   RKM                      2-00001FCC  R*4   Y1_GSE                
  1-00000140  I*4   GOOD_BR                REG-00000027  R*4   RKQ                      0-00000060  R*4   Y2_GSE                
  0-00000048  R*4   HIGH_SPEED               2-00001F78  CHAR  RONOFF                   2-00001F88  CHAR  YORN                  
  0-0000003C# I*4   I                        2-00002088  CHAR  RUN_DATE                 2-00001FD0  R*4   Z1_GSE                
  2-00001FAC  I*4   IFILE                    2-00001F50  CHAR  RUN_TIME                 0-00000068  R*4   Z2_GSE                
REG-########  I*4   II                       2-00002014  I*4   SECTOR                                                           
REG-00000009  I*4   INCREMENT                2-00002004  R*4   SPECIES_CHARGE                                                   
REG-0000000A  I*4   INM                      2-00001FFC  R*4   SPECIES_ENERGY                                                   



VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  40
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

RECORDS

    Address   Name            Structure                Bytes     Address   Name            Structure                Bytes
                                                                                                                         
  2-00001F98  END             T                            8   2-00014370  SCI             CORE                      7384
  2-00016048  HDB             HDBSTR                     324   2-00001F90  START           T                            8
  6-00000000  L1_FILE_HEADER  ST_L1_FILE_HEADER          400   2-00018CB0  STICS_PHA       ST_PHA                   36720
  6-00000190  L1_SR_HEADER    ST_L1_SR_HEADER            244   2-00016190  STICS_RATE      ST_RATE                  11040
  2-000223A0  MASS_PHA        MA_PHA                   45960   2-00001FA0  TIME_TO_USE     T                            8
  2-00021C20  MASS_RATE       MA_RATE                   1920                                                             


ARRAYS

     Address  Type  Name                 Bytes  Dimensions

  2-000020F8  R*4   AM                      24  (6)
  2-00003640  R*4   AVG_EPQ               9960  (-25:57, 30)
  2-0002D924  R*4   BASIC_PHA              192  (0:15, 0:2)
  2-0002D8C4  R*4   BASIC_RATE              96  (8, 0:2)
  2-0002D9E4  R*4   BASIC_W                192  (0:15, 0:2)
  2-00008420  R*4   BIN_HITS              9960  (-25:57, 30)
  2-00002110  R*4   BM                      24  (6)
  1-00000160  CHAR  COINC                   30  (0:2)
  2-00005D30  R*4   CORR_DATA             9960  (-25:57, 30)
  2-00002134  R*4   DEADTIME_CORR           64  (0:15)
  2-000020BC  R*4   DPU_AM                  24  (6)
  2-000020D4  R*4   DPU_BM                  24  (6)
  2-000020EC  R*4   DPU_EMQ                 12  (3)
  2-0002D728  R*4   DPU_EPQ                128  (0:31)
  2-0002D7A8  R*4   DPU_NM_M               284  (0:70)
  2-00002180  R*4   DPU_NQ_MPQ             524  (0:130)
  2-00012EE0  R*4   EFF_CORR              3840  (0:31, 30)
  2-00002128  R*4   EMQ                     12  (3)
  2-0000AB10  R*4   FLUX_ERR              9960  (-25:57, 30)
  2-00013E80  CHAR  INPUTFILES             800  (10)
  1-00000418  R*4   ION_AMU                120  (30)
  1-000001A8  CHAR  LABELS                 270  (30)
  1-000002B8  CHAR  MODE                   170  (10)
  1-00000180  CHAR  RANGESEL                35  (0:6)
  2-0000D200  R*4   RAW_COUNTS            9960  (-25:57, 30)
  2-000020B0  L*4   SEL_RANGE               12  (0:2)
  2-00003370  I*4   STICS_RATES            716  (179)
  2-0000F8F0  R*4   SUM_EPQ               9960  (-25:57, 30)
  1-00000368  CHAR  TRIGGER_MODE           176  (0:7)
  2-00002390  R*4   USER_NM_M              804  (0:200)
  2-00002B80  R*4   USER_NM_MID            804  (0:200)
  2-00002EB0  R*4   USER_NQ_MID           1204  (0:300)
  2-000026C0  R*4   USER_NQ_MPQ           1204  (0:300)
  2-00011FE0  R*4   V_ION                 3840  (0:31, 30)




VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  41
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

LABELS

    Address   Label     Address   Label     Address   Label     Address   Label     Address   Label     Address   Label
                                                                                                                       
      **       2          **       12     4-00002070   100    4-00003BD4   300        **       945        **       9020
  4-0000106C   3      4-00001358   13         **       150    4-00003BF0   800        **       946        **       9030
      **       6          **       14         **       151        **       900        **       950        **       9050
      **       7          **       16         **       153    4-00003C88   901        **       955        **       9080
      **       8          **       17     4-00000000   220        **       915    4-000011A0   1000       **       9085
      **       9          **       18         **       230        **       920        **       1001       **       9090
      **       11         **       19         **       250        **       940        **       9010                    


FUNCTIONS AND SUBROUTINES REFERENCED

  Type  Name                                Type  Name                                Type  Name                             
                                                                                                                             
        CNVRT_T_YRMONDAY_TO_YEARDAY               STICS_ION_VELOCITY                        WIND_L1_GET_BASIC                
  L*4   COMPARE_TIME_GE                           T2_ION_IDENTIFIER                         WIND_L1_GET_HDB                  
        DIRECTION_REQUESTS                        TELESCOPE_ID                              WIND_L1_GET_MASS                 
        DISSECT_STICS_PHA                         USER_NMNQ_COEFF                           WIND_L1_GET_STICS                
        DPU_DEFAULT_COEFF                         USER_NMNQ_PHA_BINNED                      WIND_L1_OPEN                     
        DPU_EQ                                    USER_REQUESTS_DATA_TYPE                   WIND_L1_OPEN_NEXT                
        ION_IDENTIFIER                            VOLTAGE_CHECK                             WIND_L1_READ_SR                  
        MMPQ_DPU_WSTICS                     I*4   WIND_DECOMPRESS                                                            
        OMR_EFF                                   WIND_GET_FILENAME                                                          
        SMS_MASS_SPEED                            WIND_L1_CLOSE                                                              

VSHIFT_SPECTRA                                                   3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  42
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2783 
	   2784 
	   2785 C	*************************************************
	   2786 C	*		SUBROUTINES			*
	   2787 C	*************************************************
	   2788 
	   2789 
	   2790 C***************************************************************************
	   2791 
	   2792       SUBROUTINE USER_REQUESTS_DATA_TYPE(
	   2793      .           FILTER_COINC,
	   2794      .           FILTER_DVSTEP,
	   2795      .		 DVSTEP_MIN,
	   2796      .		 DVSTEP_MAX,
	   2797      .           FILTER_RANGE,
	   2798      .           SRANGE,
	   2799      .           RANGECHECK,
	   2800      .           FILTER_SPEED,
	   2801      .           SPEED_MIN,
	   2802      .           SPEED_MAX)
	   2803 
	   2804 C     user inputs for data filtering by data type
	   2805 C     13.Jan.95  ABG
	   2806 C     17.Aug.95  add solar wind speed
	   2807 
	   2808 
	   2809       IMPLICIT NONE
	   2810 
	   2811 C     data filtering options
	   2812       INTEGER*4  FILTER_COINC,	!data filtering by coincidence 
	   2813 C					 conditions
	   2814      .           FILTER_DVSTEP,	!data filter by voltage step
	   2815      .           DVSTEP_MIN,	!dv step min-max values for data filter
	   2816      .           DVSTEP_MAX,
	   2817      .           FILTER_RANGE,   !range selection
	   2818      .           RANGECHECK,
	   2819      .           FILTER_SPEED,       !MASS derived solar wind speed selection
	   2820      .           SPEED_MIN, 
	   2821      .           SPEED_MAX
	   2822 
	   2823       LOGICAL SRANGE(0:2)			!accept / reject this range
	   2824       CHARACTER*5 RSELECTION(0:6) /		!range selection
	   2825      .                           '2 1 0' ,
	   2826      .                           '    0' ,
	   2827      .                           '  1  ' ,
	   2828      .                           '2    ' ,
	   2829      .                           '2   0' ,
	   2830      .                           '2 1  ' ,
	   2831      .                           '  1 0' /
	   2832 
	   2833       INTEGER*4  I,J,K
	   2834       CHARACTER*1 YORN			!yes or no answer
	   2835 
	   2836 
	   2837 
	   2838       TYPE 7
	   2839     7 FORMAT(' Enter desired data filtering ',

USER_REQUESTS_DATA_TYPE                                          3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  43
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2840      .       'by coincidence conditions: ',/,
	   2841      .       '   0 = no filtering (no M or M/Q restrictions) ',/,
	   2842      .       '   1 = M/Q-only     (i.e., M/Q > 0, Mass = 0) ',/,
	   2843      .       '   2 = M & M/Q      (i.e., M/Q > 0, Mass > 0) ',/,
	   2844      .       '       ',$)
	   2845       ACCEPT *, FILTER_COINC
	   2846 
	   2847       TYPE 8
	   2848     8 FORMAT(' Enter desired data filtering by voltage step range: ',/,
	   2849      .       '   -1 = no voltage step filtering (all e/q values) ',/,
	   2850      .       '    0 = voltage step filtering desired',/,
	   2851      .       '        ',$)
	   2852       ACCEPT *, FILTER_DVSTEP
	   2853       IF (FILTER_DVSTEP .GT. -1) THEN
	   2854          TYPE 9
	   2855     9    FORMAT(' Enter minimum and maximum voltage steps (inclusive)',/
	   2856      .          '     ',$)	  
	   2857 	 ACCEPT *, DVSTEP_MIN, DVSTEP_MAX
	   2858       ENDIF
	   2859 
	   2860       TYPE 10 , (RSELECTION(I),I=0,6)
	   2861    10 FORMAT(' Enter range selection: ',/,
	   2862      .       '    0 = ',A5,'  (i.e., all ranges) ',/,
	   2863      .       '    1 = ',A5,/,
	   2864      .       '    2 = ',A5,/,
	   2865      .       '    3 = ',A5,/,
	   2866      .       '    4 = ',A5,/,
	   2867      .       '    5 = ',A5,/,
	   2868      .       '    6 = ',A5 )
	   2869        ACCEPT *, FILTER_RANGE
	   2870        TYPE 11, RSELECTION(FILTER_RANGE)
	   2871    11  FORMAT (/' User selected the following ranges : 'A5/)
	   2872       SRANGE(0) = .FALSE.	!reject range 0 events
	   2873       SRANGE(1) = .FALSE.	!reject range 1 events
	   2874       SRANGE(2) = .FALSE.	!reject range 2 events
	   2875 
	   2876        IF (  (FILTER_RANGE.EQ.0) .OR. (FILTER_RANGE.EQ.1) .OR.
	   2877      .       (FILTER_RANGE.EQ.4) .OR. (FILTER_RANGE.EQ.6) )
	   2878      .		SRANGE(0) = .TRUE.
	   2879        IF (  (FILTER_RANGE.EQ.0) .OR. (FILTER_RANGE.EQ.2) .OR.
	   2880      .       (FILTER_RANGE.EQ.5) .OR. (FILTER_RANGE.EQ.6) )
	   2881      .		SRANGE(1) = .TRUE.
	   2882        IF (  (FILTER_RANGE.EQ.0) .OR. (FILTER_RANGE.EQ.3) .OR.
	   2883      .       (FILTER_RANGE.EQ.4) .OR. (FILTER_RANGE.EQ.5) )
	   2884      .		SRANGE(2) = .TRUE.
	   2885 
	   2886        TYPE 12
	   2887    12  FORMAT(' Do you want to limit the output to range checks? '
	   2888      .        '[y/n] ',$)
	   2889        ACCEPT 13, YORN
	   2890    13  FORMAT (A)
	   2891        IF (YORN.EQ.'Y' .OR. YORN.EQ.'y') RANGECHECK=1
	   2892 
	   2893        TYPE 15
	   2894    15  FORMAT(' Enter desired data filtering by solar wind speed range: ',/,
	   2895      .       '    -1 = no filtering by MASS speed ',/,
	   2896      .       '    0  = MASS speed filtering desired',/,

USER_REQUESTS_DATA_TYPE                                          3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  44
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2897      .       '        ',$)
	   2898       ACCEPT *, FILTER_SPEED
	   2899       IF (FILTER_SPEED .GT. -1) THEN
	   2900          TYPE 16
	   2901    16    FORMAT(' Enter minimum and maximum solar wind speed (inclusive)',/
	   2902      .          '     ',$)	  
	   2903 	 ACCEPT *, SPEED_MIN, SPEED_MAX
	   2904       ENDIF
	   2905 
	   2906 
	   2907        RETURN
	   2908        END


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1168 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               187044 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              4244 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               29288   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2432 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               224820


ENTRY POINTS

    Address   Type  Name                   
                                           
  4-00005968        USER_REQUESTS_DATA_TYPE


VARIABLES

    Address   Type  Name              Address   Type  Name              Address   Type  Name         
                                                                                                     
      **      I*4   DVSTEP_MAX          **      I*4   FILTER_SPEED        **      I*4   SPEED_MAX    
      **      I*4   DVSTEP_MIN    REG-00000005  I*4   I                   **      I*4   SPEED_MIN    
      **      I*4   FILTER_COINC    2-00001F38  I*4   J               2-00001F30  CHAR  YORN         
      **      I*4   FILTER_DVSTEP   2-00001F3C  I*4   K                                              
      **      I*4   FILTER_RANGE        **      I*4   RANGECHECK                                     


ARRAYS

     Address  Type  Name              Bytes  Dimensions

  1-000000F0  CHAR  RSELECTION           35  (0:6)
      **      L*4   SRANGE               12  (0:2)




USER_REQUESTS_DATA_TYPE                                          3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  45
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

LABELS

    Address   Label     Address   Label     Address   Label     Address   Label     Address   Label
                                                                                                   
      **       7          **       9          **       11         **       13         **       16  
      **       8          **       10         **       12         **       15                      

USER_REQUESTS_DATA_TYPE                                          3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  46
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2909 
	   2910 
	   2911 C***************************************************************************
	   2912 
	   2913       SUBROUTINE DPU_DEFAULT_COEFF(DNQ_MAX,DMQMAX,DMQMIN,   
	   2914      .		            DNM_MAX,DMMAX, DMMIN,
	   2915      .                      DEMIN,DEMAX,DTMIN,DTMAX,
	   2916      .                      DA,DB,DC1,DC2A,DC2B,DD1,DD2,DE,
	   2917      .                      DBREAK_C2, DBREAK_MQ,
	   2918      .                      DKM,DKQ,DNM_BINS,DNQ_BINS)
	   2919 
	   2920 C***
	   2921 C     This SUBROUTINE returns DPU default coefficients
	   2922 C***
	   2923 
	   2924       IMPLICIT NONE
	   2925 
	   2926       REAL*4 DA(6),			!mass coefficients
	   2927      .       DB(6),      		!NM coefficients
	   2928      .       DC1,DC2A,DC2B		!mass/charge coefficients
	   2929 C			 		C1= time of flight **2 of 1 keV proton
	   2930 C			 		C2= carbon foil correction
	   2931       INTEGER*4 DBREAK_C2  		!NQ value of C2 break point (83)
	   2932       REAL*4    DBREAK_MQ  		!M/Q value of C2 break point (~11)
	   2933 
	   2934       REAL*4 DD1,DD2,	!E/Q coefficients, D1= analyzer constant
	   2935 C			                   D2= step resolution
	   2936      .       DE(3)
	   2937 
	   2938       REAL*4 DEMIN, DEMAX,		   !min max energy and time
	   2939      .       DTMIN, DTMAX
	   2940 
	   2941       INTEGER*4  DNM_MAX, DNQ_MAX !DPU default max bin values
	   2942 
	   2943       REAL*4 DMMAX, DMMIN,    !DPU DEFAULT measurable mass range in amu 
	   2944      .       DMQMAX, DMQMIN   !DPU DEFAULT measurable m/q range in amu/e        
	   2945 
	   2946       REAL*4  DKM,DKQ           !NM, NQ resolution parameters
	   2947       REAL*4  DNM_BINS(0:70),  !Nm and Nq bin lower boundary values in mass 
	   2948      .        DNQ_BINS(0:130)   !	and m/q, based on DKM and DKQ and 
	   2949 C				        M min,M/q min
	   2950 
	   2951       INTEGER*4 I,J,K
	   2952      
	   2953 C   ****
	   2954 C   *  Initialize constants with default dpu values (ref:  pages 345-349  
	   2955 C   *  of WIND SMS COMMAND AND DATA FORMATS FOR THE SMS INSTRUMENT R.3.0) 
	   2956 C   ****	
	   2957 
	   2958       DNM_MAX = 59
	   2959       DNQ_MAX = 126
	   2960       DMMAX  = 95.
	   2961       DMMIN  = 0.5
	   2962       DMQMAX = 42.
	   2963       DMQMIN = 0.9
	   2964 
	   2965       DA(1) = 2.69575

DPU_DEFAULT_COEFF                                                3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  47
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   2966       DA(2) = -0.843766
	   2967       DA(3) = -2.38009
	   2968       DA(4) = 0.385641
	   2969       DA(5) = 0.0513127
	   2970       DA(6) = 0.0690096
	   2971 
	   2972 
	   2973       DC1 = 1.9159E-05
	   2974       DC2A= 1.5
	   2975       DC2B= 2.5
	   2976       DBREAK_C2 = 83
	   2977 C          m/q = MQmin *   kQ                     **(nq-1)
	   2978       DBREAK_MQ = 0.9   * ( (42.0/0.9)**(1./126.) )**(83.-1.)
	   2979 
	   2980       DD1 = 6.190722
	   2981       DD2 = 1.1225857
	   2982 
	   2983       DEMIN = 21.0
	   2984       DEMAX = 2675.0
	   2985       DTMIN = 11.0
	   2986       DTMAX = 408.0
	   2987 
	   2988 C  ***
	   2989 C  *              calculate binning parameters                
	   2990 C  *              M(lower bound of Nm) = Mmin * kM**(Nm-1)    
	   2991 C  *              M/Q(lower bound of Nq) = MQmin * kQ**(Nq-1) 
	   2992 C  ***
	   2993 
	   2994       DKM = ( DMMAX/DMMIN )**(1./(FLOAT(DNM_MAX)-1.))   !substract 1 from
	   2995 C                                                    nm_max (= overflow m)
	   2996       DKQ = (DMQMAX/DMQMIN)**(1./FLOAT(DNQ_MAX))
	   2997 
	   2998       DO I = 0,70
	   2999          DNM_BINS(I) = 0.
	   3000          IF(I.GT.0.  .AND.  I.LE.DNM_MAX) 
	   3001      .        DNM_BINS(I) = DMMIN * DKM**(FLOAT(I)-1.)
	   3002       END DO
	   3003 
	   3004       DO I = 0, 130
	   3005          DNQ_BINS(I) = 0.
	   3006          IF(I.GT.0  .AND.  I.LE.DNQ_MAX+1) 
	   3007      .        DNQ_BINS(I) = DMQMIN *DKQ**(FLOAT(I)-1.)
	   3008       END DO
	   3009 
	   3010 C     coefficients related to both D values and binning resolution
	   3011       	DE(1) = -351.6997334
	   3012       	DE(2) = 32.7867706
	   3013       	DE(3) = 65.5735412
	   3014 
	   3015 C     coefficients related to both A values and binning resolution
	   3016         DB(1) = 38.4605
	   3017         DB(2) = -9.32689
	   3018         DB(3) = -26.3092
	   3019         DB(4) = 4.26283
	   3020         DB(5) = 0.567205
	   3021         DB(6) = 0.762824
	   3022 

DPU_DEFAULT_COEFF                                                3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  48
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   3023 
	   3024       RETURN
	   3025       END


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1168 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               187044 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              4244 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               29288   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2432 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               224820


ENTRY POINTS

    Address   Type  Name             
                                     
  4-00005E60        DPU_DEFAULT_COEFF


VARIABLES

    Address   Type  Name          Address   Type  Name          Address   Type  Name          Address   Type  Name     
                                                                                                                       
      **      I*4   DBREAK_C2       **      R*4   DD2             **      R*4   DMMIN           **      R*4   DTMIN    
      **      R*4   DBREAK_MQ       **      R*4   DEMAX           **      R*4   DMQMAX    REG-########  I*4   I        
      **      R*4   DC1             **      R*4   DEMIN           **      R*4   DMQMIN      2-00000010  I*4   J        
      **      R*4   DC2A            **      R*4   DKM             **      I*4   DNM_MAX     2-00000014  I*4   K        
      **      R*4   DC2B            **      R*4   DKQ             **      I*4   DNQ_MAX                                
      **      R*4   DD1             **      R*4   DMMAX           **      R*4   DTMAX                                  


ARRAYS

     Address  Type  Name            Bytes  Dimensions

      **      R*4   DA                 24  (6)
      **      R*4   DB                 24  (6)
      **      R*4   DE                 12  (3)
      **      R*4   DNM_BINS          284  (0:70)
      **      R*4   DNQ_BINS          524  (0:130)


DPU_DEFAULT_COEFF                                                3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  49
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   3026 
	   3027 C**************************************************************************
	   3028       SUBROUTINE USER_NMNQ_COEFF(UNQ_MAX,UMQMAX,UMQMIN,    !user input
	   3029      .		            UNM_MAX,UMMAX, UMMIN,
	   3030      .                      EMIN,EMAX,TMIN,TMAX,      !return values
	   3031      .                      NQ_MAX,MQMAX,MQMIN,
	   3032      .                      NM_MAX,MMAX ,MMIN,
	   3033      .                      KM,KQ,
	   3034      .                      A,B,C1,C2A,C2B,D1,D2,E,
	   3035      .                      BREAK_C2, BREAK_MQ)
	   3036 C*******************************************************************
	   3037 C     This SUBROUTINE calculates coefficients for nm and nq        *
	   3038 C     parameters         					   *
	   3039 C     Original version 24 Jan 95 by ABG                            *
	   3040 C     History:							   *
	   3041 C                                                                  *
	   3042 c*******************************************************************
	   3043       IMPLICIT NONE
	   3044 
	   3045       REAL*4 A(6),	!mass coefficients
	   3046      .       B(6),      !NM coefficients
	   3047      .       C1,C2A,C2B	!mass/charge coefficients
	   3048 C			 C1= time of flight **2 of 1 keV proton
	   3049 C			 C2= carbon foil correction
	   3050       INTEGER*4 BREAK_C2  !NQ value of C2 break point (83)
	   3051       REAL*4    BREAK_MQ  !M/Q value of C2 break point (~11)
	   3052 
	   3053       REAL*4 D1,D2,	!E/Q coefficients, D1= analyzer constant
	   3054 C			                   D2= step resolution
	   3055      .       E(3)
	   3056 
	   3057       INTEGER*4 DEFAULT_NQ,DEFAULT_NM   !default dpu algorithm used
	   3058 
	   3059       REAL*4 EMIN, EMAX,		!min max energy and time
	   3060      .       TMIN, TMAX
	   3061 
	   3062       INTEGER*4  NM_MAX,  NQ_MAX, 	   !max bin values 
	   3063      .           UNM_MAX, UNQ_MAX, 	   !USER max bin values (-1 = use default)
	   3064      .           DNM_MAX/59/, DNQ_MAX/126/ !DPU default max bin values
	   3065 
	   3066       REAL*4 MMAX,  MMIN,    !measurable mass range in amu 
	   3067      .       MQMAX, MQMIN,   !measurable m/q range in amu/e
	   3068      .       UMMAX, UMMIN,   !USER measurable mass range in amu (-1 = use default)
	   3069      .       UMQMAX,UMQMIN,  !USER measurable m/q range in amu/e (-1 = use default)
	   3070      .       DMMAX  /95./, DMMIN  /0.5/,  !DPU DEFAULT measurable mass range in amu 
	   3071      .       DMQMAX /42./, DMQMIN /0.9/   !DPU DEFAULT measurable m/q range in amu/e        
	   3072 
	   3073       REAL*4  KM,KQ           !NM, NQ resolution parameters
	   3074 
	   3075       INTEGER*4 I,J,K
	   3076      
	   3077 C   ***********************************************************************
	   3078 C   *  Initialize constants with default dpu values (ref:  pages 345-349  *
	   3079 C   *  of WIND SMS COMMAND AND DATA FORMATS FOR THE SMS INSTRUMENT R.3.0) *
	   3080 C   ***********************************************************************	
	   3081 
	   3082       A(1) = 2.69575

USER_NMNQ_COEFF                                                  3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  50
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   3083       A(2) = -0.843766
	   3084       A(3) = -2.38009
	   3085       A(4) = 0.385641
	   3086       A(5) = 0.0513127
	   3087       A(6) = 0.0690096
	   3088 
	   3089 
	   3090       C1 = 1.9159E-05
	   3091       C2A= 1.5
	   3092       C2B= 2.5
	   3093       BREAK_C2 = 83
	   3094 C          m/q = MQmin *   kQ                     **(nq-1)
	   3095       BREAK_MQ = 0.9   * ( (42.0/0.9)**(1./126.) )**(83.-1.)
	   3096 
	   3097       D1 = 6.190722
	   3098       D2 = 1.1225857
	   3099 
	   3100       EMIN = 21.0
	   3101       EMAX = 2675.0
	   3102       TMIN = 11.0
	   3103       TMAX = 408.0
	   3104 
	   3105 C   ***********************************************************************
	   3106 C   *  determine if default (i.e., dpu) binning will be used, in whole or *
	   3107 C   *  in part, or not at all.  Otherwise user input for min, max, number *
	   3108 C   *  of bins will be used.                                              *
	   3109 C   ***********************************************************************
	   3110 
	   3111       DEFAULT_NQ = 0		!initialize flag for dpu default
	   3112       DEFAULT_NM = 0
	   3113       IF(UMMIN.LT.0.  .AND.  UMMAX.LT.0.   .AND.   UNM_MAX.LT.0)
	   3114      .   DEFAULT_NM = 1		!if true, dpu bins for nm to be used
	   3115       IF(UMQMAX.LT.0. .AND.  UMQMIN.LT.0.  .AND.   UNQ_MAX.LT.0) 
	   3116      .   DEFAULT_NQ = 1		!if true, dpu bins for nq to be used
	   3117 
	   3118       IF(UMMIN.LT.0.)  THEN
	   3119              MMIN = DMMIN
	   3120       ELSE
	   3121              MMIN = UMMIN
	   3122       ENDIF
	   3123 
	   3124       IF(UMMAX.LT.0.) THEN
	   3125               MMAX = DMMAX
	   3126       ELSE
	   3127               MMAX = UMMAX
	   3128       ENDIF
	   3129 
	   3130       IF(UMQMIN.LT.0.) THEN
	   3131               MQMIN = DMQMIN
	   3132       ELSE
	   3133               MQMIN = UMQMIN
	   3134       ENDIF
	   3135 
	   3136       IF(UMQMAX.LT.0.) THEN
	   3137               MQMAX = DMQMAX 
	   3138       ELSE
	   3139               MQMAX = UMQMAX

USER_NMNQ_COEFF                                                  3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  51
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   3140       ENDIF
	   3141 
	   3142       IF(UNM_MAX.LT.0) THEN
	   3143             NM_MAX = DNM_MAX
	   3144       ELSE
	   3145             NM_MAX = UNM_MAX +1   !(DPU formulas use overflow mass as nmmax)
	   3146       ENDIF
	   3147 
	   3148       IF(UNQ_MAX.LT.0) THEN
	   3149             NQ_MAX = DNQ_MAX
	   3150       ELSE
	   3151             NQ_MAX = UNQ_MAX
	   3152       ENDIF
	   3153 
	   3154 
	   3155 
	   3156 C  ************************************************************
	   3157 C  *              calculate binning parameters                *
	   3158 C  *              M(lower bound of Nm) = Mmin * kM**(Nm-1)    *
	   3159 C  *              M/Q(lower bound of Nq) = MQmin * kQ**(Nq-1) *
	   3160 C  ************************************************************
	   3161 
	   3162       KM = ( MMAX/MMIN )**(1./(FLOAT(NM_MAX)-1.))   !substract 1 from
	   3163 C                                                    nm_max (= overflow m)
	   3164       KQ = (MQMAX/MQMIN)**(1./FLOAT(NQ_MAX))
	   3165 
	   3166 
	   3167       IF (DEFAULT_NQ .EQ. 1) THEN
	   3168       	E(1) = -351.6997334
	   3169       	E(2) = 32.7867706
	   3170       	E(3) = 65.5735412
	   3171       ELSE
	   3172 	E(1) = 1. + (  (ALOG(C1) - ALOG(MQMIN))/ALOG(KQ) )
	   3173         E(2) = 1. / ALOG(KQ)
	   3174         E(3) = 2. / ALOG(KQ)
	   3175         BREAK_C2 = IFIX ( ALOG(BREAK_MQ/MQMIN) / ALOG(KQ) )
	   3176       END IF
	   3177 
	   3178       IF (DEFAULT_NM .EQ. 1) THEN
	   3179         B(1) = 38.4605
	   3180         B(2) = -9.32689
	   3181         B(3) = -26.3092
	   3182         B(4) = 4.26283
	   3183         B(5) = 0.567205
	   3184         B(6) = 0.762824
	   3185       ELSE
	   3186         B(1) = 1. + (  (A(1)-ALOG(MMIN)) / ALOG(KM) )
	   3187         B(2) = A(2) / ALOG(KM)
	   3188         B(3) = A(3) / ALOG(KM)
	   3189         B(4) = A(4) / ALOG(KM)
	   3190         B(5) = A(5) / ALOG(KM)
	   3191         B(6) = A(6) / ALOG(KM)
	   3192       ENDIF
	   3193 
	   3194       RETURN
	   3195       END

USER_NMNQ_COEFF                                                  3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  52
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1168 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               187044 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              4244 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               29288   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2432 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               224820


ENTRY POINTS

    Address   Type  Name           
                                   
  4-00006120        USER_NMNQ_COEFF


VARIABLES

    Address   Type  Name           Address   Type  Name           Address   Type  Name           Address   Type  Name      
                                                                                                                           
      **      I*4   BREAK_C2     1-00000124  R*4   DMMIN            **      R*4   KM               **      R*4   UMMAX     
      **      R*4   BREAK_MQ     1-00000128  R*4   DMQMAX           **      R*4   KQ               **      R*4   UMMIN     
      **      R*4   C1           1-0000012C  R*4   DMQMIN           **      R*4   MMAX             **      R*4   UMQMAX    
      **      R*4   C2A          1-00000118  I*4   DNM_MAX          **      R*4   MMIN             **      R*4   UMQMIN    
      **      R*4   C2B          1-0000011C  I*4   DNQ_MAX          **      R*4   MQMAX            **      I*4   UNM_MAX   
      **      R*4   D1               **      R*4   EMAX             **      R*4   MQMIN            **      I*4   UNQ_MAX   
      **      R*4   D2               **      R*4   EMIN             **      I*4   NM_MAX                                   
REG-00000007  I*4   DEFAULT_NM   2-00001F40  I*4   I                **      I*4   NQ_MAX                                   
REG-00000006  I*4   DEFAULT_NQ   2-00001F44  I*4   J                **      R*4   TMAX                                     
  1-00000120  R*4   DMMAX        2-00001F48  I*4   K                **      R*4   TMIN                                     


ARRAYS

     Address  Type  Name        Bytes  Dimensions

      **      R*4   A              24  (6)
      **      R*4   B              24  (6)
      **      R*4   E              12  (3)


USER_NMNQ_COEFF                                                  3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  53
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   3196 
	   3197 
	   3198 C**************************************************************************
	   3199       
	   3200       SUBROUTINE USER_NMNQ_PHA_BINNED(DPPSP,DPPSM,DVSTEP,ECHN,TCHN,    !this pha event
	   3201      .                      NQ_MAX,MQMAX,MQMIN,    !information for binning
	   3202      .                      NM_MAX,MMAX, MMIN,
	   3203      .                      EMIN,EMAX,TMIN,TMAX,      
	   3204      .                      KM,KQ,
	   3205      .                      A,B,C1,C2A,C2B,D1,D2,E,
	   3206      .                      BREAK_C2, BREAK_MQ,
	   3207      .                      NQ,NM)			!return information
	   3208 
	   3209 C*******************************************************************
	   3210 C     This SUBROUTINE calculates ln bins for MASS and MASS/CHARGE  *
	   3211 C     given the number of bins requested by the user, plus         * 
	   3212 C     the status of the +/- DPPS, DV Step number, the compressed   *
	   3213 C     energy channel number,and the time-of-flight channel number  *
	   3214 C     for WIND-STICS. The algorithms for m, m/q are those used by  *
	   3215 C     the DPU  as of July 17, 1992.                                *
	   3216 C     Original version 24 Jan 95 by ABG from a routine by SChotoo. *
	   3217 C     History:
	   3218 C                
	   3219 c*******************************************************************
	   3220       IMPLICIT NONE
	   3221 
	   3222       REAL*4 A(6),	!mass coefficients
	   3223      .       B(6),      !NM coefficients
	   3224      .       C1,C2A,C2B	!mass/charge coefficients
	   3225 C			 C1= time of flight **2 of 1 keV proton
	   3226 C			 C2= carbon foil correction
	   3227       INTEGER*4 BREAK_C2  !NQ value of C2 break point (83)
	   3228       REAL*4    BREAK_MQ  !M/Q value of C2 break point (~11)
	   3229 
	   3230       REAL*4 D1,D2,	!E/Q coefficients, D1= analyzer constant
	   3231 C			                   D2= step resolution
	   3232      .       E(3)
	   3233       INTEGER*4 DPPSP,  !enable bit for dpps plus plate
	   3234      .          DPPSM,  !enable bit for dpps minus plate
	   3235      .          DVSTEP, !deflection voltage step number 
	   3236      .          ECHN    !compressed energy channel number
	   3237       REAL*4 ED,        !decompressed energy channel number            
	   3238      .       EMEAS,     !measured energy in keV
	   3239      .       EMIN,EMAX, !measurable energy range in keV 
	   3240      .       EPQ,       !E/Q
	   3241      .       M,         !mass in amu
	   3242      .       MPQ	!mass per charge in amu/e
	   3243       INTEGER*4  NM,NQ   		   !mass bin, m/q bin
	   3244       INTEGER*4  NM_MAX,  NQ_MAX 	   !max bin values 
	   3245 
	   3246       REAL*4 MMAX,  MMIN,    !measurable mass range in amu 
	   3247      .       MQMAX, MQMIN   !measurable m/q range in amu/e
	   3248 
	   3249       REAL*4  KM,KQ           !NM, NQ resolution parameters
	   3250 
	   3251    
	   3252       INTEGER*4 TCHN    !time channel number

USER_NMNQ_PHA_BINNED                                             3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  54
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   3253       REAL*4 TEMP,         
	   3254      .       TMIN,TMAX, !measurable time-of-flight range in ns
	   3255      .       TOF,       !measured time-of-flight in ns
	   3256      .       XX,YY
	   3257 
	   3258       INTEGER*4 I,J,K
	   3259      
	   3260 C  **************************************************************
	   3261 C  *			PHA Channel number conversions	 	*
	   3262 C  **************************************************************
	   3263 
	   3264 C     Energy Channel Number (ECHN) must first be decompressed (ED) 
	   3265 C     from 9-bit to 10-bit
	   3266       IF (ECHN .LT. 256) ED = ECHN
	   3267       IF ((ECHN .GE. 256).AND.(ECHN .LT. 384))ED = 2.0*ECHN - 256.0 + 0.5
	   3268       IF (ECHN .GE. 384) ED = 4.0*ECHN - 1024.0 + 1.5
	   3269 
	   3270 C     Calculate measured energy in keV from decompressed channel number
	   3271       EMEAS = (ED + 6)/0.37654782
	   3272 
	   3273      
	   3274 C     Calculate time of flight in ns from time channel number
	   3275       TOF = (TCHN - 44)/2.3725306895
	   3276 
	   3277 
	   3278 C  ******************************************************************
	   3279 C  *                   E/Q, M/Q, and M algorithms                   *
	   3280 C  *                   Nm, Nq values                                *
	   3281 C  ******************************************************************
	   3282 
	   3283 C     Calculate the e/q value based on the default dpu algorithm and constants.
	   3284           IF(IAND(DPPSP, DPPSM).EQ.1)THEN               !both plates on
	   3285             EPQ = D1 * (D2**DVSTEP)
	   3286           ELSE IF (DPPSP.EQ.1 .OR. DPPSM.EQ.1) THEN     !one plate on  
	   3287             EPQ = 0.5 * D1 * (D2**DVSTEP)                
	   3288           ELSE                                          !neither plate on
	   3289             EPQ = 0
	   3290           ENDIF
	   3291 
	   3292 C     Calculate mass per charge in amu/e
	   3293     
	   3294       MPQ = C1*(EPQ - C2A)*(TOF**2) 
	   3295       IF (MPQ .GE. BREAK_MQ) MPQ = C1*(EPQ - C2B)*(TOF**2)   
	   3296 
	   3297       IF (TOF .GT. 0) THEN
	   3298            NQ = E(1) + E(2)*ALOG(D1* (D2**DVSTEP) - C2A) +
	   3299      .          E(3)*ALOG(TOF)
	   3300            IF (NQ .GE. BREAK_C2)       
	   3301      .      NQ = E(1) + E(2)*ALOG(D1* (D2**DVSTEP) - C2B) +
	   3302      .     	 E(3)*ALOG(TOF)
	   3303            IF (NQ .GT. NQ_MAX) NQ = NQ_MAX+1	!M/Q overflow
	   3304            IF (NQ .LT. 1  ) NQ = 0	        !M/Q underflow
	   3305       ELSE
	   3306          NQ = 0
	   3307       ENDIF
	   3308 
	   3309 C     Calculate mass in amu

USER_NMNQ_PHA_BINNED                                             3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  55
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   3310       IF ((EMEAS .GT. EMIN) .AND. (EMEAS .LT. EMAX) .AND.                
	   3311      .    (TOF   .GT. TMIN) .AND. (TOF   .LT. TMAX) ) THEN
	   3312 
	   3313          XX = ALOG(EMEAS)
	   3314          YY = ALOG(TOF)
	   3315          TEMP = A(1) + A(2)*XX + A(3)*YY + A(4)*XX*YY
	   3316          TEMP = TEMP + A(5)*XX*XX + A(6)*YY*YY*YY
	   3317          M = EXP(TEMP)
	   3318 
	   3319          NM = B(1) + B(2)*XX + B(3)*YY + B(4)*XX*YY +
	   3320      .        B(5)*XX*XX + B(6)*YY*YY*YY
	   3321 
	   3322          IF (NM .GE. NM_MAX) THEN
	   3323               NM =  NM_MAX		!overflow mass class  (59)
	   3324 	 ELSE IF (NM .LT. 1) THEN
	   3325               NM =  NM_MAX + 1		!underflow mass class (60)
	   3326 	 ENDIF
	   3327       ELSE IF(EMEAS .LE. EMIN) THEN
	   3328 	 M   = 0
	   3329          NM  = 0                       !mass zero event
	   3330       ELSE IF (EMEAS .GE. EMAX) THEN
	   3331 	 M   = 0
	   3332          NM  = NM_MAX + 2	       !energy overflow (61)
	   3333       ELSE IF (TOF .LE. TMIN) THEN
	   3334          M   = 0 
	   3335 	 NM  = NM_MAX + 3              !time underflow (62)
	   3336       ELSE IF (TOF .GE. TMAX) THEN
	   3337 	 M   = 0
	   3338          NM  = NM_MAX + 4              !time overflow (63)
	   3339       END IF             
	   3340 
	   3341 
	   3342       RETURN
	   3343       END

USER_NMNQ_PHA_BINNED                                             3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  56
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1168 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               187044 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              4244 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               29288   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2432 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               224820


ENTRY POINTS

    Address   Type  Name                
                                        
  4-00006598        USER_NMNQ_PHA_BINNED


VARIABLES

    Address   Type  Name         Address   Type  Name         Address   Type  Name         Address   Type  Name    
                                                                                                                   
      **      I*4   BREAK_C2       **      I*4   ECHN           **      R*4   KQ             **      I*4   NQ_MAX  
      **      R*4   BREAK_MQ   2-00000000  R*4   ED             **      R*4   M              **      I*4   TCHN    
      **      R*4   C1             **      R*4   EMAX           **      R*4   MMAX           **      R*4   TEMP    
      **      R*4   C2A      REG-00000022  R*4   EMEAS          **      R*4   MMIN           **      R*4   TMAX    
      **      R*4   C2B            **      R*4   EMIN     REG-00000021  R*4   MPQ            **      R*4   TMIN    
      **      R*4   D1       REG-00000024  R*4   EPQ            **      R*4   MQMAX    REG-00000023  R*4   TOF     
      **      R*4   D2         2-00000004  I*4   I              **      R*4   MQMIN    REG-00000025  R*4   XX      
      **      I*4   DPPSM      2-00000008  I*4   J              **      I*4   NM       REG-00000020  R*4   YY      
      **      I*4   DPPSP      2-0000000C  I*4   K              **      I*4   NM_MAX                               
      **      I*4   DVSTEP         **      R*4   KM             **      I*4   NQ                                   


ARRAYS

     Address  Type  Name        Bytes  Dimensions

      **      R*4   A              24  (6)
      **      R*4   B              24  (6)
      **      R*4   E              12  (3)


USER_NMNQ_PHA_BINNED                                             3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  57
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   3344 
	   3345 c***************************************************************************************************
	   3346       SUBROUTINE OMR_EFF(EFF_DATA)
	   3347 c***************************************************************************************************
	   3348 C This routine calculates the efficiency for different ions at each voltage step. These efficiencies 
	   3349 C are for triple coincidence only, i.e. both mass/charge and non-zero mass obtained. 
	   3350 c
	   3351 c Created 30-MAR-1995 	by	K. CHOTOO from the one in WSTICS_RATES as template
	   3352 c
	   3353 C Subroutines called:	WSTICSEFF
	   3354 c Revision History:
	   3355 C
	   3356 C***************************************************************************************************
	   3357 			IMPLICIT NONE
	   3358       REAL*4 DCR_FSR,			!DCR/FSR
	   3359      .       deltaE,			!Energy bandwidth (=0.019E)
	   3360      .       E,				!Energy
	   3361      .       EFF_DATA(0:31,1:30),      	!Matrix rate efficiency TCR/Io
	   3362      .       EPQ(0:31),            	!Energy/charge for each voltage step
	   3363      .       DCR_RSR,			!DCR/RSR
	   3364      .       ION_MASS(1:30),		!Mass of ions
	   3365      .       M,				!Mass
	   3366      .       MR_ENERGY(0:31,1:30),	!Total energy at each voltage step for rates
	   3367      .       TCR_FSR			!TCR/FSR             
	   3368 
	   3369       INTEGER I,J			!Counters
	   3370 
	   3371       DATA ION_MASS/1.000,3.971,3.971,11.916,11.916,11.916,15.872,15.872,15.872,20.019,24.112,24.112,
	   3372      .              27.863,27.863,27.863,55.404,55.404,55.404,55.404,55.404,55.404,55.404,
	   3373      .              0,0,0,0,0,0,0,0/
	   3374 
	   3375 
	   3376 C		************ STATEMENTS *************
	   3377 
	   3378       DO 10  I = 0,31
	   3379         EPQ(I) = 6.190722 * (1.1225857**I)
	   3380   10  CONTINUE
	   3381 
	   3382       DO 15 J=1,30			!Initialize efficiency array to 1.0
	   3383         DO 14 I=0,31
	   3384           EFF_DATA(I,J) = 1.0
	   3385   14    CONTINUE
	   3386   15  CONTINUE
	   3387 
	   3388       DO 20  I = 0,31
	   3389         MR_ENERGY(I,1)  = EPQ(I)	!H+
	   3390         MR_ENERGY(I,2)  = EPQ(I)*2.0	!He+2
	   3391         MR_ENERGY(I,3)  = EPQ(I)	!He+
	   3392         MR_ENERGY(I,4)  = EPQ(I)*6.0	!C+6
	   3393         MR_ENERGY(I,5)  = EPQ(I)*5.0	!C+5
	   3394         MR_ENERGY(I,6)  = EPQ(I)*4.0	!C+4
	   3395         MR_ENERGY(I,7)  = EPQ(I)*7.0	!O+7
	   3396         MR_ENERGY(I,8)  = EPQ(I)*6.0	!O+6
	   3397         MR_ENERGY(I,9)  = EPQ(I)	!O+1
	   3398         MR_ENERGY(I,10) = EPQ(I)*8.0	!Ne+8
	   3399         MR_ENERGY(I,11) = EPQ(I)*10.0	!Mg+10
	   3400         MR_ENERGY(I,12) = EPQ(I)*8.0	!Mg+8

OMR_EFF                                                          3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  58
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   3401         MR_ENERGY(I,13) = EPQ(I)*12.0	!Si+12
	   3402         MR_ENERGY(I,14) = EPQ(I)*9.0	!Si+9
	   3403         MR_ENERGY(I,15) = EPQ(I)*8.0	!Si+8
	   3404         MR_ENERGY(I,16) = EPQ(I)*16.0	!Fe+16
	   3405         MR_ENERGY(I,17) = EPQ(I)*14.0	!Fe+14
	   3406         MR_ENERGY(I,18) = EPQ(I)*12.0	!Fe+12
	   3407         MR_ENERGY(I,19) = EPQ(I)*11.0	!Fe+11
	   3408         MR_ENERGY(I,20) = EPQ(I)*10.0	!Fe+10
	   3409         MR_ENERGY(I,21) = EPQ(I)*9.0	!Fe+9
	   3410         MR_ENERGY(I,22) = EPQ(I)*8.0	!Fe+8
	   3411   20  CONTINUE 
	   3412 
	   3413       DO 40 J=1,22
	   3414         DO 30 I=0,31
	   3415           M = ION_MASS(J)
	   3416           E = MR_ENERGY(I,J)
	   3417           deltaE = 0.019*E				!Energy bandwidth
	   3418           CALL WSTICSEFF(E,M,DCR_RSR,TCR_FSR,DCR_FSR)
	   3419           IF(J .LE. 3) THEN
	   3420 	    IF((DCR_FSR * DCR_RSR).GT. 0) THEN		!Use DCR/Io for H+, He+2, and He+1
	   3421               EFF_DATA(I,J) = DCR_FSR * DCR_RSR * deltaE / M
	   3422             ELSE
	   3423               EFF_DATA(I,J) = 1.0
	   3424             ENDIF
	   3425 	  ELSE	    
	   3426 	    IF((TCR_FSR * DCR_RSR).GT. 0) THEN		!Use TCR/Io for other ions
	   3427               EFF_DATA(I,J) = TCR_FSR * DCR_RSR * deltaE / M	
	   3428             ELSE
	   3429               EFF_DATA(I,J) = 1.0
	   3430 	    ENDIF
	   3431 	  ENDIF
	   3432   30    CONTINUE
	   3433   40  CONTINUE
	   3434 
	   3435       RETURN
	   3436       END

OMR_EFF                                                          3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  59
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1168 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               187044 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              4244 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               29288   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2432 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               224820


ENTRY POINTS

    Address   Type  Name   
                           
  4-00006A38        OMR_EFF


VARIABLES

    Address   Type  Name        Address   Type  Name        Address   Type  Name   
                                                                                   
  2-00000FA0  R*4   DCR_FSR   0-0000000C# R*4   E         0-00000008# R*4   M      
  2-00000FA4  R*4   DCR_RSR REG-########  I*4   I         2-00000FA8  R*4   TCR_FSR
REG-00000025  R*4   DELTAE  REG-########  I*4   J                                  


ARRAYS

     Address  Type  Name             Bytes  Dimensions

      **      R*4   EFF_DATA          3840  (0:31, 30)
  2-00001EB0  R*4   EPQ                128  (0:31)
  1-00000078  R*4   ION_MASS           120  (30)
  2-00000FB0  R*4   MR_ENERGY         3840  (0:31, 30)



LABELS

    Address   Label     Address   Label     Address   Label
                                                           
  4-00000000   10         **       15     4-00006DBC   30  
  4-00000000   14     4-00000000   20         **       40  



OMR_EFF                                                          3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  60
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

FUNCTIONS AND SUBROUTINES REFERENCED

  Type  Name           
                       
        WSTICSEFF      

OMR_EFF                                                          3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  61
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   3437 
	   3438 
	   3439 c***************************************************************************************************
	   3440       SUBROUTINE STICS_ION_VELOCITY(ION_SPEED)
	   3441 c***************************************************************************************************
	   3442 C This routine calculates the speed for different ions at each voltage step. 
	   3443 c
	   3444 c Created 27-SEP-1996 	by	K. CHOTOO from the one in OMR_EFF as template
	   3445 c
	   3446 c Revision History:
	   3447 C
	   3448 C***************************************************************************************************
	   3449 			IMPLICIT NONE
	   3450       REAL*4 ION_SPEED(0:31,1:30),     !Matrix rate efficiency TCR/Io
	   3451      .       EPQ(0:31),            	!Energy/charge for each voltage step
	   3452      .       ION_MASS(1:30),		!Mass of ions
	   3453      .       MR_ENERGY(0:31,1:30)	!Total energy at each voltage step for each ion
	   3454 
	   3455       INTEGER I,J			!Counters
	   3456 
	   3457       DATA ION_MASS/1.000,3.971,3.971,11.916,11.916,11.916,15.872,15.872,15.872,20.019,24.112,24.112,
	   3458      .              27.863,27.863,27.863,55.404,55.404,55.404,55.404,55.404,55.404,55.404,
	   3459      .              0,0,0,0,0,0,0,0/
	   3460 
	   3461 
	   3462 C		************ STATEMENTS *************
	   3463 
	   3464       DO 10  I = 0,31
	   3465         EPQ(I) = 6.190722 * (1.1225857**I)
	   3466   10  CONTINUE
	   3467 
	   3468 
	   3469       DO 20  I = 0,31
	   3470         MR_ENERGY(I,1)  = EPQ(I)	!H+
	   3471         MR_ENERGY(I,2)  = EPQ(I)*2.0	!He+2
	   3472         MR_ENERGY(I,3)  = EPQ(I)	!He+
	   3473         MR_ENERGY(I,4)  = EPQ(I)*6.0	!C+6
	   3474         MR_ENERGY(I,5)  = EPQ(I)*5.0	!C+5
	   3475         MR_ENERGY(I,6)  = EPQ(I)*4.0	!C+4
	   3476         MR_ENERGY(I,7)  = EPQ(I)*7.0	!O+7
	   3477         MR_ENERGY(I,8)  = EPQ(I)*6.0	!O+6
	   3478         MR_ENERGY(I,9)  = EPQ(I)	!O+1
	   3479         MR_ENERGY(I,10) = EPQ(I)*8.0	!Ne+8
	   3480         MR_ENERGY(I,11) = EPQ(I)*10.0	!Mg+10
	   3481         MR_ENERGY(I,12) = EPQ(I)*8.0	!Mg+8
	   3482         MR_ENERGY(I,13) = EPQ(I)*12.0	!Si+12
	   3483         MR_ENERGY(I,14) = EPQ(I)*9.0	!Si+9
	   3484         MR_ENERGY(I,15) = EPQ(I)*8.0	!Si+8
	   3485         MR_ENERGY(I,16) = EPQ(I)*16.0	!Fe+16
	   3486         MR_ENERGY(I,17) = EPQ(I)*14.0	!Fe+14
	   3487         MR_ENERGY(I,18) = EPQ(I)*12.0	!Fe+12
	   3488         MR_ENERGY(I,19) = EPQ(I)*11.0	!Fe+11
	   3489         MR_ENERGY(I,20) = EPQ(I)*10.0	!Fe+10
	   3490         MR_ENERGY(I,21) = EPQ(I)*9.0	!Fe+9
	   3491         MR_ENERGY(I,22) = EPQ(I)*8.0	!Fe+8
	   3492   20  CONTINUE 
	   3493 

STICS_ION_VELOCITY                                               3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  62
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

	   3494       DO 40 J=1,22
	   3495         DO 30 I=0,31
	   3496 	   ION_SPEED(I,J) = 437.74 * SQRT(MR_ENERGY(I,J)/ION_MASS(J))
	   3497   30    CONTINUE
	   3498   40  CONTINUE
	   3499 
	   3500       RETURN
	   3501       END


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                1168 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               187044 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                              4244 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               29288   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                2432 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               224820


ENTRY POINTS

    Address   Type  Name              
                                      
  4-00006E98        STICS_ION_VELOCITY


VARIABLES

    Address   Type  Name     Address   Type  Name
                                                 
REG-########  I*4   I    REG-00000005  I*4   J   


ARRAYS

     Address  Type  Name             Bytes  Dimensions

  2-00000F20  R*4   EPQ                128  (0:31)
  1-00000000  R*4   ION_MASS           120  (30)
      **      R*4   ION_SPEED         3840  (0:31, 30)
  2-00000020  R*4   MR_ENERGY         3840  (0:31, 30)




STICS_ION_VELOCITY                                               3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  63
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91

LABELS

    Address   Label     Address   Label     Address   Label     Address   Label
                                                                               
  4-00000000   10     4-00000000   20     4-00000000   30         **       40  

STICS_ION_VELOCITY                                               3-DEC-1997 01:26:36    DEC Fortran V6.2-508                Page  64
                                Symbol Table                     3-DEC-1997 01:26:18    [WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.FOR;91



  +---------------------------------------------------+
  |               KEY TO ADDRESS CODE FORMATS         |
  |   ppp-oooooooo  - In Psect ppp, Offset oooooooo   |
  |   ***-********  - External                        |
  |               # - Suffix: Also In Registers       |
  |   REG-rrrrrrrr  - In Register rrrrrrrr            |
  |   REG-########  - In Various Registers            |
  |        **       - Not Used; Not Allocated         |
  +---------------------------------------------------+


COMMAND QUALIFIERS

  /ALIGNMENT=(COMMONS=(PACKED,NOMULTILANGUAGE),RECORDS=PACKED)
  /ASSUME=(ACCURACY_SENSITIVE,BACKSLASH,NODUMMY_ALIASES,NOUNDERSCORE)
  /CHECK=(ASSERTIONS,BOUNDS,FORMAT,FP_EXCEPTIONS,OVERFLOW,NOUNDERFLOW)
  /DEBUG=(NOSYMBOLS,TRACEBACK)
  /DESIGN=(NOCOMMENTS)
  /SHOW=(DICTIONARY,INCLUDE,MAP,PREPROCESSOR)
  /STANDARD=(NOSEMANTIC,NOSOURCE_FORM,NOSYNTAX)
  /WARNINGS=(NOALIGNMENT,NOARGUMENT_CHECKING,NODECLARATIONS,GENERAL,NOTRUNCATED_SOURCE,UNCALLED,
             UNINITIALIZED,UNREACHABLE,UNUSED)
  /NOAUTOMATIC  /BLAS=NOMAPPED  /CONVERT=NATIVE  /NOCROSS_REFERENCE  /NOD_LINES  /ERROR_LIMIT=30  /EXTEND_SOURCE
  /NOPAD_SOURCE  /NOF77  /FLOAT=G_FLOAT  /IEEE_MODE=FAST  /ROUNDING_MODE=NEAREST
  /GRANULARITY=QUADWORD  /INSTRUCTION_SET=FLOATING  /INTEGER_SIZE=32  /NOMACHINE_CODE
  /MATH_LIBRARY=ACCURATE  /NAMES=UPPERCASE  /OPTIMIZE=(LEVEL=4,UNROLL=0)  /REAL_SIZE=32  /NORECURSIVE
  /NOSEPARATE_COMPILATION  /NOSYNCHRONOUS_EXCEPTIONS  /NOSYNTAX_ONLY  /TERMINAL=NOSTATISTICS  /NOTIE  /VMS
  /NOANALYSIS_DATA
  /NODIAGNOSTICS
  /INCLUDE=(.FOR,.f,FORT$INCLUDE:.FOR,FORT$INCLUDE:.f)
  /LIST=SMS1:[WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.LIS;57
  /OBJECT=SMS1:[WIND.SOFTWARE.STICS]VSHIFT_SPECTRA.OBJ;47
  /NOLIBRARY
   sys$lib=SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1

COMPILER: DEC Fortran V6.2-508-274F

COMPILATION STATISTICS

  CPU time:         12.43 seconds
  Elapsed time:     17.40 seconds
  Pagefaults:         973
  I/O Count:          117
