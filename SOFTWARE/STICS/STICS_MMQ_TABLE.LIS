                                                                 1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page   1
1.5                                                             12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	      1 C
	      2       PROGRAM STICS_MMQ_TABLE
	      3 C This program reads a WIND L1 data file and dissects the PHA data, printing 
	      4 C it in a table vs time and science record number and calculated m & m/q
	      5 C 
	      6 C STICS_PHA_TABLE Created 	17-NOV-1994	JOHN PAQUETTE
	      7 C				04-JAN-1995	most recent version
	      8 C STICS_MMQ_TABLE created from above 	09-Jan-1995 ABG
	      9 C
	     10 c This version:    1.05	   20-FEB-1995
	     11 C
	     12 C Revision history:
	     13 C       20-FEB-1995	J. PAQUETTE	add fix for N=59 for GOODSPIN
	     14 c       20-FEB-1995     K. CHOTOO	for indeterminate Bitrate print '?'
	     15 C       27-FEB-1995	K. CHOTOO       if either BR,PHA or EDB flag is bad, skip spin;
	     16 c					corrected for 1st goodspin = 59; get increment
	     17 c					for DO loop
	     18 C	16-MAR-1995 	K. CHOTOO	if HDB flag is bad, calculate E/Q as if DPPS+/- are ON
	     19 C       29-MAY-1995     K. CHOTOO       Added Start and Stop times to output file header information
	     20 C       10-JUN-1995     K. CHOTOO       user can now name output files if desired
	     21 C	 9-JUN-1995	K. CHOTOO	Auxiliary file gives total PHA counts in each sector and each DVS
	     22 C	27-APR-1996	K. CHOTOO	Deleted auxiliary file which contained PHA sector and DVS information
	     23 C	16-APR-1996	K. CHOTOO	Routine can work for more than one day now. Run time added to output file.
	     24 C 	15-JAN-1997	K. CHOTOO	MASS speed calculated from routine supplied by George Ho.
	     25 C					Now data can be selected by solar wind speed and sector.
	     26 C					Output file is written to default user directory.
	     27 C					Corrected error in Telescope check condition.
	     28 C					Header information to matrix file now easier to view.
	     29 C	12-FEB-1997	K. CHOTOO	Fixed logic error in speed selection
	     30 C                                   
	     31 CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
	     32 CDEC$ IDENT '1.5'
	     33       INCLUDE	'INC_DIR:EDBDEF.INC/NOLIST'

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page   2
1.5                                                             12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	    571       INCLUDE   'INC_DIR:L1FMT.INC/NOLIST'
	    703       INCLUDE   '($RMSDEF)'
    1	    704 !*** MODULE $RMSDEF ***
    1	    705 CDEC$ OPTIONS/ALIGN=(RECORDS=PACKED,COMMONS=PACKED)
    1	    706  ! 
    1	    707  !  This SDL File Generated by VAX-11 Message V04-00 on 26-JAN-1994 13:51:15.86
    1	    708  ! 
    1	    709  ! 	.TITLE	RMSMSG -RMS COMPLETION CODES
    1	    710  !  *************************************************************************
    1	    711  !  *                                                                       *
    1	    712  !  * COPYRIGHT (C) DIGITAL EQUIPMENT CORPORATION, 1976, 1977, 1978, 1979,  *
    1	    713  !  * 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,     *
    1	    714  !  * 1991,1992                                                             *
    1	    715  !  * ALL RIGHTS RESERVED.                                                  *
    1	    716  !  * UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT LAWS  OF  THE  UNITED *
    1	    717  !  * STATES.                                                               *
    1	    718  !  *                                                                       *
    1	    719  !  * THE SOFTWARE CONTAINED ON THIS MEDIA IS PROPRIETARY TO  AND  EMBODIES *
    1	    720  !  * THE   CONFIDENTIAL   TECHNOLOGY  OF  DIGITAL  EQUIPMENT  CORPORATION. *
    1	    721  !  * POSSESSION, USE, DUPLICATION OR DISSEMINATION  OF  THE  SOFTWARE  AND *
    1	    722  !  * MEDIA  IS  AUTHORIZED  ONLY  PURSUANT TO A VALID WRITTEN LICENSE FROM *
    1	    723  !  * DIGITAL EQUIPMENT CORPORATION.                                        *
    1	    724  !  *                                                                       *
    1	    725  !  * RESTRICTED RIGHTS LEGEND USE, DUPLICATION, OR DISCLOSURE BY THE  U.S. *
    1	    726  !  * GOVERNMENT  IS  SUBJECT  TO RESTRICTIONS AS SET FORTH IN SUBPARAGRAPH *
    1	    727  !  * (C)(1)(II) OF DFARS 252.227-7013, OR IN FAR 52.227-19, AS APPLICABLE. *
    1	    728  !  *                                                                       *
    1	    729  !  *************************************************************************
    1	    730  ! ++
    1	    731  !  FACILITY: RMS
    1	    732  ! 
    1	    733  !  ABSTRACT:
    1	    734  ! 
    1	    735  ! 	THIS MODULE DEFINES ALL RMS COMPLETION CODES.
    1	    736  ! 
    1	    737  !  ENVIRONMENT:
    1	    738  ! 
    1	    739  ! 	THE MESSAGE TRANSLATOR MUST BE USED TO CONVERT RMSMSG.MSG INTO
    1	    740  ! 	RMSMSG.SDL.  THE SDL TRANSLATOR MUST THEN BE USED TO CONVERT
    1	    741  ! 	RMSMSG.SDL INTO RMSMSG.MAR (AND RMSMSG.B32).
    1	    742  ! 
    1	    743  !  AUTHOR: LEO F. LAVERDURE,	CREATION DATE:  10-DEC-1976
    1	    744  ! 
    1	    745  !  MODIFIED BY:
    1	    746  ! 
    1	    747  !                DEE RYAN                                30-SEP-1993
    1	    748  !                CORRECTED USE OF DIGITAL PRODUCT NAMES.
    1	    749  ! 
    1	    750  ! 	X-5	EMW		ELINOR M. WOODS		28-SEP-1993
    1	    751  ! 		MERGE IN OPENVMS VAX CORAL FIX:
    1	    752  ! 
    1	    753  ! 		X-10	EMW0019  ELINOR M. WOODS  	21-SEP-1993
    1	    754  ! 		ADD ONE NEW USER-REPORTABLE ERROR STATUS (WITH AN
    1	    755  ! 		ASSOCIATED STV): NETBTS.  RELOCATE NEW IDXSEARCH STATUS
    1	    756  ! 		(SEE X-9) FROM "ERROR with STV" SECTION TO "ERROR WITHOUT 
    1	    757  ! 		STV" section.  Expand "WITH STV' AND "without STV"
    1	    758  ! 		COMMENTS TO CLARIFY DIFFERENCE BETWEEN TWO.

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page   3
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    759  ! 
    1	    760  ! 	X-4	EMW0016		ELINOR M. WOODS		10-AUG-1993
    1	    761  ! 		MERGE IN CORAL FIX:
    1	    762  ! 
    1	    763  ! 		MODIFY SEVERITY OF TWO DTF ERROR CODES (DTFACC AND
    1	    764  ! 		DTFCRE) FROM FATAL TO ERROR, AS REQUESTED BY SNA/DTF
    1	    765  ! 		FACILITY.		
    1	    766  ! 
    1	    767  ! 		ALSO MOVE NEW IDXSEARCH STATUS FROM ERROR WITH NO 
    1	    768  ! 		STV GROUPING TO ERROR WITH STV GROUPING.
    1	    769  ! 
    1	    770  ! 	X-3	EMW0010		ELINOR M. WOODS		02-JUL-1993
    1	    771  ! 		TO SUPPORT NEW KEY-LESS-THAN FUNCTIONALITY, ADDITION 
    1	    772  ! 		OF ONE USER-REPORTABLE ERROR STATUS:  IDXSEARCH, AND
    1	    773  ! 		TWO NEW RMS-INTERNAL ERROR STATUSES:  LSCAN AND 
    1	    774  ! 		ROOTSRCH.		
    1	    775  ! 
    1	    776  ! 	X-2	CW0019		CHRIS WHITAKER		11-NOV-1992
    1	    777  ! 		MERGE IN OPENVMS VAX V6.0 CHANGES
    1	    778  ! 
    1	    779  ! 		X-8	JM0012	JOHN MUNZER		11-NOV-1992
    1	    780  ! 		CHANGE TEXT FOR RMS$_LNE.
    1	    781  ! 
    1	    782  ! 		X-7	JM0006	JOHN MUNZER		17-APR-1992
    1	    783  ! 		ADD !XL PARAMETER TO RMS$_BUG TO REPORT R2.
    1	    784  ! 
    1	    785  ! 	X-1	RAB		RICHARD A. BISHOP	24-JUN-1991
    1	    786  ! 		MOVED TO [STARLET] FACILITY
    1	    787  ! 
    1	    788  ! 	==================================
    1	    789  ! 	OLD AUDIT TRAIL FOLLOWS:
    1	    790  ! 
    1	    791  ! 	X-33	LSS0154		LEONARD S. SZUBOWICZ	 4-APR-1990
    1	    792  ! 		ALTER TEXT AND FAO PARAMETERS OF RMS$_RUH AND RMS$_BUG
    1	    793  ! 		CONDITION VALUES FOR RMS/DDTM SUPPORT.
    1	    794  ! 
    1	    795  ! 	X-32	PJH		PAUL J. HOULIHAN	17-JAN-1990
    1	    796  ! 		CHANGE TEXT FOR RMS$_INCOMPSHR ERROR MESSAGE.
    1	    797  ! 
    1	    798  ! 	X-31	LSS0130		LEONARD S. SZUBOWICZ	12-OCT-1989
    1	    799  ! 		MERGE OF RMS/DDTM GENERATION X-30D2.
    1	    800  ! 		ADD GENERAL DDTM_ERR ERROR MESSAGE FOR DDTM SERVICE FAILURES;
    1	    801  ! 		STV WILL CONTAIN THE FAILING SYSTEM SERVICE CONDITION VALUE.
    1	    802  ! 
    1	    803  ! 	X-30	LSS0080		LEONARD S. SZUBOWICZ	06-OCT-1988
    1	    804  ! 		ADD RMS$_OK_ACT MESSAGE FOR USE BY FUTURE WORK TO $DISPLAY.
    1	    805  ! 		THIS IS PART OF LATENT SUPPORT FOR RMS/DDTM.
    1	    806  ! 
    1	    807  ! 	X-29	GJA0080		GARY J. ALLISON		06-JUN-1988
    1	    808  ! 		CHANGE TEXT OF SEMANTICS MESSAGE.
    1	    809  ! 
    1	    810  ! 	X-28	GJA0072		GARY J. ALLISON		02-MAR-1988
    1	    811  ! 		ADD EXT_ERR, OPNOTSUP, EXTNOTFOU, AND SEMANTICS MESSAGES.
    1	    812  ! 
    1	    813  ! 	X-27	PMV0072		PETER M. VATNE		08-OCT-1987
    1	    814  ! 		CHANGE RMS$_NOJNLLIC TO RMS$_JNLNOTAUTH.
    1	    815  ! 

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page   4
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    816  !  	X-26	LSS0057		LEONARD S. SZUBOWICZ	15-SEP-1987
    1	    817  ! 		CHANGE TEXT FOR THE RMS$_OK_DUP STATUS SUCH THAT THE MESSAGE
    1	    818  ! 		IS APPLICABLE TO $GET AS WELL AS $PUT.
    1	    819  ! 
    1	    820  ! 	X-25	PMV0068		PETER M. VATNE		11-SEP-1987
    1	    821  ! 		ADD RMS$_NOJNLLIC, NO RMS JOURNALING LICENSE, FOR LMF.
    1	    822  ! 
    1	    823  ! 	X-24	RNM0026		RUSSELL N. MURRAY	15-AUG-1987
    1	    824  ! 		ADD RMS$_SYNCH MESSAGE FOR NOTIFICATION OF SYNCHRONOUS
    1	    825  ! 		COMPLETION.
    1	    826  ! 
    1	    827  ! 	X-23	JEJ0479		JAMES E JOHNSON		13-AUG-1987
    1	    828  ! 		ADD RMS$_IVATRACE MESSAGE.
    1	    829  ! 
    1	    830  ! 	X-22	PMV0061		PETER M. VATNE		03-AUG-1987
    1	    831  ! 		CHANGE RESERVED MESSAGE RMS$_BUG_XX5 TO RMS$_BUG_RU_COMMIT_FAIL
    1	    832  ! 		TO CORRESPOND TO POSITIVE RMS BUGCHECK FTL$_RU_COMMIT_FAIL.
    1	    833  ! 
    1	    834  !  	X-21	LSS0042		LEONARD S. SZUBOWICZ	13-MAY-1987
    1	    835  ! 		CHANGE RESERVED MESSAGE RMS$_BUG_XX4 TO RMS$_BUG_RU_ABORT_FAIL
    1	    836  ! 		TO CORRESPOND TO POSITIVE RMS BUGCHECK FTL$_RU_ABORT_FAIL
    1	    837  ! 	
    1	    838  ! 	X-20	SAD0034		STUART A. DAVIDSON	12-MAR-1987 
    1	    839  ! 		DROP QUOTES FROM SNADTF MESSAGE TEXT.
    1	    840  ! 
    1	    841  ! 	X-19	PJH		PAUL J. HOULIHAN	19-JAN-1987
    1	    842  ! 		MERGE IN 17J1.
    1	    843  ! 
    1	    844  ! 		X-17J1	PJH		PAUL J. HOULIHAN	15-JAN-1987
    1	    845  ! 			FIX SEVERAL SMALL JNL PROBLEMS.
    1	    846  ! 			ADD RMS$_BUG_FLUSH_JNL_FAILED CODE.
    1	    847  ! 
    1	    848  ! 	X-18	KPS0148		KENNETH P. SIEGEL	04-DEC-1986
    1	    849  ! 		ADDED SNPPF (STATISTICS MONITORING NOT SUPPORTED FOR
    1	    850  ! 		PROCESS PERMANENT FILES) ERROR MESSAGE.
    1	    851  ! 
    1	    852  ! 	X-17	PMV0025		PETER M. VATNE		24-NOV-1986
    1	    853  ! 		ADD NEW MESSAGE, RMS$_NOTSAMEJNL.  THIS STATUS IS
    1	    854  ! 		USED TO RESTRICT AI/BI WITH RU JOURNALING TO A
    1	    855  ! 		SINGLE LONG-TERM JOURNAL FILE.
    1	    856  ! 
    1	    857  ! 	X-16	DAS		DAVID A. SOLOMON	18-NOV-1986
    1	    858  ! 		ADD NEW MESSAGE, RMS$_DELJNS. REMOVE RMS$_XCR (BY REPLACING IT
    1	    859  ! 		WITH A PLACEHOLDER), AS JOURNALING BITS ARE NO LONGER
    1	    860  ! 		SPECIFIED IN THE $XABJNL. SLIGHT WORDING CHANGE ON DETACHED
    1	    861  ! 		RU RECOVERY ERROR MESSAGES.
    1	    862  ! 
    1	    863  ! 	X-15	DAS		DAVID A. SOLOMON	12-NOV-1986
    1	    864  ! 		FIX ERROR IN X-5/X-6: JOURNALING VARIANT NOT MERGED
    1	    865  ! 		CORRECTLY, RESULTING IN SEVERAL JOURNALING MESSAGES NUMBERS
    1	    866  ! 		BEING DIFFERENT IN THE MAININE THAN WHAT THEY WERE ON THE
    1	    867  ! 		JOURNALING VARIANT. ALSO, MOVE NEW SNADTF MESSAGES TO RE-USE
    1	    868  ! 		AVAILABLE UNUSED MESSAGE NUMBERS, INSTEAD OF GENERATING NEW
    1	    869  ! 		ONES. FINALLY, CHANGE RMS$_BUG_ABORT TO RMS$_BUG_RU_ACTIVE.
    1	    870  ! 
    1	    871  ! 	X-14	SAD0014		STUART A. DAVIDSON	 4-NOV-1986
    1	    872  ! 		SNADTF - FIX TYPO IN DTFACC, DTFCRE

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page   5
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    873  ! 
    1	    874  ! 	X-13	SAD0014		STUART A. DAVIDSON	 3-NOV-1986
    1	    875  ! 		SNADTF - FIX TYPO, ADD 2 ADDITIONAL MESSAGES.
    1	    876  ! 
    1	    877  ! 	X-12	JEJ0377		JAMES E JOHNSON		29-OCT-1986
    1	    878  ! 		ADD NOEXTEND ERROR CODE TO FLAG FAILED RELATIVE FILE
    1	    879  ! 		EXTENDS DUE TO PREVIOUS FAILURES.
    1	    880  ! 
    1	    881  ! 	X-11	KPS0131		KENNETH P. SIEGEL	25-OCT-1986
    1	    882  ! 		ADDED SNS ERROR CODE FOR STATISTICS NOT SUPPORT ON
    1	    883  ! 		NON-DISK DEVICES.
    1	    884  ! 
    1	    885  ! 	X-10	SAD009		STUART A. DAVIDSON	06-OCT-1986
    1	    886  ! 		ADD COMPLETION CODES FOR SNADTF (IBM DATA XFER)
    1	    887  ! 
    1	    888  ! 	X-9	GJA0003		GARY J. ALLISON		29-SEP-1986
    1	    889  ! 		ADD DETACHED RECOVERY ERROR MESSAGES
    1	    890  ! 
    1	    891  ! 	X-8	PMV0008		PETER M. VATNE		24-SEP-1986
    1	    892  ! 		MODIFY RMS$_ACC_AIJ, RMS$_ACC_BIJ, AND RMS$_ACC_ATJ
    1	    893  ! 		TO ALSO OUTPUT THE STV.
    1	    894  ! 
    1	    895  ! 	X-7	JWT0243		JIM TEAGUE		 2-SEP-1986
    1	    896  ! 		ADD NEW ERRORS FOR COLLATED KEYS.
    1	    897  ! 
    1	    898  ! 	X-6	GJA		GARY J. ALLISON		29-JUL-1986
    1	    899  ! 		REMOVE DUPS FROM JNL MERGE.
    1	    900  ! 
    1	    901  ! 	X-5	GJA		GARY J. ALLISON		29-JUL-1986
    1	    902  ! 		MERGE JOURNALING INTO MAINLINE
    1	    903  ! 
    1	    904  ! 		X-3J6	DAS		DAVID A. SOLOMON	14-APR-1986
    1	    905  ! 			REMOVE RMS$_RUH_FILE (USING A GENERAL RUF MESSAGE INSTEAD).
    1	    906  ! 			CHANGE RMS$_RUH TEXT TO NOT HAVE FAO PARAMETERS. ADD
    1	    907  ! 			RMS$_BUG_RURECERR.
    1	    908  ! 	
    1	    909  ! 		X-3J5	JEJ0302		JAMES E JOHNSON		 4-APR-1986
    1	    910  ! 			ADD RMS$_RRF (ERROR DURING RU RECOVERY) AND
    1	    911  ! 			RMS$_RUH/RMS$_RUH_FILE (USED TO FORM TEXT OF RU HANDLER ERRORS
    1	    912  ! 			SENT TO OPCOM).
    1	    913  ! 	
    1	    914  ! 		X-3J4	JEJ0272		JAMES E JOHNSON		11-FEB-1986
    1	    915  ! 			ADD RMS$_RUF, RMS$_BUG_ABORT CODES.
    1	    916  ! 	
    1	    917  ! 		X-3J3	JEJ0237		JAMES E JOHNSON		16-DEC-1985
    1	    918  ! 			ADD RMS$_RUNDOWN CODE
    1	    919  ! 	
    1	    920  ! 		X-3J2	JEJ0205		JAMES E JOHNSON		25-OCT-1985
    1	    921  ! 			ADD JOURNAL SPECIFIC WRTJNL_XXJ ERROR CODES TO REPLACE
    1	    922  ! 			THE GENERIC ERRWRTJNL CODE.
    1	    923  ! 
    1	    924  ! 	X-4	JEJ0216		JAMES E JOHNSON		18-NOV-1985
    1	    925  ! 		MERGE X-3J2 INTO MAIN LINE FOR V4.4.
    1	    926  ! 
    1	    927  ! 		X-3J2	JEJ0205		JAMES E JOHNSON		25-OCT-1985
    1	    928  ! 			ADD JOURNAL SPECIFIC WRTJNL_XXJ ERROR CODES TO REPLACE
    1	    929  ! 			THE GENERIC ERRWRTJNL CODE.

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page   6
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    930  ! 
    1	    931  ! 	X-3	JEJ0161		JAMES E JOHNSON		 9-SEP-1985
    1	    932  ! 		UPDATE RMS JOURNALING MESSAGES.
    1	    933  ! 
    1	    934  ! 	X-2	JWT0212		JIM TEAGUE		 4-SEP-1985
    1	    935  ! 		ADD (WHAT IS FOR NOW) AN INTERNAL STATUS CODE TO 
    1	    936  ! 		DIFFERENTIATE BETWEEN FINDING A DELETED RECORD (DEL)
    1	    937  ! 		AND FINDING IT BUT WITH A DIFFERENT KEY (KEY_MISMATCH).
    1	    938  ! 		
    1	    939  ! 	V03-024	RAS0314		RON SCHAEFER		21-JUN-1984
    1	    940  ! 		WORK OVER THE MESSAGES ONE MORE TIME:  FIX TYPO IN OK_RNF,
    1	    941  ! 		DELETE ACPEOF ERROR, DELETE WSF ERROR.
    1	    942  ! 
    1	    943  ! 	V03-023	RAS0282		RON SCHAEFER		28-MAR-1984
    1	    944  ! 		MINOR TEXT CHANGES AND COMMENTS ADDED.
    1	    945  ! 		DELETE RMS$_COP ERROR.
    1	    946  ! 
    1	    947  ! 	V03-022	DAS0005		DAVID SOLOMON		19-MAR-1984
    1	    948  ! 		REMOVE RMS$_ECHO (NO LONGER NEEDED AS A RESULT OF NEW
    1	    949  ! 		IMPLEMENTATION FOR ECHO SYS$INPUT -> SYS$OUTPUT).
    1	    950  ! 
    1	    951  ! 	V03-021	JWT0150		JIM TEAGUE		01-FEB-1984
    1	    952  ! 		ADD RMS$_IFF FOR TRYING TO WRITE-ACCESS A FILE ON 
    1	    953  ! 		MAGTAPE THAT HAS NON-0 VALUE FOR ANSI BUFFER OFFSET.
    1	    954  ! 
    1	    955  ! 	V03-020	RAS0233		RON SCHAEFER		 9-JAN-1984
    1	    956  ! 		ADD RMS$_NOVALPRS ERROR FOR $SEARCH NOT PRECEDED BY
    1	    957  ! 		VALID $PARSE.
    1	    958  ! 
    1	    959  ! 	V03-019	JWT0148		JIM TEAGUE		20-DEC-1983
    1	    960  ! 		ADD A JNL XAB ERROR FOR CONFLICTING RU ATTRIBUTES
    1	    961  ! 		ON $CREATE: RMS$_XCR.
    1	    962  ! 
    1	    963  ! 	V03-018	RAS0171		RON SCHAEFER		28-JUL-1983
    1	    964  ! 		ADD RMS$_BUSY; A STRUCTURE-LESS ERROR (R0-ONLY STATUS)
    1	    965  ! 		REPLACING TEMP3.
    1	    966  ! 
    1	    967  ! 	V03-017	DAS0004		DAVID SOLOMON		28-JUN-1983
    1	    968  ! 		ADD RMS$_FILEPURGED; ADD RMS$_ACPEOF FOR ZALEWSKI.
    1	    969  ! 
    1	    970  ! 	V03-016	KPL0007		PETER LIEBERWIRTH	 8-JUN-1983
    1	    971  ! 		FIX SPELLING IN JNL ERROR MESSAGES, ADD CJF ERROR WHICH
    1	    972  ! 		WILL SOON SUBSUME COP AND CQE.
    1	    973  ! 
    1	    974  ! 	V03-015	DAS0003		DAVID SOLOMON		18-FEB-1983
    1	    975  ! 		ADD XNF (REPLACING TEMP9), TMR (NEW), LWC (NEW).
    1	    976  ! 
    1	    977  ! 	V03-014	KBT0497		KEITH B. THOMPSON	18-FEB-1983
    1	    978  ! 		ADD INCOMPSHR ERROR (REUSE OF TEMP1 SLOT)
    1	    979  ! 
    1	    980  ! 	V03-013	RAS0120		RON SCHAEFER		 2-FEB-1983
    1	    981  ! 		ADD ECHO PSEUDO-STATUS TO SUPPORT ECHO OF SYS$INPUT
    1	    982  ! 		TO SYS$OUTPUT.
    1	    983  ! 
    1	    984  ! 	V03-012	JWH0174		JEFFRY W. HORN		24-JAN-1983
    1	    985  ! 		ADD CQE AND COP ERRORS.
    1	    986  ! 

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page   7
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    987  ! 	V03-011	KPL0006		PETER LIEBERWIRTH	 7-JAN-1983
    1	    988  ! 		ADD OK_RULK FOR RECOVERY UNIT SUPPORT.
    1	    989  ! 
    1	    990  ! 		ADD REENT ERROR FOR $RENAME.
    1	    991  ! 		
    1	    992  ! 	V03-009	JWH0153		JEFFREY W. HORN		 8-DEC-1982
    1	    993  ! 		ADD NRU ERROR.
    1	    994  ! 
    1	    995  ! 	V03-008	JWH0152		JEFFREY W. HORN		 8-DEC-1982
    1	    996  ! 		ADD JNS ERROR.
    1	    997  ! 
    1	    998  ! 	V03-007 MCN0002		MARIA DEL C. NASR	15-NOV-1982
    1	    999  ! 		REPLACE ORD ERROR CODE ELIMINATED BY MCN0001, SINCE
    1	   1000  ! 		THE NETWORK CODE REFERENCES IT.
    1	   1001  ! 
    1	   1002  ! 	V03-006 MCN0001		MARIA DEL C. NASR	26-OCT-1982
    1	   1003  ! 		PRINT KEY OF REFERENCE OR AREA IDENTIFICATION NUMBER
    1	   1004  ! 		INSTEAD OF XAB ADDRESS FOR ERRORS RETURNED DURING
    1	   1005  ! 		INDEXED FILE CREATION.  ALSO RENAME ALL UNUSED ERROR
    1	   1006  ! 		CODES TO TEMP.
    1	   1007  ! 
    1	   1008  ! 	V03-005	JWH0102		JEFFREY W. HORN		24-SEP-1982
    1	   1009  ! 		ADD RUP ERROR.
    1	   1010  ! 
    1	   1011  ! 	V03-004	RAS0095		RON SCHAEFER		 7-SEP-1982
    1	   1012  ! 		ADD OVRDSKQUOTA ERROR.
    1	   1013  ! 
    1	   1014  ! 	V03-002	JWH0002		JEFFREY W. HORN		26-JUL-1982
    1	   1015  ! 		CONVERT TO .MSG FORMAT.   ADD RUM ERROR.
    1	   1016  ! 
    1	   1017  ! 	V03-001	JWH0001		JEFFREY W. HORN		20-JUL-1982
    1	   1018  ! 		ADD JNF, JOP, AND NOJ ERRORS.
    1	   1019  ! 
    1	   1020  ! 	V02-042	KPL0005		PETER LIEBERWIRTH	 4-FEB-1982
    1	   1021  ! 		ADD ERROR MESSAGES RMS$_EXENQLM AND RMS$_DEADLOCK
    1	   1022  ! 		CORRECTLY.
    1	   1023  ! 
    1	   1024  ! 	V02-041	CDS0001		C D SAETHER	24-JAN-1982
    1	   1025  ! 		ADD GBC AND CRMP ERRORS.
    1	   1026  ! 
    1	   1027  ! 	V02-040	JAK0069		J A KRYCKA	15-JAN-1982
    1	   1028  ! 		ADD SUPPORT AND NETFAIL ERROR CODES.
    1	   1029  ! 
    1	   1030  ! 	V02-039	JAK0068		J A KRYCKA	31-DEC-1981
    1	   1031  ! 		MODIFY TEXT FOR SUP, NET, BUG_DAP, AND ENV ERROR MESSAGES.
    1	   1032  ! 
    1	   1033  ! 	V02-038 LJA0001		LAURIE ANDERSON 20-DEC-1981
    1	   1034  ! 		MODIFIED SOME MESSAGES TO READ BETTER.
    1	   1035  ! 
    1	   1036  ! 	V02-037	JAK0063		J A KRYCKA	31-AUG-1981
    1	   1037  ! 		ADD CRE_STM SUCCESS CODE.
    1	   1038  ! 
    1	   1039  ! 	V02-036	KPL0004		PETER LIEBERWIRTH	13-JAN-1981
    1	   1040  ! 		ADD ENQ SEVERE ERROR MESSAGE, TO INDICATE $ENQ/$DEQ FAILURE.
    1	   1041  ! 		ALSO ADD SUCCESS CODES OK_RRL, AND OK_WAT.
    1	   1042  ! 
    1	   1043  ! 	V02-035	REFORMAT	J A KRYCKA	30-JUL-1980

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page   8
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1044  ! 
    1	   1045  ! --
    1	   1046 	PARAMETER RMS$_FACILITY = '00000001'X
    1	   1047 	PARAMETER RMS$V_STVSTATUS = '0000000E'X	 !  MOVE TO BIT 14 OF THE
    1	   1048  !  STATUS CODE IT INDICATES
    1	   1049  !  THAT STV CONTAINS A SECONDARY
    1	   1050  !  STATUS CODE.
    1	   1051 	PARAMETER RMS$_SUC = '00010001'X
    1	   1052 	PARAMETER RMS$_NORMAL = '00010001'X
    1	   1053  ! +
    1	   1054  ! 
    1	   1055  ! 	SUCCESS CODES
    1	   1056  ! 
    1	   1057  ! -
    1	   1058  !  BIT 16 = BIT 15 = 1
    1	   1059 	PARAMETER RMS$_STALL = '00018001'X
    1	   1060  !  (NOTE: USER NEVER RECEIVES THIS CODE)
    1	   1061 	PARAMETER RMS$_PENDING = '00018009'X
    1	   1062 	PARAMETER RMS$_OK_DUP = '00018011'X
    1	   1063 	PARAMETER RMS$_OK_IDX = '00018019'X
    1	   1064  !   (RECORD HAS BEEN INSERTED, BUT INDEX STRUCTURE IS NO LONGER
    1	   1065  !   OPTIMAL.)
    1	   1066 	PARAMETER RMS$_OK_RLK = '00018021'X
    1	   1067  !  (BECAUSE LOCKER SET RLK IN ROP FIELD WHEN RECORD WAS LOCKED.)
    1	   1068 	PARAMETER RMS$_OK_RRL = '00018029'X
    1	   1069  !  (BECAUSE READER SET RRL IN ROP FIELD WHEN ACCESSING RECORD.)
    1	   1070  !  (THIS CODE USED TO BE OK_RRV)
    1	   1071  ! OK_RRV	;MSG <record was inserted successfully in primary>
    1	   1072  !   (BUT IT MAY NOT BE ACCESSIBLE VIA ONE-OR-MORE SECONDARY KEYS,
    1	   1073  !   AND NOT BY RFA ADDRESSING. FILE RE-ORGANIZATION RECOMMENDED!)
    1	   1074 	PARAMETER RMS$_KFF = '00018031'X
    1	   1075 	PARAMETER RMS$_OK_ALK = '00018039'X
    1	   1076 	PARAMETER RMS$_OK_DEL = '00018041'X
    1	   1077 	PARAMETER RMS$_OK_RNF = '00018049'X
    1	   1078 	PARAMETER RMS$_OK_LIM = '00018051'X
    1	   1079 	PARAMETER RMS$_OK_NOP = '00018059'X
    1	   1080 	PARAMETER RMS$_OK_WAT = '00018061'X
    1	   1081  !  (BECAUSE WAT BIT IN ROP WAS SET AND RECORD WAS ALREADY
    1	   1082  !  LOCKED.)
    1	   1083 	PARAMETER RMS$_CRE_STM = '00018069'X
    1	   1084 	PARAMETER RMS$_OK_RULK = '00018071'X
    1	   1085 	PARAMETER RMS$_SYNCH = '00018079'X
    1	   1086 	PARAMETER RMS$_OK_ACT = '00018081'X
    1	   1087 	PARAMETER RMS$_OK_NOCURTID = '00018089'X
    1	   1088  ! +
    1	   1089  ! 
    1	   1090  ! 	SUCCESS CODES PASSED THRU FROM DRIVERS AND ACP -	BIT 15 = 0
    1	   1091  ! 
    1	   1092  ! -
    1	   1093 	PARAMETER RMS$_CONTROLC = '00010651'X	 !  TERMINAL I/O ABORTED DUE TO CTRL/C
    1	   1094 	PARAMETER RMS$_CONTROLO = '00010609'X
    1	   1095  !  TERMINAL I/O ABORTED DUE TO CTRL/O
    1	   1096 	PARAMETER RMS$_CONTROLY = '00010611'X
    1	   1097  !  TERMINAL I/O ABORTED DUE TO CTRL/Y
    1	   1098 	PARAMETER RMS$_CREATED = '00010619'X
    1	   1099  !  FILE WAS CREATED, NOT OPENED
    1	   1100 	PARAMETER RMS$_SUPERSEDE = '00010631'X

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page   9
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1101  !  CREATED FILE SUPERSEDED EXISTING VERSION
    1	   1102 	PARAMETER RMS$_OVRDSKQUOTA = '00010669'X
    1	   1103  !  DISK USAGE EXCEEDS DISK QUOTA
    1	   1104 	PARAMETER RMS$_FILEPURGED = '00010679'X
    1	   1105  !  CREATE FILE CAUSED OLDEST FILE
    1	   1106  !  VERSION TO BE PURGED
    1	   1107  ! +
    1	   1108  ! 
    1	   1109  ! 	WARNING CODES
    1	   1110  ! 
    1	   1111  ! -
    1	   1112  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1113 	PARAMETER RMS$_BOF = '00018198'X
    1	   1114 	PARAMETER RMS$_RNL = '000181A0'X
    1	   1115 	PARAMETER RMS$_RTB = '000181A8'X
    1	   1116 	PARAMETER RMS$_TMO = '000181B0'X
    1	   1117 	PARAMETER RMS$_TNS = '000181B8'X
    1	   1118 	PARAMETER RMS$_BES = '000181C0'X
    1	   1119 	PARAMETER RMS$_PES = '000181C8'X
    1	   1120  ! +
    1	   1121  ! 
    1	   1122  ! 	ERROR CODES - WITHOUT STV (THAT IS, STV MAY BE USED BUT NO ASSOCIATED
    1	   1123  ! 		      CONDITION CODE IS IN STV)
    1	   1124  ! 
    1	   1125  ! -
    1	   1126  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1127 	PARAMETER RMS$_ACT = '0001825A'X
    1	   1128 	PARAMETER RMS$_DEL = '00018262'X
    1	   1129 	PARAMETER RMS$_INCOMPSHR = '0001826A'X
    1	   1130 	PARAMETER RMS$_DNR = '00018272'X
    1	   1131 	PARAMETER RMS$_EOF = '0001827A'X
    1	   1132 	PARAMETER RMS$_FEX = '00018282'X
    1	   1133 	PARAMETER RMS$_FLK = '0001828A'X
    1	   1134 	PARAMETER RMS$_FNF = '00018292'X
    1	   1135 	PARAMETER RMS$_PRV = '0001829A'X
    1	   1136 	PARAMETER RMS$_REX = '000182A2'X
    1	   1137 	PARAMETER RMS$_RLK = '000182AA'X
    1	   1138 	PARAMETER RMS$_RNF = '000182B2'X
    1	   1139  !   (RECORD NEVER WAS IN FILE, OR HAS BEEN DELETED.)
    1	   1140 	PARAMETER RMS$_WLK = '000182BA'X
    1	   1141 	PARAMETER RMS$_EXP = '000182C2'X
    1	   1142 	PARAMETER RMS$_NMF = '000182CA'X
    1	   1143 	PARAMETER RMS$_SUP = '000182D2'X
    1	   1144  !  (NOTE THAT SUPPORT HAS REPLACED SUP EXCEPT WHEN RMS CANNOT
    1	   1145  !  MAP THE DAP STATUS CODE INTO A FAL STATUS CODE.)
    1	   1146  !  (NOTE ALSO THAT SUP SHOULD HAVE BEEN DEFINED AS A SEVERE
    1	   1147  !  ERROR CODE. HOWEVER, SUPPORT IS A SEVERE ERROR CODE.)
    1	   1148 	PARAMETER RMS$_RSA = '000182DA'X
    1	   1149 	PARAMETER RMS$_CRC = '000182E2'X
    1	   1150 	PARAMETER RMS$_WCC = '000182EA'X
    1	   1151 	PARAMETER RMS$_IDR = '000182F2'X
    1	   1152 	PARAMETER RMS$_LWC = '000182FA'X
    1	   1153 	PARAMETER RMS$_UNUSED1 = '00018302'X
    1	   1154 	PARAMETER RMS$_NOVALPRS = '0001830A'X
    1	   1155 	PARAMETER RMS$_KEY_MISMATCH = '00018312'X
    1	   1156 	PARAMETER RMS$_RUH = '0001831A'X
    1	   1157 	PARAMETER RMS$_JND = '00018322'X

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  10
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1158 	PARAMETER RMS$_BADPHASE = '0001832A'X
    1	   1159 	PARAMETER RMS$_TOWDR = '00018332'X
    1	   1160 	PARAMETER RMS$_NEXDR = '0001833A'X
    1	   1161 	PARAMETER RMS$_INVDRMSG = '00018342'X
    1	   1162 	PARAMETER RMS$_RU_ACTIVE = '0001834A'X
    1	   1163 	PARAMETER RMS$_UNKRUFAC = '00018352'X
    1	   1164 	PARAMETER RMS$_LIMBO = '0001835A'X
    1	   1165 	PARAMETER RMS$_IVATRACE = '00018362'X
    1	   1166 	PARAMETER RMS$_OPNOTSUP = '0001836A'X
    1	   1167 	PARAMETER RMS$_EXTNOTFOU = '00018372'X
    1	   1168 	PARAMETER RMS$_EXT_ERR = '0001837A'X
    1	   1169 	PARAMETER RMS$_SEMANTICS = '00018382'X
    1	   1170 	PARAMETER RMS$_LSCAN = '0001838A'X
    1	   1171 	PARAMETER RMS$_ROOTSRCH = '00018392'X
    1	   1172 	PARAMETER RMS$_IDXSEARCH = '0001839A'X
    1	   1173 	PARAMETER RMS$_NETBTS = '000183A2'X
    1	   1174  ! +
    1	   1175  ! 
    1	   1176  ! 	ERROR CODES - WITH STV ERROR CODE (THAT IS, STV CONTAINS AN ASSOCIATED CONDITION CODE)
    1	   1177  ! 
    1	   1178  ! -
    1	   1179  !  BIT 16 = BIT 15 = BIT 14 = 1
    1	   1180 	PARAMETER RMS$_ACC = '0001C002'X
    1	   1181 	PARAMETER RMS$_CRE = '0001C00A'X
    1	   1182 	PARAMETER RMS$_DAC = '0001C012'X
    1	   1183 	PARAMETER RMS$_ENT = '0001C01A'X
    1	   1184 	PARAMETER RMS$_EXT = '0001C022'X
    1	   1185 	PARAMETER RMS$_FND = '0001C02A'X
    1	   1186 	PARAMETER RMS$_MKD = '0001C032'X
    1	   1187 	PARAMETER RMS$_DPE = '0001C03A'X
    1	   1188 	PARAMETER RMS$_SPL = '0001C042'X
    1	   1189 	PARAMETER RMS$_DNF = '0001C04A'X
    1	   1190 	PARAMETER RMS$_RUF = '0001C052'X
    1	   1191 	PARAMETER RMS$_WRTJNL_AIJ = '0001C05A'X
    1	   1192 	PARAMETER RMS$_WRTJNL_BIJ = '0001C062'X
    1	   1193 	PARAMETER RMS$_WRTJNL_ATJ = '0001C06A'X
    1	   1194 	PARAMETER RMS$_WRTJNL_RUJ = '0001C072'X
    1	   1195 	PARAMETER RMS$_RRF = '0001C07A'X
    1	   1196 	PARAMETER RMS$_DDTM_ERR = '0001C082'X
    1	   1197  ! +
    1	   1198  ! 
    1	   1199  ! 	SEVERE ERROR CODES - WITHOUT STV (THAT IS, STV MAY BE USED BUT NO ASSOCIATED
    1	   1200  ! 			     CONDITION CODE IS IN STV)
    1	   1201  ! 
    1	   1202  ! -
    1	   1203  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1204 	PARAMETER RMS$_DTFCDDREC = '000183EC'X
    1	   1205 	PARAMETER RMS$_AID = '000183F4'X
    1	   1206 	PARAMETER RMS$_ALN = '000183FC'X
    1	   1207 	PARAMETER RMS$_ALQ = '00018404'X
    1	   1208 	PARAMETER RMS$_ANI = '0001840C'X
    1	   1209 	PARAMETER RMS$_AOP = '00018414'X
    1	   1210 	PARAMETER RMS$_BKS = '0001841C'X
    1	   1211 	PARAMETER RMS$_BKZ = '00018424'X
    1	   1212 	PARAMETER RMS$_BLN = '0001842C'X
    1	   1213 	PARAMETER RMS$_BUG = '00018434'X
    1	   1214 	PARAMETER RMS$_BUG_DDI = '0001843C'X

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  11
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1215 	PARAMETER RMS$_BUG_DAP = '00018444'X
    1	   1216 	PARAMETER RMS$_BUG_RU_ACTIVE = '0001844C'X
    1	   1217 	PARAMETER RMS$_BUG_RURECERR = '00018454'X
    1	   1218 	PARAMETER RMS$_BUG_FLUSH_JNL_FAILED = '0001845C'X
    1	   1219 	PARAMETER RMS$_BUG_RU_ABORT_FAIL = '00018464'X
    1	   1220 	PARAMETER RMS$_BUG_RU_COMMIT_FAIL = '0001846C'X
    1	   1221 	PARAMETER RMS$_BUG_XX6 = '00018474'X
    1	   1222 	PARAMETER RMS$_BUG_XX7 = '0001847C'X
    1	   1223 	PARAMETER RMS$_BUG_XX8 = '00018484'X
    1	   1224 	PARAMETER RMS$_BUSY = '0001848C'X
    1	   1225 	PARAMETER RMS$_CCR = '00018494'X
    1	   1226 	PARAMETER RMS$_CHG = '0001849C'X
    1	   1227 	PARAMETER RMS$_CHK = '000184A4'X
    1	   1228 	PARAMETER RMS$_COD = '000184AC'X
    1	   1229 	PARAMETER RMS$_CUR = '000184B4'X
    1	   1230 	PARAMETER RMS$_DAN = '000184BC'X
    1	   1231 	PARAMETER RMS$_DEV = '000184C4'X
    1	   1232 	PARAMETER RMS$_DIR = '000184CC'X
    1	   1233 	PARAMETER RMS$_DME = '000184D4'X
    1	   1234 	PARAMETER RMS$_DNA = '000184DC'X
    1	   1235 	PARAMETER RMS$_DTP = '000184E4'X
    1	   1236 	PARAMETER RMS$_DUP = '000184EC'X
    1	   1237 	PARAMETER RMS$_DVI = '000184F4'X
    1	   1238 	PARAMETER RMS$_ESA = '000184FC'X
    1	   1239 	PARAMETER RMS$_ESS = '00018504'X
    1	   1240 	PARAMETER RMS$_FAB = '0001850C'X
    1	   1241 	PARAMETER RMS$_FAC = '00018514'X
    1	   1242 	PARAMETER RMS$_FLG = '0001851C'X
    1	   1243 	PARAMETER RMS$_FNA = '00018524'X
    1	   1244 	PARAMETER RMS$_FNM = '0001852C'X
    1	   1245 	PARAMETER RMS$_FSZ = '00018534'X
    1	   1246 	PARAMETER RMS$_FOP = '0001853C'X
    1	   1247 	PARAMETER RMS$_FUL = '00018544'X
    1	   1248 	PARAMETER RMS$_IAL = '0001854C'X
    1	   1249 	PARAMETER RMS$_IAN = '00018554'X
    1	   1250 	PARAMETER RMS$_IDX = '0001855C'X
    1	   1251 	PARAMETER RMS$_IFI = '00018564'X
    1	   1252 	PARAMETER RMS$_IMX = '0001856C'X
    1	   1253 	PARAMETER RMS$_IOP = '00018574'X
    1	   1254 	PARAMETER RMS$_IRC = '0001857C'X
    1	   1255 	PARAMETER RMS$_ISI = '00018584'X
    1	   1256 	PARAMETER RMS$_KBF = '0001858C'X
    1	   1257 	PARAMETER RMS$_KEY = '00018594'X
    1	   1258 	PARAMETER RMS$_KRF = '0001859C'X
    1	   1259 	PARAMETER RMS$_KSZ = '000185A4'X
    1	   1260 	PARAMETER RMS$_LAN = '000185AC'X
    1	   1261 	PARAMETER RMS$_RUNDOWN = '000185B4'X
    1	   1262 	PARAMETER RMS$_LNE = '000185BC'X
    1	   1263 	PARAMETER RMS$_DTFCVT = '000185C4'X
    1	   1264 	PARAMETER RMS$_MRN = '000185CC'X
    1	   1265 	PARAMETER RMS$_MRS = '000185D4'X
    1	   1266 	PARAMETER RMS$_NAM = '000185DC'X
    1	   1267 	PARAMETER RMS$_NEF = '000185E4'X
    1	   1268 	PARAMETER RMS$_DTFQUASYN = '000185EC'X
    1	   1269 	PARAMETER RMS$_NOD = '000185F4'X
    1	   1270 	PARAMETER RMS$_NPK = '000185FC'X
    1	   1271 	PARAMETER RMS$_ORD = '00018604'X	 ! ! NOT USED AS OF V4

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  12
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1272 	PARAMETER RMS$_ORG = '0001860C'X
    1	   1273 	PARAMETER RMS$_PBF = '00018614'X
    1	   1274 	PARAMETER RMS$_PLG = '0001861C'X
    1	   1275 	PARAMETER RMS$_POS = '00018624'X
    1	   1276 	PARAMETER RMS$_DTFQUAVAL = '0001862C'X
    1	   1277 	PARAMETER RMS$_QUO = '00018634'X
    1	   1278 	PARAMETER RMS$_RAB = '0001863C'X
    1	   1279 	PARAMETER RMS$_RAC = '00018644'X
    1	   1280 	PARAMETER RMS$_RAT = '0001864C'X
    1	   1281 	PARAMETER RMS$_RBF = '00018654'X
    1	   1282 	PARAMETER RMS$_RFA = '0001865C'X
    1	   1283 	PARAMETER RMS$_RFM = '00018664'X
    1	   1284 	PARAMETER RMS$_RHB = '0001866C'X
    1	   1285 	PARAMETER RMS$_RLF = '00018674'X
    1	   1286 	PARAMETER RMS$_ROP = '0001867C'X
    1	   1287 	PARAMETER RMS$_RRV = '00018684'X
    1	   1288 	PARAMETER RMS$_RVU = '0001868C'X
    1	   1289 	PARAMETER RMS$_RSS = '00018694'X
    1	   1290 	PARAMETER RMS$_RST = '0001869C'X
    1	   1291 	PARAMETER RMS$_RSZ = '000186A4'X
    1	   1292 	PARAMETER RMS$_SEQ = '000186AC'X
    1	   1293 	PARAMETER RMS$_SHR = '000186B4'X
    1	   1294 	PARAMETER RMS$_SIZ = '000186BC'X
    1	   1295 	PARAMETER RMS$_SQO = '000186C4'X
    1	   1296 	PARAMETER RMS$_DTFSESEST = '000186CC'X
    1	   1297 	PARAMETER RMS$_SYN = '000186D4'X
    1	   1298 	PARAMETER RMS$_TRE = '000186DC'X
    1	   1299 	PARAMETER RMS$_TYP = '000186E4'X
    1	   1300 	PARAMETER RMS$_UBF = '000186EC'X
    1	   1301 	PARAMETER RMS$_USZ = '000186F4'X
    1	   1302 	PARAMETER RMS$_VER = '000186FC'X
    1	   1303 	PARAMETER RMS$_XNF = '00018704'X
    1	   1304 	PARAMETER RMS$_XAB = '0001870C'X
    1	   1305 	PARAMETER RMS$_ESL = '00018714'X
    1	   1306 	PARAMETER RMS$_DTFSESTER = '0001871C'X
    1	   1307 	PARAMETER RMS$_ENV = '00018724'X
    1	   1308 	PARAMETER RMS$_PLV = '0001872C'X
    1	   1309 	PARAMETER RMS$_MBC = '00018734'X
    1	   1310 	PARAMETER RMS$_RSL = '0001873C'X
    1	   1311 	PARAMETER RMS$_WLD = '00018744'X
    1	   1312 	PARAMETER RMS$_NET = '0001874C'X	 !  (NOTE THAT NETFAIL HAS REPLACED NET EXCEPT WHEN RMS CANNOT
    1	   1313  !  MAP THE DAP STATUS CODE INTO A FAL STATUS CODE.)
    1	   1314 	PARAMETER RMS$_IBF = '00018754'X
    1	   1315 	PARAMETER RMS$_REF = '0001875C'X
    1	   1316 	PARAMETER RMS$_IFL = '00018764'X
    1	   1317 	PARAMETER RMS$_DFL = '0001876C'X
    1	   1318 	PARAMETER RMS$_KNM = '00018774'X
    1	   1319 	PARAMETER RMS$_IBK = '0001877C'X
    1	   1320 	PARAMETER RMS$_KSI = '00018784'X
    1	   1321 	PARAMETER RMS$_LEX = '0001878C'X
    1	   1322 	PARAMETER RMS$_SEG = '00018794'X
    1	   1323 	PARAMETER RMS$_SNE = '0001879C'X	 ! ! NOT USED AS OF V4
    1	   1324 	PARAMETER RMS$_SPE = '000187A4'X	 ! ! NOT USED AS OF V4
    1	   1325 	PARAMETER RMS$_UPI = '000187AC'X
    1	   1326 	PARAMETER RMS$_ACS = '000187B4'X
    1	   1327 	PARAMETER RMS$_STR = '000187BC'X
    1	   1328 	PARAMETER RMS$_FTM = '000187C4'X

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  13
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1329 	PARAMETER RMS$_GBC = '000187CC'X
    1	   1330 	PARAMETER RMS$_DEADLOCK = '000187D4'X
    1	   1331 	PARAMETER RMS$_EXENQLM = '000187DC'X
    1	   1332 	PARAMETER RMS$_JOP = '000187E4'X
    1	   1333 	PARAMETER RMS$_RUM = '000187EC'X
    1	   1334 	PARAMETER RMS$_JNS = '000187F4'X
    1	   1335 	PARAMETER RMS$_NRU = '000187FC'X
    1	   1336 	PARAMETER RMS$_IFF = '00018804'X
    1	   1337 	PARAMETER RMS$_DTFTRATBL = '0001880C'X
    1	   1338 	PARAMETER RMS$_DTFUNSTYP = '00018814'X
    1	   1339 	PARAMETER RMS$_DTFVERMIS = '0001881C'X
    1	   1340  ! +
    1	   1341  ! 
    1	   1342  ! 	ERROR CODES - WITHOUT STV
    1	   1343  ! 
    1	   1344  ! 	  DTFACC AND DTFCRE WERE ORIGINALLY INCLUDED IN THIS FATAL SEVERITY 
    1	   1345  ! 	  (NO STV) GROUPING.  IN ORDER TO CHANGE THEIR SEVERITY TO ERROR 
    1	   1346  ! 	  (NO STV) AND RETAIN THE SAME MESSAGE CODE VALUE, THE FOLLOWING 
    1	   1347  ! 	  SHIFTS IN SEVERITY FROM FATAL TO ERROR AND THEN BACK AGAIN ARE
    1	   1348  ! 	  DONE, WHILE RETAINING THE SAME ORIGINAL BASE ASSOCIATED WITH EACH.
    1	   1349  ! 
    1	   1350  ! -
    1	   1351  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1352 	PARAMETER RMS$_DTFACC = '00018822'X
    1	   1353  ! +
    1	   1354  ! 
    1	   1355  ! 	SEVERE ERROR CODES - WITHOUT STV
    1	   1356  ! 
    1	   1357  ! -
    1	   1358  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1359 	PARAMETER RMS$_BOGUSCOL = '0001882C'X
    1	   1360 	PARAMETER RMS$_ERRREADCOL = '00018834'X
    1	   1361 	PARAMETER RMS$_ERRWRITECOL = '0001883C'X
    1	   1362 	PARAMETER RMS$_SNS = '00018844'X
    1	   1363 	PARAMETER RMS$_NOEXTEND = '0001884C'X	 ! +
    1	   1364  ! 
    1	   1365  ! 	ERROR CODES - WITHOUT STV
    1	   1366  ! 
    1	   1367  ! -
    1	   1368  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1369 	PARAMETER RMS$_DTFCRE = '00018852'X
    1	   1370  ! +
    1	   1371  ! 
    1	   1372  ! 	SEVERE ERROR CODES - WITHOUT STV
    1	   1373  ! 
    1	   1374  ! -
    1	   1375  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1376 	PARAMETER RMS$_DELJNS = '0001885C'X
    1	   1377 	PARAMETER RMS$_NOTSAMEJNL = '00018864'X
    1	   1378 	PARAMETER RMS$_SNPPF = '0001886C'X
    1	   1379  ! +
    1	   1380  ! 
    1	   1381  ! 	SEVERE ERRORS - WITH STV ERROR CODE (THAT IS, STV CONTAINS AN ASSOCIATED CONDITION CODE)
    1	   1382  ! 
    1	   1383  ! -
    1	   1384  !  BIT 16 = BIT 15 = BIT 14 = 1
    1	   1385 	PARAMETER RMS$_ATR = '0001C0CC'X

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  14
1.5                                                              4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1386 	PARAMETER RMS$_ATW = '0001C0D4'X
    1	   1387 	PARAMETER RMS$_CCF = '0001C0DC'X
    1	   1388 	PARAMETER RMS$_CDA = '0001C0E4'X
    1	   1389 	PARAMETER RMS$_CHN = '0001C0EC'X
    1	   1390 	PARAMETER RMS$_RER = '0001C0F4'X
    1	   1391 	PARAMETER RMS$_RMV = '0001C0FC'X
    1	   1392 	PARAMETER RMS$_RPL = '0001C104'X
    1	   1393 	PARAMETER RMS$_SYS = '0001C10C'X
    1	   1394 	PARAMETER RMS$_WER = '0001C114'X
    1	   1395 	PARAMETER RMS$_WPL = '0001C11C'X
    1	   1396 	PARAMETER RMS$_IFA = '0001C124'X
    1	   1397 	PARAMETER RMS$_WBE = '0001C12C'X
    1	   1398 	PARAMETER RMS$_ENQ = '0001C134'X
    1	   1399 	PARAMETER RMS$_NETFAIL = '0001C13C'X
    1	   1400 	PARAMETER RMS$_SUPPORT = '0001C144'X
    1	   1401 	PARAMETER RMS$_CRMP = '0001C14C'X
    1	   1402 	PARAMETER RMS$_DTFCFGFIL = '0001C154'X
    1	   1403 	PARAMETER RMS$_REENT = '0001C15C'X
    1	   1404 	PARAMETER RMS$_ACC_RUJ = '0001C164'X
    1	   1405 	PARAMETER RMS$_TMR = '0001C16C'X
    1	   1406 	PARAMETER RMS$_ACC_AIJ = '0001C174'X
    1	   1407 	PARAMETER RMS$_ACC_BIJ = '0001C17C'X
    1	   1408 	PARAMETER RMS$_ACC_ATJ = '0001C184'X
    1	   1409 	PARAMETER RMS$_DTFDEFFIL = '0001C18C'X
    1	   1410 	PARAMETER RMS$_DTFREGFIL = '0001C194'X
    1	   1411 	PARAMETER RMS$_JNLNOTAUTH = '0001C19C'X
    1	   1412 CDEC$ END OPTIONS
    1	   1413 
	   1414       INTEGER*4 STATUS
	   1415       INTEGER*4 L1_LUN/19/, OPENMODE
	   1416       INTEGER*4 ST_MONTH,ST_DAYOFMONTH, END_MONTH, END_DAYOFMONTH
	   1417       CHARACTER L1FILENAME*80
	   1418       CHARACTER FULL_L1_NAME*80
	   1419       CHARACTER FIFO*3, TGS*3, RATEFLAG*1
	   1420       CHARACTER*17 MODE(10) /'Science mode     ','Engineering mode ',
	   1421      &                       'Maneuver mode    ','Contingency mode ',
	   1422      &                       'Science mode     ','Engineering mode ',
	   1423      &                       'Maneuver mode    ','Contingency mode ',
	   1424      &                       'Transitional mode','Unknown mode     '/,
	   1425      &             MODE_AT_START
	   1426 
	   1427       INTEGER*4 TRIGGER_MODE_CODE		!ADC trigger logic
	   1428       CHARACTER*20 TRIGGER_MODE(0:7) /'E                    ','Tn                  ',
	   1429      &                                '(Tn.E)+(Tn.En)       ','Tn.En               ',
	   1430      &                                'E+T                  ','(E.T)+(Tn.E)+(Tn.En)',
	   1431      &                                'C.(E+T)              ','(E.!T)+(Tn.En)      '/
	   1432       LOGICAL CODE_C,CODE_C2,STARTFOUND,ENDFOUND,USE_SC_CLOCK,
	   1433      .        COMPARE_TIME_GE,GOODSPIN
	   1434       INTEGER I,J,K,L,N,NN,CNTR,ITEMP,NAMELEN
	   1435       LOGICAL*1 BITRATE
	   1436       INTEGER*4 INCREMENT
	   1437 
	   1438 C    pha word - dissected:
	   1439       INTEGER*4 START_ID_RANGE,
	   1440      .          STOP_ID,
	   1441      .          DVS_COUNTS(0:31),
	   1442      .          ENERGY,

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  15
1.5                                                             12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   1443      .          SECTOR,
	   1444      .          SSD_ID,
	   1445      .          TIME_OF_FLIGHT,
	   1446      .          PSTART,
	   1447      .          RANGE
	   1448 
	   1449 C    choose data filtering options
	   1450       INTEGER*4  DATA_FILTER,		!data filter options 
	   1451      .           DATA_FILTER_COINC,	!data filtering by coincidence 
	   1452 C					 conditions
	   1453      .           DATA_FILTER_DVSTEP,	!data filter by voltage step
	   1454      .           DATA_DVSTEP_MIN,	!dv step min-max values for data filter
	   1455      .           DATA_DVSTEP_MAX,
	   1456      .           DATA_FILTER_RANGE,      !range selection
	   1457      .           DATA_FILTER_RANGECHECK, !check calculated vs. dpu range
	   1458      .           DIRECTION_FILTER,        !select data by telescope info
	   1459      .           DIRECTION_FILTER_START,  ! start anode id
	   1460      .           DIRECTION_FILTER_STOP,   ! stop mcp id
	   1461      .		 DIRECTION_FILTER_SSD,     ! solid state detector id
	   1462      .		 DIRECTION_SECTOR_MIN,	  !sector filter: sum sectors .ge. min and .le. max
	   1463      .		 DIRECTION_SECTOR_MAX,
	   1464      .           DIRECTION_CHECK,   !telescope check
	   1465      .           TELE_FLAG,
	   1466      .           DATA_FILTER_MSPEED,      !speed filter
	   1467      .           DATA_MSPEED_MIN,         !	select data only if MASS solar
	   1468      .           DATA_MSPEED_MAX          !	speed is .GE. MIN and .LE. MAX
	   1469 
	   1470       CHARACTER*3 RONOFF, TONOFF            !ON, OFF status
	   1471       CHARACTER*10 COINC(0:2) / '       ALL',
	   1472      .                          '  M/Q-only',
	   1473      .                          '   M/Q & M'/
	   1474       CHARACTER*5 RANGESEL(0:6) /
	   1475      .                           '2 1 0' ,
	   1476      .                           '    0' ,
	   1477      .                           '  1  ' ,
	   1478      .                           '2    ' ,
	   1479      .                           '2   0' ,
	   1480      .                           '2 1  ' ,
	   1481      .                           '  1 0' /
	   1482       LOGICAL SEL_RANGE(0:2)
	   1483       CHARACTER*1 YORN			!yes or no answer
	   1484 
	   1485 C    DPPS information
	   1486       INTEGER*4 DPPSPLUS,		!STICS +DPPS on=1, off=0
	   1487      .          DPPSMINUS,		!STICS -DPPS on=1, off=0
	   1488      .		DVSTEP			!DPPS voltage step number (0-31)
	   1489 
	   1490 C    dpu algorithm values for e/q, mass and m/q:
	   1491       REAL*4 DPU_E_OVER_Q,
	   1492      .       DPU_MASS,
	   1493      .       DPU_MASS_OVER_Q
	   1494       INTEGER*4 DPU_NM,DPU_NQ,		!dpu calculations for m, m/q bins
	   1495      .          DPU_RANGE		!dpu calculations for range
	   1496 C    choose output format for table
	   1497       INTEGER*4  TABLE_FORMAT,		!option = 1 for normal sms format
	   1498      . 					!option = 2 for geotail/stics format
	   1499      .           TBL_SEC,TBL_YEAR	!sec and year for geotail format

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  16
1.5                                                             12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   1500 
	   1501       REAL*4   AVE_SPEED,		!Average solar wind speed
	   1502      .         BULK_SPEED,		!Solar wind speed
	   1503      .         BULK_UNCER,		!Uncertainty in solar wind speed from width
	   1504      .	       HIGH_SPEED,		!Highest valid speed encountered
	   1505      .	       LOW_SPEED,		!Lowest valid speed encountered
	   1506      .         SPEED_MEAN,		!Average speed over interval
	   1507      .         SPEED_HITS,		!Number of valid speed values in interval
	   1508      .	       SPEED_SIGMA,		!Standard deviation of speed
	   1509      .	       SUM_SW_SPEED,
	   1510      .	       SUM_SQ_SPEED,		!Sum of speed squared
	   1511      .         SW_SPEED                 !chosen solar wind speed to check against                      
	   1512 
	   1513       INTEGER*4 BAD_SPEED/0/,		!Number of invalid speed values
	   1514      .		ERR_SPD_FLAG,		!Error speed flag
	   1515      .		FIRSTSPEED/0/		!Used to get speed at start time
	   1516       CHARACTER*80 ERR_MESSAGE		!Message for invalid speed
	   1517 
	   1518 C     naming the output file
	   1519       LOGICAL BRACK   			!A variable which is .TRUE. if there is 
	   1520 C                     			a set of square brackets in the input file name.
	   1521 C                     			If there is, they, and everything between them,  
	   1522 C                     			will be stripped out so that the output file is  
	   1523 C                     			created in the user's account and not on the     
	   1524 C                     			account from which we read the data.             
	   1525       INTEGER*4 NINDEX, 		!used in rearranging the input file name to     
	   1526 C                      			create the output file name.                    
	   1527      .          JSAVE   		!used in rearranging the input file name to 
	   1528 C                        		create the output file name.
	   1529       CHARACTER*90 LISFIL  		!holds the name of the input file           
	   1530       CHARACTER OUTFILENAME*90,AUXFILENAME*90
	   1531       CHARACTER*40 USERNAME		!user defined output filename
	   1532       INTEGER*4 IFILE		        !number of L1 files used (use with INPUTFILES)
	   1533       CHARACTER RUN_TIME*8, RUN_DATE*9		!run time and date
	   1534 C S/C position
	   1535       REAL*4 X1_GSE,Y1_GSE,Z1_GSE,     	!Start position
	   1536      .       X2_GSE,Y2_GSE,Z2_GSE	!Stop position
	   1537 
	   1538 
	   1539       RECORD /CORE/ SCI
	   1540       RECORD /HDBstr/ HDB
	   1541       RECORD /ST_RATE/ STICS_RATE
	   1542       RECORD /ST_PHA/ STICS_PHA
	   1543       RECORD /T/ START, END, TIME_TO_USE
	   1544 
	   1545       RECORD /MA_RATE/ MASS_RATE   ! receives data on rates from MASS sensor
	   1546       RECORD /MA_PHA/ MASS_PHA     ! receives data on tof's from the mass sensor
	   1547 
	   1548 
	   1549 C   **********************************************************
	   1550 C   *							     *
	   1551 C   *		USER PROMPTS	: input file		     *
	   1552 C   *				  table format		     *
	   1553 C   *				  data filtering	     *
	   1554 C   *				  times			     *
	   1555 C   *							     *
	   1556 C   **********************************************************

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  17
1.5                                                             12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   1557 
	   1558 C
	   1559 C Get input L1 filename
	   1560 C
	   1561       L1FILENAME = 'DATA_DIR:WI*L1*.DAT'
	   1562       CALL WIND_GET_FILENAME(L1FILENAME, STATUS)
	   1563       IF(STATUS.NE.1) THEN
	   1564 	WRITE (*,2) STATUS
	   1565     2   FORMAT(' FILE STATUS = ',I3)
	   1566         STOP
	   1567       ENDIF
	   1568 
	   1569 C
	   1570 C Set time format to "wall" time (=0)
	   1571 C
	   1572       USE_SC_CLOCK = 0
	   1573 
	   1574       FIRSTFILE = .TRUE.
	   1575       CALL TIME(RUN_TIME)			!Get run time
	   1576       CALL DATE(RUN_DATE)			!Get run date
	   1577       
	   1578       LOW_SPEED = 1000.0
	   1579       HIGH_SPEED = 200.0
	   1580 
	   1581 C
	   1582 C Prompt user for table format
	   1583 C 
	   1584       TABLE_FORMAT = 1
	   1585       TYPE 5
	   1586     5 FORMAT(' Enter desired table format: ',/,
	   1587      .    ' (1 = standard sms format, ',/,
	   1588      .    '  2 = standard geotail format)',/
	   1589      .    '      ',$)
	   1590       ACCEPT *, TABLE_FORMAT
	   1591 
	   1592 C
	   1593 C Prompt user for filtering
	   1594 C 
	   1595 C     Initialize default conditions
	   1596       DATA_FILTER = 0		!no data filtering
	   1597       DATA_FILTER_COINC = 0	!no filtering by m or m/q conditions
	   1598       DATA_FILTER_DVSTEP  = -1	!no filtering by e/q
	   1599       DATA_DVSTEP_MIN = 0	!min dv step = 0
	   1600       DATA_DVSTEP_MAX = 31	!max dv step = 31
	   1601       DATA_FILTER_RANGE = 0	!no filtering by range
	   1602       DATA_FILTER_RANGECHECK = 0 !no filtering by range check
	   1603       SEL_RANGE(0) = .TRUE.	!accept range 0 events
	   1604       SEL_RANGE(1) = .TRUE.	!accept range 1 events
	   1605       SEL_RANGE(2) = .TRUE.	!accept range 2 events
	   1606       DATA_FILTER_MSPEED = -1        	!no check on MASS solar wind speed
	   1607       DATA_MSPEED_MAX    = 1000     		!max sw speed selection is 1000 km/sec
	   1608       DATA_MSPEED_MIN    = 260      		!min sw speed selection is 315 km/sec
	   1609 
	   1610       DIRECTION_FILTER = 0         !no filtering by telescope info
	   1611       DIRECTION_FILTER_START = -1  !no selection by start id
	   1612       DIRECTION_FILTER_STOP  = -1  !no selection by stop id
	   1613       DIRECTION_FILTER_SSD   = -1  !no selection by ssd

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  18
1.5                                                             12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   1614       DIRECTION_SECTOR_MIN   =  0  !Sector range to sum over
	   1615       DIRECTION_SECTOR_MAX   = 15
	   1616       DIRECTION_CHECK =  0         !no check on telescope id
	   1617 
	   1618       TYPE 6
	   1619     6 FORMAT(' Is data filtering by DATA TYPE desired? '
	   1620      .      /' (i.e.:  M,M/Q conditions,  E/Q,  PHA Range, SW Speed,) '
	   1621      .      /' [Y/N] '$)
	   1622       ACCEPT 7, YORN
	   1623     7 FORMAT (A)
	   1624       IF (YORN.EQ.'Y' .OR. YORN.EQ.'y') THEN
	   1625         DATA_FILTER = 1
	   1626 	CALL USER_REQUESTS_DATA_TYPE(
	   1627      .           DATA_FILTER_COINC,
	   1628      .           DATA_FILTER_DVSTEP,
	   1629      .		 DATA_DVSTEP_MIN,
	   1630      .		 DATA_DVSTEP_MAX,
	   1631      .           DATA_FILTER_RANGE,
	   1632      .           SEL_RANGE, 
	   1633      .           DATA_FILTER_RANGECHECK,
	   1634      .           DATA_FILTER_MSPEED,
	   1635      .           DATA_MSPEED_MIN,
	   1636      .           DATA_MSPEED_MAX)
	   1637 
	   1638       ENDIF
	   1639 
	   1640 
	   1641       TYPE 8
	   1642     8 FORMAT(/,' Is data filtering by DIRECTION desired? '
	   1643      .      /' (i.e.:  Start anode, Stop MCP, SSD) '
	   1644      .      /' [Y/N] '$)
	   1645       ACCEPT 7, YORN
	   1646       IF (YORN.EQ.'Y' .OR. YORN.EQ.'y') THEN
	   1647         DIRECTION_FILTER = 1
	   1648 	CALL USER_REQUESTS_DIRECTION (
	   1649      .           DIRECTION_FILTER_START,
	   1650      .           DIRECTION_FILTER_STOP,
	   1651      .		 DIRECTION_FILTER_SSD,
	   1652      .		 DIRECTION_SECTOR_MIN,
	   1653      .		 DIRECTION_SECTOR_MAX,
	   1654      .           DIRECTION_CHECK)
	   1655       ENDIF
	   1656 
	   1657 C
	   1658 C Prompt user for output filename
	   1659 C
	   1660       WRITE(6,*)'Enter name for output file or <RETURN> for default name'
	   1661       READ(5,'(A)') USERNAME
	   1662 C
	   1663 C Prompt user for start and stop times
	   1664 C
	   1665       TYPE 10
	   1666   10  FORMAT(/' Enter Start time( -1/ = whole file) - ',/,
	   1667      .       ' Year,Month,Day,Hour,Min,Sec: '$) 
	   1668       ACCEPT*, START.YEAR,ST_MONTH,ST_DAYOFMONTH,START.HR,START.MIN,START.SEC
	   1669       IF(START.YEAR.GE.0)THEN
	   1670 C

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  19
1.5                                                             12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   1671 C Convert month and day to day of year.
	   1672 C
	   1673         CALL CNVRT_T_YRMONDAY_TO_YEARDAY( START, ST_MONTH, ST_DAYOFMONTH)
	   1674         IF(START.YEAR.LT.100)START.YEAR=START.YEAR+1900        ! Allow for 2-digit years
	   1675         IF(START.YEAR.LT.1980)START.YEAR=START.YEAR+100        ! Allow for years beyond 1999
	   1676         TYPE 12
	   1677   12    FORMAT(' Enter End time - ',/,
	   1678      .         ' Year,Month,Day,Hour,Min,Sec: '$) 
	   1679         ACCEPT*, END.YEAR,END_MONTH,END_DAYOFMONTH,END.HR,END.MIN,END.SEC
	   1680 C
	   1681 C Convert month and day to day of year.
	   1682 C
	   1683         CALL CNVRT_T_YRMONDAY_TO_YEARDAY( END, END_MONTH, END_DAYOFMONTH)
	   1684         IF(END.YEAR.LT.100)END.YEAR=END.YEAR+1900        ! Allow for 2-digit years
	   1685         IF(END.YEAR.LT.1980)END.YEAR=END.YEAR+100        ! Allow for years beyond 1999
	   1686       ELSE
	   1687         END.YEAR=3000
	   1688       ENDIF
	   1689 
	   1690 C   **********************************************************
	   1691 C   *							     *
	   1692 C   *			CREATE OUTPUT FILE NAME		     *
	   1693 C   *							     *
	   1694 C   **********************************************************
	   1695 C
	   1696 C   Strip the extension off of the input file name so
	   1697 C   that we can give a new extension to the output file
	   1698 C
	   1699       NINDEX  = 80
	   1700       DO WHILE (L1FILENAME(NINDEX:NINDEX) .NE. '_')
	   1701          NINDEX = NINDEX - 1
	   1702       END DO
	   1703 C
	   1704 C   Find out if the input file name contains some directory
	   1705 C   designation.  This, if it exists, it will also be stripped off.
	   1706 C
	   1707       I = 1
	   1708       DO WHILE (.NOT. BRACK .AND. I .LT. NINDEX)
	   1709          IF (L1FILENAME(I:I) .EQ. '[') BRACK = .TRUE.
	   1710          I = I + 1
	   1711       END DO
	   1712 C
	   1713 C   Now, finally, load the input file name into the output
	   1714 C   file name and add proper extension.
	   1715 C
	   1716       JSAVE = 1
	   1717       DO 3 I = 1, NINDEX
	   1718          IF (BRACK) THEN
	   1719             IF (L1FILENAME(I:I) .EQ. ']') BRACK = .FALSE.
	   1720          ELSE
	   1721             LISFIL(JSAVE:JSAVE) = L1FILENAME(I:I)
	   1722             JSAVE = JSAVE + 1
	   1723          ENDIF
	   1724    3  CONTINUE
	   1725       LISFIL(1:9) = 'STICS_PHA'
	   1726       AUXFILENAME = LISFIL
	   1727       AUXFILENAME(JSAVE+1:JSAVE+11) = 'SECDVS.DAT'

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  20
1.5                                                             12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   1728       IF (  (START.YEAR  .EQ. -1)   .AND.		!no time filter
	   1729      .      (DATA_FILTER .EQ. 0)   .AND.
	   1730      .      (DIRECTION_FILTER .EQ. 0) ) THEN		!no data type filter
	   1731 
	   1732 	      LISFIL(JSAVE+1:JSAVE+5) = 'A.TBL'        ! ALL DATA
	   1733       ELSE
	   1734 	      LISFIL(JSAVE+1:JSAVE+5) = 'S.TBL'        ! SELECTED DATA
	   1735       ENDIF
	   1736 
	   1737       IF(USERNAME(1:12) .NE. '            ')THEN
	   1738         OUTFILENAME = USERNAME
	   1739       ELSE
	   1740         OUTFILENAME = LISFIL				! default name
	   1741       ENDIF
	   1742 
	   1743 C   **********************************************************
	   1744 C   *							     *
	   1745 C   *			OPEN L1 INPUT FILE 		     *
	   1746 C   *			READ DATA			     *
	   1747 C   *							     *
	   1748 C   **********************************************************
	   1749 
	   1750 C
	   1751 C Open L1 file for input, and read first SR, Core, HDB, and STICS_RATES
	   1752 C
	   1753  1000 CONTINUE
	   1754       IF (FIRSTFILE .EQ. .FALSE.) THEN
	   1755         IFILE = IFILE + 1
	   1756 	OPENMODE = 1
	   1757 	CALL WIND_L1_OPEN_NEXT(L1_LUN,OPENMODE,L1FILENAME,L1_FILE_HEADER,STATUS)
	   1758       ELSE
	   1759         IFILE = 1
	   1760         FIRSTFILE = .FALSE.
	   1761         CALL WIND_L1_OPEN( L1_LUN, L1FILENAME, L1_FILE_HEADER, STATUS)
	   1762       ENDIF
	   1763       IF (STATUS .NE. 1) GOTO 9010
	   1764 
	   1765       INQUIRE(FILE=L1FILENAME,NAME=FULL_L1_NAME)
	   1766       WRITE(6,1001) FULL_L1_NAME
	   1767  1001 FORMAT(' OPEN FILE ',A)
	   1768 
	   1769       NAMELEN = INDEX(FULL_L1_NAME,' ') - 1
	   1770       IF (NAMELEN .LT. 1) NAMELEN=LEN(FULL_L1_NAME)
	   1771 
	   1772   13  CALL WIND_L1_READ_SR( L1_LUN, CNTR, L1_SR_HEADER, STATUS )
	   1773       IF(STATUS.EQ.RMS$_EOF)GO TO 900
	   1774       IF (STATUS .NE. 1) GOTO 9020
	   1775       CALL WIND_L1_GET_BASIC( L1_LUN, SCI, STATUS)
	   1776       IF (STATUS .NE. 1) GOTO 9030
	   1777       CALL WIND_L1_GET_HDB( L1_LUN, HDB, STATUS)
	   1778       IF (STATUS .NE. 1) GOTO 9050
	   1779       CALL WIND_L1_GET_STICS( L1_LUN, STICS_RATE, STICS_PHA, STATUS )
	   1780       IF (STATUS .NE. 1) GOTO 9080
	   1781 C
	   1782 C Find first good spin, get year and DOY from it.
	   1783 C
	   1784       N=0

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  21
1.5                                                             12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   1785       GOODSPIN=.FALSE.
	   1786       DO 14 WHILE(.NOT.GOODSPIN)
	   1787         K=N/32+1
	   1788         NN=MOD(N,32)
	   1789         GOODSPIN=BTEST(L1_SR_HEADER.PRESENT(K),NN)
	   1790         N=N+1
	   1791         IF(N.GT.59)GOTO 13 ! This SCI-REC all bad; get next
	   1792   14  CONTINUE
	   1793       IF(N.GT.59)GOTO 13
	   1794 C
	   1795 C If low bitrate, make sure that N points to an even spin (odd spins
	   1796 C have beencatenation).
	   1797 C If high bitrate, decrement because N was incremented after the 1st
	   1798 C good spin was found.
	   1799 C
	   1800       IF(.NOT.SCI.EDB(N).BITRATE)THEN
	   1801         N=N+MOD(N,2)
	   1802         IF(N.GE.60)GOTO 13
	   1803       ELSE
	   1804         N=N-1
	   1805       ENDIF
	   1806 C
	   1807 c Get S/C position at beginning of time period
	   1808 c
	   1809       X1_GSE = L1_SR_HEADER.GSE_POS.X/6380.0 
	   1810       Y1_GSE = L1_SR_HEADER.GSE_POS.Y/6380.0 
	   1811       Z1_GSE = L1_SR_HEADER.GSE_POS.Z/6380.0 
	   1812 
	   1813 C
	   1814 C
	   1815 C Check FIFO mode, telemetry mode, TGS mode, and trigger mode; place info in header.
	   1816 C
	   1817       ITEMP = HDB.BDH.DAT(221)
	   1818       IF(IBITS(ITEMP,7,1).EQ.1)THEN
	   1819         FIFO='ON '
	   1820       ELSE
	   1821         FIFO='OFF'
	   1822       ENDIF
	   1823 C  
	   1824       ITEMP = SCI.EDB(N).TLM_Mode
	   1825       IF(ITEMP.EQ.0)ITEMP=10
	   1826       IF(ITEMP.EQ.128)ITEMP=9
	   1827       IF(ITEMP.EQ.256)ITEMP=10
	   1828       MODE_AT_START = MODE(ITEMP)
	   1829 C
	   1830       ITEMP = STICS_RATE.EDB(N).RATE(179)
	   1831       IF(IBITS(ITEMP,7,1).EQ.1)THEN
	   1832         TGS='ON '
	   1833       ELSE
	   1834         TGS='OFF'
	   1835       ENDIF
	   1836 C
	   1837       ITEMP = HDB.BDH.DAT(25)
	   1838       TRIGGER_MODE_CODE = IBITS(ITEMP,1,3)
	   1839 
	   1840 C   **********************************************************
	   1841 C   *							     *

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  22
1.5                                                             12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   1842 C   *			OPEN OUTPUT FILE		     *
	   1843 C   *			WRITE HEADER			     *
	   1844 C   *							     *
	   1845 C   **********************************************************
	   1846 C
	   1847 C Open PHA file for output
	   1848 C
	   1849       IF(IFILE .EQ. 1) THEN
	   1850        IF (TABLE_FORMAT.EQ.1) THEN		!standard sms format:
	   1851 C						 use naming convention and
	   1852 C						 include a header
	   1853         OPEN(UNIT= 50, NAME= OUTFILENAME, FORM='FORMATTED', 
	   1854      &     TYPE='NEW', RECL=168)
	   1855         WRITE(50,15)
	   1856   15    FORMAT(' 1  STICS TIME, PHA and DPU M & M/Q TABLE LISTING')
	   1857 	WRITE(50,'(A)') ' 2  Run time  '//RUN_TIME//'   '//RUN_DATE
	   1858         WRITE(50,16) FULL_L1_NAME(1:NAMELEN)
	   1859   16    FORMAT(' 2',T10,'Input Level 1 Filename: ',A)
	   1860         WRITE(50,17) OUTFILENAME
	   1861   17    FORMAT(' 3',T10,'       Output Filename: ',A)
	   1862 
	   1863 
	   1864         WRITE(50,18) 'Wall',TRIGGER_MODE(TRIGGER_MODE_CODE),FIFO,TGS,MODE_AT_START 
	   1865   18    FORMAT(T3,'Clock selected: ',A,5X,'Trigger mode is ',A22,/,
	   1866      .         T3,'FIFO mode is ',A3,9X,'TGS  mode is ',A3,/,
	   1867      .         T3,'Telemetry mode is ',A17,/)
	   1868 
	   1869 	RONOFF = 'OFF'
	   1870         IF(DATA_FILTER_RANGECHECK.EQ.1) RONOFF = ' ON'
	   1871         TONOFF = 'OFF'
	   1872         IF(DIRECTION_CHECK.EQ.1) TONOFF = ' ON'
	   1873 
	   1874            WRITE(50,19)DATA_DVSTEP_MIN, DATA_DVSTEP_MAX,COINC(DATA_FILTER_COINC),
	   1875      .              RANGESEL(DATA_FILTER_RANGE),
	   1876      .              RONOFF,DATA_MSPEED_MIN,DATA_MSPEED_MAX,
	   1877      .		    DIRECTION_FILTER_START,DIRECTION_FILTER_STOP,DIRECTION_FILTER_SSD,
	   1878      .		    DIRECTION_SECTOR_MIN,DIRECTION_SECTOR_MAX,TONOFF,
	   1879      .              START.YEAR,ST_MONTH, ST_DAYOFMONTH,START.HR,START.MIN,START.SEC,
	   1880      .              END.YEAR,END_MONTH,END_DAYOFMONTH,END.HR,END.MIN,END.SEC
	   1881 
	   1882 
	   1883   19     FORMAT(T3,'FILTERING CHOICES:', /,
	   1884      .              T11,'Voltage step selection =  ', I2, ' to ' ,I2,/,
	   1885      .              T11,'Event type selection   =',A10,/,
	   1886      .              T11,'Range selection        =     ',A5,/,
	   1887      .              T11,'Range checking is ',A3,/,
	   1888      .		    T11,'Velocity range         = ',I4,' to ',I6,//,   
	   1889      .		    T11,'Start anode =  ',I2,/,
	   1890      .		    T11,'Stop MCP    =  ',I2,/,
	   1891      .              T11,'SSD ID      =  ',I2,/,
	   1892      .		    T11,'Sectors     =  ',I2,' to ',I2,/,
	   1893      .              T11,'Telescope checking is ',A3,//,
	   1894      .              T3,'Start Time:  ',I4,I2.2,I2.2,2X,I2.2,2(':',I2.2),5X,
	   1895      .              'End Time:  ',I4,I2.2,I2.2,2X,I2.2,2(':',I2.2),
	   1896      .              //,'       SR BR  Year  Day    Time    VS     E/Q',
	   1897      &              '    StopID   StartID/Range  Energy(Ed)  Sector  SSD-ID',
	   1898      &              '    ToF(Td)  START   RANGE      M/Q     MASS   NM   NQ  NRG',/)

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  23
1.5                                                             12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   1899 
	   1900  
	   1901        ELSE
	   1902 
	   1903         OPEN(UNIT= 50, NAME='GMQET_FORMAT.WSTICS', 
	   1904      &     DEFAULTFILE='TABLE_DIR:', FORM='FORMATTED', 
	   1905      &     TYPE='NEW', RECL=168)
	   1906 
	   1907        ENDIF
	   1908       ENDIF  !ifile .eq. 1
	   1909 C
	   1910 C Set flags for start and stop
	   1911 C
	   1912       STARTFOUND=.FALSE.
	   1913       ENDFOUND=.FALSE.
	   1914 C
	   1915 C Get the Basic Core data
	   1916 C
	   1917  100  CALL WIND_L1_GET_BASIC( L1_LUN, SCI, STATUS)
	   1918       IF (STATUS .NE. 1) GOTO 9030
	   1919 C
	   1920 C Get Housekeeping Data Block
	   1921 C
	   1922       CALL WIND_L1_GET_HDB( L1_LUN, HDB, STATUS)
	   1923       IF (STATUS .NE. 1) GOTO 9050
	   1924 C
	   1925 C Get STICS rates and PHA
	   1926 C
	   1927       CALL WIND_L1_GET_STICS( L1_LUN, STICS_RATE, STICS_PHA, STATUS )
	   1928       IF (STATUS .NE. 1) GOTO 9080
	   1929 c
	   1930 C Get bitrate of first good spin
	   1931 C
	   1932       BITRATE = SCI.EDB(N).BITRATE
	   1933 c
	   1934 c Get appropriate for loop below. At HBR, there is data in every spin;
	   1935 c at LBR there is data only in even-numbered spins.
	   1936 c
	   1937       IF(BITRATE)THEN
	   1938 	INCREMENT = 1
	   1939       ELSE
	   1940 	INCREMENT = 2
	   1941       ENDIF 
	   1942 C
	   1943 C Output STICS PHA one science record.
	   1944 C
	   1945       DO 800 J=0,59,INCREMENT		!0-59 spins
	   1946         IF(USE_SC_CLOCK)THEN
	   1947           TIME_TO_USE = SCI.EDB(J).SC_TIME
	   1948         ELSE
	   1949           TIME_TO_USE = SCI.EDB(J).W_TIME
	   1950         ENDIF
	   1951 C
	   1952 C Compare time read to start time. If the time read is greater than or equal to the user-
	   1953 C specified start time, then begin processing data.
	   1954 C
	   1955         IF(.NOT.STARTFOUND)THEN

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  24
1.5                                                             12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   1956           STARTFOUND=COMPARE_TIME_GE(TIME_TO_USE,START)
	   1957         ENDIF
	   1958         IF(STARTFOUND)THEN
	   1959 C
	   1960 C Compare time read to end time. If time read is greater than the user-specified end time, 
	   1961 C we're done. Go to the part of the code that closes files and STOP's program.
	   1962 C
	   1963           ENDFOUND=COMPARE_TIME_GE(TIME_TO_USE,END)
	   1964           IF(ENDFOUND)GO TO 901
	   1965 C
	   1966 C Check quality flags. If PHA, BR, or overall quality flags are bad, skip this spin
	   1967 C
	   1968           IF(BITRATE)THEN
	   1969             IF(SCI.EDB(J).Qual.NE.0)GOTO 800
	   1970           ELSE
	   1971             IF((SCI.EDB(J).Qual.NE.0).OR.(SCI.EDB(J+1).Qual.NE.0))GOTO 800
	   1972           ENDIF
	   1973           IF(SCI.EDB(J).ST_BR_Qual.NE.0)GOTO 800
	   1974           IF(SCI.EDB(J).ST_P_Qual.NE.0)GOTO 800
	   1975 
	   1976 C
	   1977 C Get MASS Speed at start time and at the beginning of every Sci Record.
	   1978 C 
	   1979 	  IF((J .EQ. 0) .OR. (FIRSTSPEED .EQ. 0)) THEN
	   1980             CALL WIND_L1_GET_MASS(L1_LUN,MASS_RATE,MASS_PHA,STATUS)   ! mass data
	   1981             IF (STATUS .NE. 1) GOTO 9085
	   1982 
	   1983       	    CALL SMS_MASS_SPEED(HDB, MASS_RATE,  	!input
	   1984      .         BULK_SPEED, BULK_UNCER, ERR_SPD_FLAG , ERR_MESSAGE)	!output
	   1985 
	   1986             IF((ERR_SPD_FLAG .EQ. 0) .AND. (BULK_UNCER .GT. 0) .AND. (BULK_UNCER .LT. 150.0)) THEN
	   1987 	      SW_SPEED = BULK_SPEED
	   1988             ELSE
	   1989 	      BAD_SPEED = BAD_SPEED + 1
	   1990 c	      WRITE(56,151)TIME_TO_USE.DOY,TIME_TO_USE.HR,TIME_TO_USE.MIN,TIME_TO_USE.SEC,
	   1991 c     .                     BULK_SPEED,BULK_UNCER,ERR_MESSAGE
	   1992 c 151	      FORMAT(1X,I4.3,3(':',I2.2),3X,'Invalid speed encountered:  ',
	   1993 c     .               F10.1,' +/- ',F10.1,' km/s',/,16X,A) 
	   1994 	      SW_SPEED = 0
	   1995             ENDIF
	   1996 	      
	   1997 	  ENDIF
	   1998 
	   1999   	  FIRSTSPEED = -1		!Change after giving 1st speed
	   2000 
	   2001 C
	   2002 C Get dpps enable information, voltage step, and default value of e/q. 
	   2003 C
	   2004           ITEMP =HDB.BDH.DAT(24)
	   2005           ITEMP2=HDB.BDH.DAT(25)
	   2006 	  DPPSPLUS  = IBITS(ITEMP,7,1)
	   2007           DPPSMINUS = IBITS(ITEMP2,0,1) 
	   2008 
	   2009           ITEMP = STICS_RATE.EDB(J).RATE(179)
	   2010           DVSTEP = IBITS(ITEMP,0,5)
	   2011 	
	   2012           IF ( (DVSTEP.GE.DATA_DVSTEP_MIN) .AND.

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  25
1.5                                                             12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   2013      .         (DVSTEP.LE.DATA_DVSTEP_MAX) .AND.
	   2014 
	   2015      .         ( (DATA_FILTER_MSPEED .LT. 0) .OR. 
	   2016      .           ((SW_SPEED.GE.DATA_MSPEED_MIN) .AND.
	   2017      .            (SW_SPEED.LE.DATA_MSPEED_MAX)) )   ) THEN
	   2018 
	   2019 C
	   2020 C Get info for determining speed statistics
	   2021 C
	   2022 
	   2023 	     IF(SW_SPEED .LT. LOW_SPEED) LOW_SPEED = SW_SPEED
	   2024 	     IF(SW_SPEED .GT. HIGH_SPEED) HIGH_SPEED = SW_SPEED
	   2025              SPEED_HITS = SPEED_HITS +1.0
	   2026              SUM_SW_SPEED = SUM_SW_SPEED + SW_SPEED
	   2027              SUM_SQ_SPEED = SUM_SQ_SPEED + SW_SPEED**2
	   2028 
	   2029 
	   2030 C
	   2031 C If bad HDB flag, calculate e/q using default dpu algorithm
	   2032 C
	   2033             IF(HDB.Qual .NE. 0) THEN
	   2034                DPU_E_OVER_Q = 6.190722 * (1.1225857**DVSTEP)
	   2035 	       DPPSPLUS = 1
	   2036       	       DPPSMINUS= 1
	   2037             ELSE
	   2038                CALL DPU_EQ(DPPSPLUS,DPPSMINUS,DVSTEP,DPU_E_OVER_Q)
	   2039 	    ENDIF
	   2040 C
	   2041 C Get bit rate
	   2042 C
	   2043             IF(SCI.EDB(J).BITRATE)THEN
	   2044                RATEFLAG='H'                ! High bit rate
	   2045             ELSEIF(TIME_TO_USE.YEAR.NE.0)THEN
	   2046                RATEFLAG='L'                ! Low bit rate
	   2047             ELSE
	   2048                RATEFLAG='?'                ! Bit rate indeterminate, due to bad quality data
	   2049             ENDIF
	   2050 
	   2051             IF (RATEFLAG.EQ.'L' .AND. MOD(J,2).EQ.1)  THEN
	   2052      	      GO TO 800         
	   2053 	    ELSE
	   2054 
	   2055 C
	   2056 C Do for all STICS PHA words
	   2057 C
	   2058             DO 300 I=0, (SCI.EDB(J).STICS_Len-1) * 4, 4
	   2059 C
	   2060 C Get parts of PHA word
	   2061 C
	   2062               CALL DISSECT_STICS_PHA(STICS_PHA.EDB(J).PHA(I),
	   2063      .                      STOP_ID,START_ID_RANGE,ENERGY,SECTOR,
	   2064      .                      SSD_ID,TIME_OF_FLIGHT,PSTART,RANGE)
	   2065 
	   2066               CALL TELESCOPE_CHECK (TIME_OF_FLIGHT,ENERGY,
	   2067      .                PSTART,STOP_ID,SSD_ID, TELE_FLAG)
	   2068 C
	   2069 C Calculate Mass and M/Q using DPU algorithms

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  26
1.5                                                             12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   2070 C
	   2071               CALL MMPQ_DPU_WSTICS(DPPSPLUS,DPPSMINUS,DVSTEP,
	   2072      .                           ENERGY,TIME_OF_FLIGHT,
	   2073      .                           DPU_MASS_OVER_Q,DPU_MASS,
	   2074      .                           DPU_NM,DPU_NQ,DPU_RANGE)
	   2075 	      IF (FIFO .EQ. 'ON ')DPU_RANGE = 2
	   2076 C
	   2077 C Print out PHA data by word. There will thus be one row per PHA word, and no enties in the
	   2078 C table for voltage steps that have no PHA words.
	   2079 C
	   2080 
	   2081 	      IF ( (DATA_FILTER_RANGE.EQ.0)  .OR.
	   2082      .          (RANGE .EQ. 0 .AND. SEL_RANGE(0))  .OR.
	   2083      .          (RANGE .EQ. 1 .AND. SEL_RANGE(1))  .OR.
	   2084      .          (RANGE .EQ. 2 .AND. SEL_RANGE(2)) ) THEN
	   2085 
	   2086 	      IF ( (DATA_FILTER_COINC.EQ.0)  .OR. 
	   2087      .          (DATA_FILTER_COINC.EQ.1 .AND. DPU_MASS.EQ.0.)  .OR.
	   2088      .          (DATA_FILTER_COINC.EQ.2 .AND. DPU_MASS.GT.0.) ) THEN
	   2089 
	   2090               IF ( (DIRECTION_FILTER.EQ.0)               .OR.
	   2091      .            (( (DIRECTION_FILTER_SSD.LT.0) .OR.
	   2092      .               (DIRECTION_FILTER_SSD.EQ.SSD_ID)  ) .AND.
	   2093      .             ( (DIRECTION_FILTER_STOP.LT.0) .OR.
	   2094      .               (DIRECTION_FILTER_STOP.EQ.STOP_ID)) .AND.
	   2095      .             ( (DIRECTION_FILTER_START.LT.0) .OR.
	   2096      .               (DIRECTION_FILTER_START.EQ.PSTART)) ) ) THEN
	   2097 
	   2098 	      IF ( 
	   2099      .             ( DATA_FILTER_RANGECHECK.EQ.0 .OR.
	   2100      .		    (DATA_FILTER_RANGECHECK.EQ.1 .AND.
	   2101      .                       RANGE.EQ.DPU_RANGE) )           !range OK
	   2102      .               .AND.
	   2103      .              (DIRECTION_CHECK .EQ. 0 .OR.
	   2104      .              (DIRECTION_CHECK.EQ.1 .AND. TELE_FLAG.EQ.0) )  !telescope OK
	   2105      .                ) THEN	         
	   2106 	              IF(SECTOR .GE. DIRECTION_SECTOR_MIN .AND. 
	   2107      .			 SECTOR .LE. DIRECTION_SECTOR_MAX)THEN	         
	   2108 
	   2109 
	   2110 	      IF (TABLE_FORMAT .EQ. 1) THEN
	   2111 
	   2112 
	   2113                WRITE(50,250) L1_SR_HEADER.SR_COUNT,RATEFLAG,
	   2114      &			    TIME_TO_USE.YEAR,TIME_TO_USE.DOY,
	   2115      &                      TIME_TO_USE.HR,TIME_TO_USE.MIN,TIME_TO_USE.SEC,
	   2116      &                      DVSTEP,
	   2117      &                      DPU_E_OVER_Q,
	   2118      &                      STOP_ID,
	   2119      &                      START_ID_RANGE,
	   2120      &                      ENERGY,
	   2121      &                      SECTOR,
	   2122      &                      SSD_ID,
	   2123      &                      TIME_OF_FLIGHT,
	   2124      &                      PSTART,
	   2125      &                      RANGE,
	   2126      &                      DPU_MASS_OVER_Q,

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  27
1.5                                                             12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   2127      &                      DPU_MASS,
	   2128      &                      DPU_NM,
	   2129      &                      DPU_NQ,
	   2130      &                      DPU_RANGE
	   2131  250           FORMAT(1X,I8,2X,A1,  !sr counter, bit rate
	   2132      .                2X,I4,2X,I3.3,2X,I2,':',I2.2,':',I2.2,  	! time
	   2133      &             2X,I2,2X,F7.2,5X,I2,11X,I2,11X,I3,8X,I2,6X,		!dvstep,e/q,stop,start,E,sec,
	   2134      &             I2,6X,I4,7X,I1,7X,I1,				!ssd,tof,pstart,range
	   2135      &             5X,F6.2,3X,F5.1,3X,I2,2X,I3,3X,I2)				!m/q,m
	   2136 
	   2137 
	   2138 	      ELSE		!use geotail type pha listing format
	   2139 
	   2140 	       TBL_YEAR = TIME_TO_USE.YEAR
	   2141                TBL_SEC  = TIME_TO_USE.SEC
	   2142 	       IF (TBL_YEAR .LT. 2000) THEN
	   2143 		  TBL_YEAR = TBL_YEAR - 1900
	   2144 	       ELSE
	   2145 		  TBL_YEAR = TBL_YEAR - 2000
	   2146 	       ENDIF
	   2147 
	   2148                WRITE(50,251) 
	   2149      &                      DVSTEP,
	   2150      &                      ENERGY,
	   2151      &                      TIME_OF_FLIGHT,
	   2152      &                      SSD_ID,
	   2153      &                      SECTOR,
	   2154      &                      RANGE,
	   2155      &                      START_ID_RANGE,
	   2156      &                      STOP_ID,
	   2157      &                      DPU_MASS,
	   2158      &                      DPU_MASS_OVER_Q,
	   2159      &                      L1_SR_HEADER.SR_COUNT,
	   2160      &                      TBL_YEAR,
	   2161      &                      TIME_TO_USE.HR,TIME_TO_USE.MIN,
	   2162      &                      TBL_SEC
	   2163  251           FORMAT(I3, I5, I5, I3, I3, I2, I3, I3, F7.2, F7.3,
	   2164      &             I4, 1X, I2, 1X, I3, 1X, I2.2, I2.2, 1X, F4.1)
	   2165 
	   2166 	      ENDIF   ! table format
	   2167 
	   2168               ENDIF     !check sector
	   2169               ENDIF     !check range and/or telescope conditions
	   2170               ENDIF     !data filtering by direction 
	   2171               ENDIF	!data_filtering by coincidence conditions
	   2172               ENDIF     !data filtering by range
	   2173 
	   2174  300        CONTINUE
	   2175             ENDIF ! bit rate check (even J's if LBR).
	   2176           ENDIF   ! data within user selected voltage step range
	   2177 
	   2178         ENDIF     ! data within user selected time
	   2179 
	   2180  800  CONTINUE
	   2181 C
	   2182 C Read next Science Record
	   2183 C

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  28
1.5                                                             12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   2184       CALL WIND_L1_READ_SR( L1_LUN, CNTR, L1_SR_HEADER, STATUS )
	   2185       IF(STATUS.EQ.RMS$_EOF)GO TO 900
	   2186       IF (STATUS .NE. 1) GOTO 9020
	   2187 C
	   2188       GO TO 100
	   2189 C
	   2190 C Close files and STOP
	   2191 C
	   2192  900  IF (START.YEAR .GE. 0) GO TO 1000
	   2193  901  CALL WIND_L1_CLOSE( L1_LUN, STATUS )      ! Close input file
	   2194       IF (STATUS .NE. 1) GOTO 9090
	   2195       CLOSE(UNIT=50)                            ! Close PHA file
	   2196 c
	   2197 c Get S/C position at end of time period
	   2198 c
	   2199       X2_GSE = L1_SR_HEADER.GSE_POS.X/6380.0 
	   2200       Y2_GSE = L1_SR_HEADER.GSE_POS.Y/6380.0 
	   2201       Z2_GSE = L1_SR_HEADER.GSE_POS.Z/6380.0 
	   2202 C
	   2203 C Calculate standard deviation of speed
	   2204 C
	   2205       IF(SPEED_HITS .LE. 0) SPEED_HITS = 2.0
	   2206       SPEED_MEAN  = SUM_SW_SPEED/SPEED_HITS
	   2207       SPEED_SIGMA = SQRT((SUM_SQ_SPEED - SPEED_HITS*SPEED_MEAN**2)/(SPEED_HITS-1.0))
	   2208       WRITE(6,940)SPEED_MEAN, SPEED_SIGMA, LOW_SPEED, HIGH_SPEED
	   2209  940  FORMAT(/,1X,' Average Solar Wind Speed with sigma (km/s) = ',F6.1,' +/- ',F6.1,
	   2210      .       /,1X,' Range of valid speeds encountered (km/s) = ',F6.1,' to ', F6.1)  
	   2211 C
	   2212 C Write beginning and end positions to output files
	   2213 C
	   2214       WRITE(6,945)X1_GSE,Y1_GSE,Z1_GSE,X2_GSE,Y2_GSE,Z2_GSE  
	   2215  945  FORMAT(1X,' Start postion in GSE cartesian coordinates(Re): ',3F9.3,/
	   2216      .       1X,' Stop  postion in GSE cartesian coordinates(Re): ',3F9.3//)
	   2217 
	   2218 
	   2219       TYPE *,' FILE WRITTEN TO CURRENT DIRECTORY '
	   2220       STOP
	   2221 C
	   2222 C Come here for errors
	   2223 C
	   2224 9010  TYPE *,'ERROR OPENING L1 FILE; STATUS=',STATUS
	   2225       STOP
	   2226 9020  TYPE *,'ERROR READING SCIENCE RECORD ',CNTR,'; STATUS=',STATUS
	   2227       STOP
	   2228 9030  TYPE *,'ERROR GETTING BASIC CORE; STATUS=',STATUS
	   2229       STOP
	   2230 9050  TYPE *,'ERROR GETTING HDB; STATUS=',STATUS
	   2231       STOP
	   2232 9080  TYPE *,'ERROR GETTING STICS DATA; STATUS=',STATUS
	   2233       STOP
	   2234 9085  TYPE *,'ERROR GETTING MASS DATA; STATUS=',STATUS
	   2235       STOP
	   2236 9090  TYPE *,'ERROR CLOSING L1 FILE; STATUS=',STATUS
	   2237       STOP
	   2238       END

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  29
1.5                             Symbol Table                    12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                 464 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               104376 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  3 $IODATA$                              4068 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               14040   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                1604 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               125196


ENTRY POINTS

    Address   Type  Name           
                                   
  4-00000000        STICS_MMQ_TABLE


VARIABLES

    Address   Type  Name                       Address   Type  Name                       Address   Type  Name                  
                                                                                                                                
  2-00000320  CHAR  AUXFILENAME              2-000000C4  R*4   DPU_MASS                 0-0000003C# R*4   LOW_SPEED             
  2-000000D8  R*4   AVE_SPEED                2-000000C8  R*4   DPU_MASS_OVER_Q          2-00000110  CHAR  MODE_AT_START         
  1-0000002C  I*4   BAD_SPEED                2-000000CC  I*4   DPU_NM                 REG-########  I*4   N                     
REG-00000007  L*1   BITRATE                  2-000000D0  I*4   DPU_NQ                 REG-0000000F  I*4   NAMELEN               
  2-000000F8# L*4   BRACK                    2-000000D4  I*4   DPU_RANGE              REG-00000018  I*4   NINDEX                
  2-000000DC  R*4   BULK_SPEED               0-000000A0  I*4   DVSTEP                 REG-########  I*4   NN                    
  2-000000E0  R*4   BULK_UNCER             REG-00000000  L*4   ENDFOUND                 0-00000080  I*4   OPENMODE              
  2-00000098  I*4   CNTR                     2-00000088  I*4   END_DAYOFMONTH           2-000002C0  CHAR  OUTFILENAME           
  2-0000008C  L*4   CODE_C                   2-00000084  I*4   END_MONTH                2-000000B4  I*4   PSTART                
  2-00000090  L*4   CODE_C2                  2-000000A4  I*4   ENERGY                   2-000000B8  I*4   RANGE                 
  0-00000074  I*4   DATA_DVSTEP_MAX          2-00000210  CHAR  ERR_MESSAGE              2-00000038  CHAR  RATEFLAG              
  0-00000078  I*4   DATA_DVSTEP_MIN          2-000000F4  I*4   ERR_SPD_FLAG             2-00000040  CHAR  RONOFF                
REG-00000008  I*4   DATA_FILTER              2-00000028  CHAR  FIFO                     2-00000150  CHAR  RUN_DATE              
  0-0000007C  I*4   DATA_FILTER_COINC      REG-00000029  R*4   FIRSTFILE                2-00000058  CHAR  RUN_TIME              
  0-00000080  I*4   DATA_FILTER_DVSTEP       1-00000030  I*4   FIRSTSPEED               2-000000A8  I*4   SECTOR                
  0-00000050  I*4   DATA_FILTER_MSPEED       2-000001C0  CHAR  FULL_L1_NAME             2-000000E4# R*4   SPEED_HITS            
  0-00000070  I*4   DATA_FILTER_RANGE      REG-########  L*4   GOODSPIN                 0-00000038# R*4   SPEED_MEAN            
  0-0000006C  I*4   DATA_FILTER_RANGECHECK   0-00000040# R*4   HIGH_SPEED               0-0000008C  R*4   SPEED_SIGMA           
  0-00000048  I*4   DATA_MSPEED_MAX        REG-########  I*4   I                        2-000000AC  I*4   SSD_ID                
  0-0000004C  I*4   DATA_MSPEED_MIN          2-000000FC  I*4   IFILE                    0-00000080  L*4   STARTFOUND            
  0-00000054  I*4   DIRECTION_CHECK        REG-0000000F  I*4   INCREMENT                2-0000009C  I*4   START_ID_RANGE        
  0-00000084  I*4   DIRECTION_FILTER       REG-########  I*4   ITEMP                    2-00000078  I*4   STATUS                
  0-00000060  I*4   DIRECTION_FILTER_SSD   REG-00000001  I*4   ITEMP2                   2-000000A0  I*4   STOP_ID               
  0-00000068  I*4   DIRECTION_FILTER_START REG-0000000C  I*4   J                        2-00000080  I*4   ST_DAYOFMONTH         
  0-00000064  I*4   DIRECTION_FILTER_STOP  REG-0000000B  I*4   JSAVE                    2-0000007C  I*4   ST_MONTH              
  0-00000058  I*4   DIRECTION_SECTOR_MAX   REG-########  I*4   K                        2-000000EC# R*4   SUM_SQ_SPEED          
  0-0000005C  I*4   DIRECTION_SECTOR_MIN     2-00000094  I*4   L                        2-000000E8# R*4   SUM_SW_SPEED          
  0-000000A4  I*4   DPPSMINUS                2-00000170  CHAR  L1FILENAME               2-000000F0# R*4   SW_SPEED              
  0-0000009C  I*4   DPPSPLUS                 1-00000028  I*4   L1_LUN                   0-00000044  I*4   TABLE_FORMAT          
  2-000000C0  R*4   DPU_E_OVER_Q             2-00000260  CHAR  LISFIL                   0-000000C8  I*4   TBL_SEC               

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  30
1.5                             Symbol Table                    12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

    Address   Type  Name                       Address   Type  Name                       Address   Type  Name                  
                                                                                                                                
  0-000000CC# I*4   TBL_YEAR                 2-00000128  CHAR  USERNAME                 2-00000050  CHAR  YORN                  
  2-000000BC  I*4   TELE_FLAG                    **      L*4   USE_SC_CLOCK             2-00000108  R*4   Z1_GSE                
  2-00000030  CHAR  TGS                      2-00000100# R*4   X1_GSE                   0-00000088  R*4   Z2_GSE                
  2-000000B0  I*4   TIME_OF_FLIGHT           0-00000080  R*4   X2_GSE                                                           
  2-00000048  CHAR  TONOFF                   2-00000104  R*4   Y1_GSE                                                           
REG-00000004  I*4   TRIGGER_MODE_CODE        0-00000084  R*4   Y2_GSE                                                           


RECORDS

    Address   Name            Structure                Bytes     Address   Name            Structure                Bytes
                                                                                                                         
  2-00000068  END             T                            8   2-00000380  SCI             CORE                      7384
  2-00002058  HDB             HDBSTR                     324   2-00000060  START           T                            8
  6-00000000  L1_FILE_HEADER  ST_L1_FILE_HEADER          400   2-00004CC0  STICS_PHA       ST_PHA                   36720
  6-00000190  L1_SR_HEADER    ST_L1_SR_HEADER            244   2-000021A0  STICS_RATE      ST_RATE                  11040
  2-0000E3B0  MASS_PHA        MA_PHA                   45960   2-00000070  TIME_TO_USE     T                            8
  2-0000DC30  MASS_RATE       MA_RATE                   1920                                                             


ARRAYS

     Address  Type  Name                Bytes  Dimensions

  1-00000038  CHAR  COINC                  30  (0:2)
  2-00019738  I*4   DVS_COUNTS            128  (0:31)
  1-00000080  CHAR  MODE                  170  (10)
  1-00000058  CHAR  RANGESEL               35  (0:6)
  2-00000160  L*4   SEL_RANGE              12  (0:2)
  1-00000130  CHAR  TRIGGER_MODE          160  (0:7)



LABELS

    Address   Label     Address   Label     Address   Label     Address   Label     Address   Label     Address   Label
                                                                                                                       
      **       2          **       10         **       17     4-00002644   300    4-00000BE8   1000       **       9080
  4-00000A74   3          **       12         **       18     4-00002654   800        **       1001       **       9085
      **       5          **       13         **       19         **       900        **       9010       **       9090
      **       6          **       14     4-00001930   100        **       901        **       9020                    
      **       7          **       15         **       250        **       940        **       9030                    
      **       8          **       16         **       251        **       945        **       9050                    


FUNCTIONS AND SUBROUTINES REFERENCED

  Type  Name                                Type  Name                                Type  Name                             
                                                                                                                             
        CNVRT_T_YRMONDAY_TO_YEARDAY               TELESCOPE_CHECK                           WIND_L1_GET_HDB                  
  L*4   COMPARE_TIME_GE                           USER_REQUESTS_DATA_TYPE                   WIND_L1_GET_MASS                 
        DISSECT_STICS_PHA                         USER_REQUESTS_DIRECTION                   WIND_L1_GET_STICS                
        DPU_EQ                                    WIND_GET_FILENAME                         WIND_L1_OPEN                     
        MMPQ_DPU_WSTICS                           WIND_L1_CLOSE                             WIND_L1_OPEN_NEXT                
        SMS_MASS_SPEED                            WIND_L1_GET_BASIC                         WIND_L1_READ_SR                  

STICS_MMQ_TABLE                                                  1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  31
1.5                             Symbol Table                    12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   2239 
	   2240 C***************************************************************************
	   2241       SUBROUTINE USER_REQUESTS_DATA_TYPE(
	   2242      .           FILTER_COINC,
	   2243      .           FILTER_DVSTEP,
	   2244      .		 DVSTEP_MIN,
	   2245      .		 DVSTEP_MAX,
	   2246      .           FILTER_RANGE,
	   2247      .           SRANGE,
	   2248      .           RANGECHECK,
	   2249      .           FILTER_SPEED,
	   2250      .           SPEED_MIN,
	   2251      .           SPEED_MAX)
	   2252 
	   2253 C     user inputs for data filtering by data type
	   2254 C     13.Jan.95  ABG
	   2255 
	   2256 
	   2257       IMPLICIT NONE
	   2258 
	   2259 C     data filtering options
	   2260       INTEGER*4  FILTER_COINC,	!data filtering by coincidence 
	   2261 C					 conditions
	   2262      .           FILTER_DVSTEP,	!data filter by voltage step
	   2263      .           DVSTEP_MIN,	!dv step min-max values for data filter
	   2264      .           DVSTEP_MAX,
	   2265      .           FILTER_RANGE,   !range selection
	   2266      .           RANGECHECK,
	   2267      .           FILTER_SPEED,       !MASS derived solar wind speed selection
	   2268      .           SPEED_MIN, 
	   2269      .           SPEED_MAX
	   2270 
	   2271       LOGICAL SRANGE(0:2)	!accept / reject this range
	   2272       CHARACTER*5 RSELECTION(0:6) /		!range selection
	   2273      .                           '2 1 0' ,
	   2274      .                           '    0' ,
	   2275      .                           '  1  ' ,
	   2276      .                           '2    ' ,
	   2277      .                           '2   0' ,
	   2278      .                           '2 1  ' ,
	   2279      .                           '  1 0' /
	   2280 
	   2281       INTEGER*4  I,J,K
	   2282       CHARACTER*1 YORN			!yes or no answer
	   2283 
	   2284 
	   2285 
	   2286       TYPE 7
	   2287     7 FORMAT(' Enter desired data filtering ',
	   2288      .       'by coincidence conditions: ',/,
	   2289      .       '   0 = no filtering (no M or M/Q restrictions) ',/,
	   2290      .       '   1 = M/Q-only     (i.e., M/Q > 0, Mass = 0) ',/,
	   2291      .       '   2 = M & M/Q      (i.e., M/Q > 0, Mass > 0) ',/,
	   2292      .       '       ',$)
	   2293       ACCEPT *, FILTER_COINC
	   2294 
	   2295       TYPE 8

USER_REQUESTS_DATA_TYPE                                          1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  32
1.5                             Symbol Table                    12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   2296     8 FORMAT(' Enter desired data filtering by voltage step range: ',/,
	   2297      .       '   -1 = no voltage step filtering (all e/q values) ',/,
	   2298      .       '    0 = voltage step filtering desired',/,
	   2299      .       '        ',$)
	   2300       ACCEPT *, FILTER_DVSTEP
	   2301       IF (FILTER_DVSTEP .GT. -1) THEN
	   2302          TYPE 9
	   2303     9    FORMAT(' Enter minimum and maximum voltage steps (inclusive)',/
	   2304      .          '     ',$)	  
	   2305 	 ACCEPT *, DVSTEP_MIN, DVSTEP_MAX
	   2306       ENDIF
	   2307 
	   2308       TYPE 10 , (RSELECTION(I),I=0,6)
	   2309    10 FORMAT(' Enter range selection: ',/,
	   2310      .       '    0 = ',A5,'  (i.e., all ranges) ',/,
	   2311      .       '    1 = ',A5,/,
	   2312      .       '    2 = ',A5,/,
	   2313      .       '    3 = ',A5,/,
	   2314      .       '    4 = ',A5,/,
	   2315      .       '    5 = ',A5,/,
	   2316      .       '    6 = ',A5 )
	   2317        ACCEPT *, FILTER_RANGE
	   2318        TYPE 11, RSELECTION(FILTER_RANGE)
	   2319    11  FORMAT (/' User selected the following ranges : 'A5/)
	   2320       SRANGE(0) = .FALSE.	!reject range 0 events
	   2321       SRANGE(1) = .FALSE.	!reject range 1 events
	   2322       SRANGE(2) = .FALSE.	!reject range 2 events
	   2323 
	   2324        IF (  (FILTER_RANGE.EQ.0) .OR. (FILTER_RANGE.EQ.1) .OR.
	   2325      .       (FILTER_RANGE.EQ.4) .OR. (FILTER_RANGE.EQ.6) )
	   2326      .		SRANGE(0) = .TRUE.
	   2327        IF (  (FILTER_RANGE.EQ.0) .OR. (FILTER_RANGE.EQ.2) .OR.
	   2328      .       (FILTER_RANGE.EQ.5) .OR. (FILTER_RANGE.EQ.6) )
	   2329      .		SRANGE(1) = .TRUE.
	   2330        IF (  (FILTER_RANGE.EQ.0) .OR. (FILTER_RANGE.EQ.3) .OR.
	   2331      .       (FILTER_RANGE.EQ.4) .OR. (FILTER_RANGE.EQ.5) )
	   2332      .		SRANGE(2) = .TRUE.
	   2333 
	   2334        TYPE 12
	   2335    12  FORMAT(' Do you want to limit the output to range checks? '
	   2336      .        '[y/n] ',$)
	   2337        ACCEPT 13, YORN
	   2338    13  FORMAT (A)
	   2339        IF (YORN.EQ.'Y' .OR. YORN.EQ.'y') RANGECHECK=1
	   2340 
	   2341        TYPE 15
	   2342    15  FORMAT(' Enter desired data filtering by solar wind speed range: ',/,
	   2343      .       '    -1 = no filtering by MASS speed ',/,
	   2344      .       '    0  = MASS speed filtering desired',/,
	   2345      .       '        ',$)
	   2346       ACCEPT *, FILTER_SPEED
	   2347       IF (FILTER_SPEED .GT. -1) THEN
	   2348          TYPE 16
	   2349    16    FORMAT(' Enter minimum and maximum solar wind speed (inclusive)',/
	   2350      .          '     ',$)	  
	   2351 	 ACCEPT *, SPEED_MIN, SPEED_MAX
	   2352       ENDIF

USER_REQUESTS_DATA_TYPE                                          1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  33
1.5                             Symbol Table                    12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   2353 
	   2354 
	   2355        RETURN
	   2356        END


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                 464 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               104376 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  3 $IODATA$                              4068 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               14040   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                1604 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               125196


ENTRY POINTS

    Address   Type  Name                   
                                           
  4-00002EF0        USER_REQUESTS_DATA_TYPE


VARIABLES

    Address   Type  Name              Address   Type  Name              Address   Type  Name         
                                                                                                     
      **      I*4   DVSTEP_MAX          **      I*4   FILTER_SPEED        **      I*4   SPEED_MAX    
      **      I*4   DVSTEP_MIN    REG-00000005  I*4   I                   **      I*4   SPEED_MIN    
      **      I*4   FILTER_COINC    2-00000020  I*4   J               2-00000018  CHAR  YORN         
      **      I*4   FILTER_DVSTEP   2-00000024  I*4   K                                              
      **      I*4   FILTER_RANGE        **      I*4   RANGECHECK                                     


ARRAYS

     Address  Type  Name              Bytes  Dimensions

  1-00000000  CHAR  RSELECTION           35  (0:6)
      **      L*4   SRANGE               12  (0:2)



LABELS

    Address   Label     Address   Label     Address   Label     Address   Label     Address   Label
                                                                                                   
      **       7          **       9          **       11         **       13         **       16  
      **       8          **       10         **       12         **       15                      

USER_REQUESTS_DATA_TYPE                                          1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  34
1.5                             Symbol Table                    12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   2357 
	   2358 
	   2359 
	   2360 C**********************************************************************
	   2361       SUBROUTINE USER_REQUESTS_DIRECTION (
	   2362      .           FILTER_START,
	   2363      .           FILTER_STOP,
	   2364      .		 FILTER_SSD,
	   2365      .		 SECTOR_MIN,
	   2366      .		 SECTOR_MAX,
	   2367      .           TELECHECK)
	   2368 
	   2369 C     user inputs for data filtering by direction
	   2370 C     19.Jan.95  ABG
	   2371 
	   2372 
	   2373       IMPLICIT NONE
	   2374 
	   2375 C     data filtering options
	   2376       INTEGER*4  FILTER_START,	!data filtering by start anode id
	   2377      .           FILTER_STOP,	!data filter by stop mcp id
	   2378      .           FILTER_SSD,    !data filter by solid state detector id
	   2379      .		 SECTOR_MIN,	!data filter by sector, minimum sector
	   2380      .		 SECTOR_MAX,    !			maximum sector
	   2381      .           TELECHECK      !check id consistency
	   2382 
	   2383 
	   2384       INTEGER*4  I,J,K
	   2385       CHARACTER*1 YORN			!yes or no answer
	   2386 
	   2387 
	   2388       TELECHECK    = 0
	   2389       FILTER_START = -1
	   2390       FILTER_STOP  = -1
	   2391       FILTER_SSD   = -1
	   2392 
	   2393       TYPE 7
	   2394     7 FORMAT(/,' Enter desired start anode id value (-1 = ALL)',
	   2395      .       '       ',$)
	   2396       ACCEPT *, FILTER_START
	   2397 
	   2398       TYPE 8
	   2399     8 FORMAT(/,' Enter desired stop mcp id value (-1 = ALL)',
	   2400      .       '        ',$)
	   2401       ACCEPT *, FILTER_STOP
	   2402 
	   2403       TYPE 9
	   2404     9 FORMAT(/,' Enter desired solid state detector id (-1 = ALL)',
	   2405      .          '     ',$)	  
	   2406       ACCEPT *, FILTER_SSD
	   2407 
	   2408       TYPE 10
	   2409    10 FORMAT(/,' Enter minimum sector, 0-15 inclusive, to sum over (-1 = ALL)',
	   2410      .         '      ',$)
	   2411       ACCEPT *, SECTOR_MIN
	   2412       IF(SECTOR_MIN .GE. 0 .AND. SECTOR_MIN .LE. 15) THEN
	   2413         TYPE 11

USER_REQUESTS_DIRECTION                                          1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  35
1.5                             Symbol Table                    12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   2414    11   FORMAT(/,' Enter maximum sector (inclusive) to sum over ',
	   2415      .         '      ',$)
	   2416         ACCEPT *, SECTOR_MAX
	   2417       ELSE
	   2418 	SECTOR_MIN = 0
	   2419 	SECTOR_MAX = 15
	   2420       ENDIF
	   2421       
	   2422 
	   2423        TYPE 12
	   2424    12  FORMAT(/,' Do you want to limit events to consistent telescope ? '
	   2425      .        '[y/n] ',$)
	   2426        ACCEPT 13, YORN
	   2427    13  FORMAT (A)
	   2428        IF (YORN.EQ.'Y' .OR. YORN.EQ.'y') TELECHECK=1
	   2429 
	   2430 
	   2431        RETURN
	   2432        END


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                 464 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               104376 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  3 $IODATA$                              4068 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                               14040   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                1604 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               125196


ENTRY POINTS

    Address   Type  Name                   
                                           
  4-000033E8        USER_REQUESTS_DIRECTION


VARIABLES

    Address   Type  Name             Address   Type  Name             Address   Type  Name             Address   Type  Name        
                                                                                                                                   
      **      I*4   FILTER_SSD     2-00000008  I*4   I                  **      I*4   SECTOR_MAX     2-00000000  CHAR  YORN        
      **      I*4   FILTER_START   2-0000000C  I*4   J                  **      I*4   SECTOR_MIN                                   
      **      I*4   FILTER_STOP    2-00000010  I*4   K                  **      I*4   TELECHECK                                    



USER_REQUESTS_DIRECTION                                          1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  36
1.5                             Symbol Table                    12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

LABELS

    Address   Label     Address   Label     Address   Label     Address   Label
                                                                               
      **       7          **       9          **       11         **       13  
      **       8          **       10         **       12                      

USER_REQUESTS_DIRECTION                                          1-APR-1997 12:55:04    DEC Fortran V6.2-508                Page  37
1.5                             Symbol Table                    12-FEB-1997 17:10:36    [WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.FOR;150

	   2433 
	   2434 


  +---------------------------------------------------+
  |               KEY TO ADDRESS CODE FORMATS         |
  |   ppp-oooooooo  - In Psect ppp, Offset oooooooo   |
  |   ***-********  - External                        |
  |               # - Suffix: Also In Registers       |
  |   REG-rrrrrrrr  - In Register rrrrrrrr            |
  |   REG-########  - In Various Registers            |
  |        **       - Not Used; Not Allocated         |
  +---------------------------------------------------+


COMMAND QUALIFIERS

  /ALIGNMENT=(COMMONS=(PACKED,NOMULTILANGUAGE),RECORDS=PACKED)
  /ASSUME=(ACCURACY_SENSITIVE,BACKSLASH,NODUMMY_ALIASES,NOUNDERSCORE)
  /CHECK=(ASSERTIONS,BOUNDS,FORMAT,FP_EXCEPTIONS,OVERFLOW,NOUNDERFLOW)
  /DEBUG=(NOSYMBOLS,TRACEBACK)
  /DESIGN=(NOCOMMENTS)
  /SHOW=(DICTIONARY,INCLUDE,MAP,PREPROCESSOR)
  /STANDARD=(NOSEMANTIC,NOSOURCE_FORM,NOSYNTAX)
  /WARNINGS=(NOALIGNMENT,NOARGUMENT_CHECKING,NODECLARATIONS,GENERAL,NOTRUNCATED_SOURCE,UNCALLED,
             UNINITIALIZED,UNREACHABLE,UNUSED)
  /NOAUTOMATIC  /BLAS=NOMAPPED  /CONVERT=NATIVE  /NOCROSS_REFERENCE  /NOD_LINES  /ERROR_LIMIT=30  /EXTEND_SOURCE
  /NOPAD_SOURCE  /NOF77  /FLOAT=G_FLOAT  /IEEE_MODE=FAST  /ROUNDING_MODE=NEAREST
  /GRANULARITY=QUADWORD  /INSTRUCTION_SET=FLOATING  /INTEGER_SIZE=32  /NOMACHINE_CODE
  /MATH_LIBRARY=ACCURATE  /NAMES=UPPERCASE  /OPTIMIZE=(LEVEL=4,UNROLL=0)  /REAL_SIZE=32  /NORECURSIVE
  /NOSEPARATE_COMPILATION  /NOSYNCHRONOUS_EXCEPTIONS  /NOSYNTAX_ONLY  /TERMINAL=NOSTATISTICS  /NOTIE  /VMS
  /NOANALYSIS_DATA
  /NODIAGNOSTICS
  /INCLUDE=(.FOR,.f,FORT$INCLUDE:.FOR,FORT$INCLUDE:.f)
  /LIST=SMS1:[WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.LIS;81
  /OBJECT=SMS1:[WIND.SOFTWARE.STICS]STICS_MMQ_TABLE.OBJ;99
  /NOLIBRARY
   sys$lib=SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1

COMPILER: DEC Fortran V6.2-508-274F

COMPILATION STATISTICS

  CPU time:          5.03 seconds
  Elapsed time:      8.02 seconds
  Pagefaults:         470
  I/O Count:           83
