                                                                 6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page   1
1.14                                                             6-DEC-1996 15:23:37    [WIND.SOFTWARE.STICS]MASS_SWE_SPD.FOR;11

	      1 CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
	      2       PROGRAM MASS_SWE_SPD
	      3 C
	      4 C Revision history:
	      5 C
	      6 CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
	      7 CDEC$ IDENT '1.14'
	      8       INCLUDE	'INC_DIR:EDBDEF.INC/NOLIST'

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page   2
1.14                                                             6-DEC-1996 15:23:37    [WIND.SOFTWARE.STICS]MASS_SWE_SPD.FOR;11

	    546       INCLUDE   'INC_DIR:L1FMT.INC/NOLIST'
	    678       INCLUDE   '($RMSDEF)'
    1	    679 !*** MODULE $RMSDEF ***
    1	    680 CDEC$ OPTIONS/ALIGN=(RECORDS=PACKED,COMMONS=PACKED)
    1	    681  ! 
    1	    682  !  This SDL File Generated by VAX-11 Message V04-00 on 26-JAN-1994 13:51:15.86
    1	    683  ! 
    1	    684  ! 	.TITLE	RMSMSG -RMS COMPLETION CODES
    1	    685  !  *************************************************************************
    1	    686  !  *                                                                       *
    1	    687  !  * COPYRIGHT (C) DIGITAL EQUIPMENT CORPORATION, 1976, 1977, 1978, 1979,  *
    1	    688  !  * 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,     *
    1	    689  !  * 1991,1992                                                             *
    1	    690  !  * ALL RIGHTS RESERVED.                                                  *
    1	    691  !  * UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT LAWS  OF  THE  UNITED *
    1	    692  !  * STATES.                                                               *
    1	    693  !  *                                                                       *
    1	    694  !  * THE SOFTWARE CONTAINED ON THIS MEDIA IS PROPRIETARY TO  AND  EMBODIES *
    1	    695  !  * THE   CONFIDENTIAL   TECHNOLOGY  OF  DIGITAL  EQUIPMENT  CORPORATION. *
    1	    696  !  * POSSESSION, USE, DUPLICATION OR DISSEMINATION  OF  THE  SOFTWARE  AND *
    1	    697  !  * MEDIA  IS  AUTHORIZED  ONLY  PURSUANT TO A VALID WRITTEN LICENSE FROM *
    1	    698  !  * DIGITAL EQUIPMENT CORPORATION.                                        *
    1	    699  !  *                                                                       *
    1	    700  !  * RESTRICTED RIGHTS LEGEND USE, DUPLICATION, OR DISCLOSURE BY THE  U.S. *
    1	    701  !  * GOVERNMENT  IS  SUBJECT  TO RESTRICTIONS AS SET FORTH IN SUBPARAGRAPH *
    1	    702  !  * (C)(1)(II) OF DFARS 252.227-7013, OR IN FAR 52.227-19, AS APPLICABLE. *
    1	    703  !  *                                                                       *
    1	    704  !  *************************************************************************
    1	    705  ! ++
    1	    706  !  FACILITY: RMS
    1	    707  ! 
    1	    708  !  ABSTRACT:
    1	    709  ! 
    1	    710  ! 	THIS MODULE DEFINES ALL RMS COMPLETION CODES.
    1	    711  ! 
    1	    712  !  ENVIRONMENT:
    1	    713  ! 
    1	    714  ! 	THE MESSAGE TRANSLATOR MUST BE USED TO CONVERT RMSMSG.MSG INTO
    1	    715  ! 	RMSMSG.SDL.  THE SDL TRANSLATOR MUST THEN BE USED TO CONVERT
    1	    716  ! 	RMSMSG.SDL INTO RMSMSG.MAR (AND RMSMSG.B32).
    1	    717  ! 
    1	    718  !  AUTHOR: LEO F. LAVERDURE,	CREATION DATE:  10-DEC-1976
    1	    719  ! 
    1	    720  !  MODIFIED BY:
    1	    721  ! 
    1	    722  !                DEE RYAN                                30-SEP-1993
    1	    723  !                CORRECTED USE OF DIGITAL PRODUCT NAMES.
    1	    724  ! 
    1	    725  ! 	X-5	EMW		ELINOR M. WOODS		28-SEP-1993
    1	    726  ! 		MERGE IN OPENVMS VAX CORAL FIX:
    1	    727  ! 
    1	    728  ! 		X-10	EMW0019  ELINOR M. WOODS  	21-SEP-1993
    1	    729  ! 		ADD ONE NEW USER-REPORTABLE ERROR STATUS (WITH AN
    1	    730  ! 		ASSOCIATED STV): NETBTS.  RELOCATE NEW IDXSEARCH STATUS
    1	    731  ! 		(SEE X-9) FROM "ERROR with STV" SECTION TO "ERROR WITHOUT 
    1	    732  ! 		STV" section.  Expand "WITH STV' AND "without STV"
    1	    733  ! 		COMMENTS TO CLARIFY DIFFERENCE BETWEEN TWO.

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page   3
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    734  ! 
    1	    735  ! 	X-4	EMW0016		ELINOR M. WOODS		10-AUG-1993
    1	    736  ! 		MERGE IN CORAL FIX:
    1	    737  ! 
    1	    738  ! 		MODIFY SEVERITY OF TWO DTF ERROR CODES (DTFACC AND
    1	    739  ! 		DTFCRE) FROM FATAL TO ERROR, AS REQUESTED BY SNA/DTF
    1	    740  ! 		FACILITY.		
    1	    741  ! 
    1	    742  ! 		ALSO MOVE NEW IDXSEARCH STATUS FROM ERROR WITH NO 
    1	    743  ! 		STV GROUPING TO ERROR WITH STV GROUPING.
    1	    744  ! 
    1	    745  ! 	X-3	EMW0010		ELINOR M. WOODS		02-JUL-1993
    1	    746  ! 		TO SUPPORT NEW KEY-LESS-THAN FUNCTIONALITY, ADDITION 
    1	    747  ! 		OF ONE USER-REPORTABLE ERROR STATUS:  IDXSEARCH, AND
    1	    748  ! 		TWO NEW RMS-INTERNAL ERROR STATUSES:  LSCAN AND 
    1	    749  ! 		ROOTSRCH.		
    1	    750  ! 
    1	    751  ! 	X-2	CW0019		CHRIS WHITAKER		11-NOV-1992
    1	    752  ! 		MERGE IN OPENVMS VAX V6.0 CHANGES
    1	    753  ! 
    1	    754  ! 		X-8	JM0012	JOHN MUNZER		11-NOV-1992
    1	    755  ! 		CHANGE TEXT FOR RMS$_LNE.
    1	    756  ! 
    1	    757  ! 		X-7	JM0006	JOHN MUNZER		17-APR-1992
    1	    758  ! 		ADD !XL PARAMETER TO RMS$_BUG TO REPORT R2.
    1	    759  ! 
    1	    760  ! 	X-1	RAB		RICHARD A. BISHOP	24-JUN-1991
    1	    761  ! 		MOVED TO [STARLET] FACILITY
    1	    762  ! 
    1	    763  ! 	==================================
    1	    764  ! 	OLD AUDIT TRAIL FOLLOWS:
    1	    765  ! 
    1	    766  ! 	X-33	LSS0154		LEONARD S. SZUBOWICZ	 4-APR-1990
    1	    767  ! 		ALTER TEXT AND FAO PARAMETERS OF RMS$_RUH AND RMS$_BUG
    1	    768  ! 		CONDITION VALUES FOR RMS/DDTM SUPPORT.
    1	    769  ! 
    1	    770  ! 	X-32	PJH		PAUL J. HOULIHAN	17-JAN-1990
    1	    771  ! 		CHANGE TEXT FOR RMS$_INCOMPSHR ERROR MESSAGE.
    1	    772  ! 
    1	    773  ! 	X-31	LSS0130		LEONARD S. SZUBOWICZ	12-OCT-1989
    1	    774  ! 		MERGE OF RMS/DDTM GENERATION X-30D2.
    1	    775  ! 		ADD GENERAL DDTM_ERR ERROR MESSAGE FOR DDTM SERVICE FAILURES;
    1	    776  ! 		STV WILL CONTAIN THE FAILING SYSTEM SERVICE CONDITION VALUE.
    1	    777  ! 
    1	    778  ! 	X-30	LSS0080		LEONARD S. SZUBOWICZ	06-OCT-1988
    1	    779  ! 		ADD RMS$_OK_ACT MESSAGE FOR USE BY FUTURE WORK TO $DISPLAY.
    1	    780  ! 		THIS IS PART OF LATENT SUPPORT FOR RMS/DDTM.
    1	    781  ! 
    1	    782  ! 	X-29	GJA0080		GARY J. ALLISON		06-JUN-1988
    1	    783  ! 		CHANGE TEXT OF SEMANTICS MESSAGE.
    1	    784  ! 
    1	    785  ! 	X-28	GJA0072		GARY J. ALLISON		02-MAR-1988
    1	    786  ! 		ADD EXT_ERR, OPNOTSUP, EXTNOTFOU, AND SEMANTICS MESSAGES.
    1	    787  ! 
    1	    788  ! 	X-27	PMV0072		PETER M. VATNE		08-OCT-1987
    1	    789  ! 		CHANGE RMS$_NOJNLLIC TO RMS$_JNLNOTAUTH.
    1	    790  ! 

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page   4
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    791  !  	X-26	LSS0057		LEONARD S. SZUBOWICZ	15-SEP-1987
    1	    792  ! 		CHANGE TEXT FOR THE RMS$_OK_DUP STATUS SUCH THAT THE MESSAGE
    1	    793  ! 		IS APPLICABLE TO $GET AS WELL AS $PUT.
    1	    794  ! 
    1	    795  ! 	X-25	PMV0068		PETER M. VATNE		11-SEP-1987
    1	    796  ! 		ADD RMS$_NOJNLLIC, NO RMS JOURNALING LICENSE, FOR LMF.
    1	    797  ! 
    1	    798  ! 	X-24	RNM0026		RUSSELL N. MURRAY	15-AUG-1987
    1	    799  ! 		ADD RMS$_SYNCH MESSAGE FOR NOTIFICATION OF SYNCHRONOUS
    1	    800  ! 		COMPLETION.
    1	    801  ! 
    1	    802  ! 	X-23	JEJ0479		JAMES E JOHNSON		13-AUG-1987
    1	    803  ! 		ADD RMS$_IVATRACE MESSAGE.
    1	    804  ! 
    1	    805  ! 	X-22	PMV0061		PETER M. VATNE		03-AUG-1987
    1	    806  ! 		CHANGE RESERVED MESSAGE RMS$_BUG_XX5 TO RMS$_BUG_RU_COMMIT_FAIL
    1	    807  ! 		TO CORRESPOND TO POSITIVE RMS BUGCHECK FTL$_RU_COMMIT_FAIL.
    1	    808  ! 
    1	    809  !  	X-21	LSS0042		LEONARD S. SZUBOWICZ	13-MAY-1987
    1	    810  ! 		CHANGE RESERVED MESSAGE RMS$_BUG_XX4 TO RMS$_BUG_RU_ABORT_FAIL
    1	    811  ! 		TO CORRESPOND TO POSITIVE RMS BUGCHECK FTL$_RU_ABORT_FAIL
    1	    812  ! 	
    1	    813  ! 	X-20	SAD0034		STUART A. DAVIDSON	12-MAR-1987 
    1	    814  ! 		DROP QUOTES FROM SNADTF MESSAGE TEXT.
    1	    815  ! 
    1	    816  ! 	X-19	PJH		PAUL J. HOULIHAN	19-JAN-1987
    1	    817  ! 		MERGE IN 17J1.
    1	    818  ! 
    1	    819  ! 		X-17J1	PJH		PAUL J. HOULIHAN	15-JAN-1987
    1	    820  ! 			FIX SEVERAL SMALL JNL PROBLEMS.
    1	    821  ! 			ADD RMS$_BUG_FLUSH_JNL_FAILED CODE.
    1	    822  ! 
    1	    823  ! 	X-18	KPS0148		KENNETH P. SIEGEL	04-DEC-1986
    1	    824  ! 		ADDED SNPPF (STATISTICS MONITORING NOT SUPPORTED FOR
    1	    825  ! 		PROCESS PERMANENT FILES) ERROR MESSAGE.
    1	    826  ! 
    1	    827  ! 	X-17	PMV0025		PETER M. VATNE		24-NOV-1986
    1	    828  ! 		ADD NEW MESSAGE, RMS$_NOTSAMEJNL.  THIS STATUS IS
    1	    829  ! 		USED TO RESTRICT AI/BI WITH RU JOURNALING TO A
    1	    830  ! 		SINGLE LONG-TERM JOURNAL FILE.
    1	    831  ! 
    1	    832  ! 	X-16	DAS		DAVID A. SOLOMON	18-NOV-1986
    1	    833  ! 		ADD NEW MESSAGE, RMS$_DELJNS. REMOVE RMS$_XCR (BY REPLACING IT
    1	    834  ! 		WITH A PLACEHOLDER), AS JOURNALING BITS ARE NO LONGER
    1	    835  ! 		SPECIFIED IN THE $XABJNL. SLIGHT WORDING CHANGE ON DETACHED
    1	    836  ! 		RU RECOVERY ERROR MESSAGES.
    1	    837  ! 
    1	    838  ! 	X-15	DAS		DAVID A. SOLOMON	12-NOV-1986
    1	    839  ! 		FIX ERROR IN X-5/X-6: JOURNALING VARIANT NOT MERGED
    1	    840  ! 		CORRECTLY, RESULTING IN SEVERAL JOURNALING MESSAGES NUMBERS
    1	    841  ! 		BEING DIFFERENT IN THE MAININE THAN WHAT THEY WERE ON THE
    1	    842  ! 		JOURNALING VARIANT. ALSO, MOVE NEW SNADTF MESSAGES TO RE-USE
    1	    843  ! 		AVAILABLE UNUSED MESSAGE NUMBERS, INSTEAD OF GENERATING NEW
    1	    844  ! 		ONES. FINALLY, CHANGE RMS$_BUG_ABORT TO RMS$_BUG_RU_ACTIVE.
    1	    845  ! 
    1	    846  ! 	X-14	SAD0014		STUART A. DAVIDSON	 4-NOV-1986
    1	    847  ! 		SNADTF - FIX TYPO IN DTFACC, DTFCRE

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page   5
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    848  ! 
    1	    849  ! 	X-13	SAD0014		STUART A. DAVIDSON	 3-NOV-1986
    1	    850  ! 		SNADTF - FIX TYPO, ADD 2 ADDITIONAL MESSAGES.
    1	    851  ! 
    1	    852  ! 	X-12	JEJ0377		JAMES E JOHNSON		29-OCT-1986
    1	    853  ! 		ADD NOEXTEND ERROR CODE TO FLAG FAILED RELATIVE FILE
    1	    854  ! 		EXTENDS DUE TO PREVIOUS FAILURES.
    1	    855  ! 
    1	    856  ! 	X-11	KPS0131		KENNETH P. SIEGEL	25-OCT-1986
    1	    857  ! 		ADDED SNS ERROR CODE FOR STATISTICS NOT SUPPORT ON
    1	    858  ! 		NON-DISK DEVICES.
    1	    859  ! 
    1	    860  ! 	X-10	SAD009		STUART A. DAVIDSON	06-OCT-1986
    1	    861  ! 		ADD COMPLETION CODES FOR SNADTF (IBM DATA XFER)
    1	    862  ! 
    1	    863  ! 	X-9	GJA0003		GARY J. ALLISON		29-SEP-1986
    1	    864  ! 		ADD DETACHED RECOVERY ERROR MESSAGES
    1	    865  ! 
    1	    866  ! 	X-8	PMV0008		PETER M. VATNE		24-SEP-1986
    1	    867  ! 		MODIFY RMS$_ACC_AIJ, RMS$_ACC_BIJ, AND RMS$_ACC_ATJ
    1	    868  ! 		TO ALSO OUTPUT THE STV.
    1	    869  ! 
    1	    870  ! 	X-7	JWT0243		JIM TEAGUE		 2-SEP-1986
    1	    871  ! 		ADD NEW ERRORS FOR COLLATED KEYS.
    1	    872  ! 
    1	    873  ! 	X-6	GJA		GARY J. ALLISON		29-JUL-1986
    1	    874  ! 		REMOVE DUPS FROM JNL MERGE.
    1	    875  ! 
    1	    876  ! 	X-5	GJA		GARY J. ALLISON		29-JUL-1986
    1	    877  ! 		MERGE JOURNALING INTO MAINLINE
    1	    878  ! 
    1	    879  ! 		X-3J6	DAS		DAVID A. SOLOMON	14-APR-1986
    1	    880  ! 			REMOVE RMS$_RUH_FILE (USING A GENERAL RUF MESSAGE INSTEAD).
    1	    881  ! 			CHANGE RMS$_RUH TEXT TO NOT HAVE FAO PARAMETERS. ADD
    1	    882  ! 			RMS$_BUG_RURECERR.
    1	    883  ! 	
    1	    884  ! 		X-3J5	JEJ0302		JAMES E JOHNSON		 4-APR-1986
    1	    885  ! 			ADD RMS$_RRF (ERROR DURING RU RECOVERY) AND
    1	    886  ! 			RMS$_RUH/RMS$_RUH_FILE (USED TO FORM TEXT OF RU HANDLER ERRORS
    1	    887  ! 			SENT TO OPCOM).
    1	    888  ! 	
    1	    889  ! 		X-3J4	JEJ0272		JAMES E JOHNSON		11-FEB-1986
    1	    890  ! 			ADD RMS$_RUF, RMS$_BUG_ABORT CODES.
    1	    891  ! 	
    1	    892  ! 		X-3J3	JEJ0237		JAMES E JOHNSON		16-DEC-1985
    1	    893  ! 			ADD RMS$_RUNDOWN CODE
    1	    894  ! 	
    1	    895  ! 		X-3J2	JEJ0205		JAMES E JOHNSON		25-OCT-1985
    1	    896  ! 			ADD JOURNAL SPECIFIC WRTJNL_XXJ ERROR CODES TO REPLACE
    1	    897  ! 			THE GENERIC ERRWRTJNL CODE.
    1	    898  ! 
    1	    899  ! 	X-4	JEJ0216		JAMES E JOHNSON		18-NOV-1985
    1	    900  ! 		MERGE X-3J2 INTO MAIN LINE FOR V4.4.
    1	    901  ! 
    1	    902  ! 		X-3J2	JEJ0205		JAMES E JOHNSON		25-OCT-1985
    1	    903  ! 			ADD JOURNAL SPECIFIC WRTJNL_XXJ ERROR CODES TO REPLACE
    1	    904  ! 			THE GENERIC ERRWRTJNL CODE.

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page   6
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    905  ! 
    1	    906  ! 	X-3	JEJ0161		JAMES E JOHNSON		 9-SEP-1985
    1	    907  ! 		UPDATE RMS JOURNALING MESSAGES.
    1	    908  ! 
    1	    909  ! 	X-2	JWT0212		JIM TEAGUE		 4-SEP-1985
    1	    910  ! 		ADD (WHAT IS FOR NOW) AN INTERNAL STATUS CODE TO 
    1	    911  ! 		DIFFERENTIATE BETWEEN FINDING A DELETED RECORD (DEL)
    1	    912  ! 		AND FINDING IT BUT WITH A DIFFERENT KEY (KEY_MISMATCH).
    1	    913  ! 		
    1	    914  ! 	V03-024	RAS0314		RON SCHAEFER		21-JUN-1984
    1	    915  ! 		WORK OVER THE MESSAGES ONE MORE TIME:  FIX TYPO IN OK_RNF,
    1	    916  ! 		DELETE ACPEOF ERROR, DELETE WSF ERROR.
    1	    917  ! 
    1	    918  ! 	V03-023	RAS0282		RON SCHAEFER		28-MAR-1984
    1	    919  ! 		MINOR TEXT CHANGES AND COMMENTS ADDED.
    1	    920  ! 		DELETE RMS$_COP ERROR.
    1	    921  ! 
    1	    922  ! 	V03-022	DAS0005		DAVID SOLOMON		19-MAR-1984
    1	    923  ! 		REMOVE RMS$_ECHO (NO LONGER NEEDED AS A RESULT OF NEW
    1	    924  ! 		IMPLEMENTATION FOR ECHO SYS$INPUT -> SYS$OUTPUT).
    1	    925  ! 
    1	    926  ! 	V03-021	JWT0150		JIM TEAGUE		01-FEB-1984
    1	    927  ! 		ADD RMS$_IFF FOR TRYING TO WRITE-ACCESS A FILE ON 
    1	    928  ! 		MAGTAPE THAT HAS NON-0 VALUE FOR ANSI BUFFER OFFSET.
    1	    929  ! 
    1	    930  ! 	V03-020	RAS0233		RON SCHAEFER		 9-JAN-1984
    1	    931  ! 		ADD RMS$_NOVALPRS ERROR FOR $SEARCH NOT PRECEDED BY
    1	    932  ! 		VALID $PARSE.
    1	    933  ! 
    1	    934  ! 	V03-019	JWT0148		JIM TEAGUE		20-DEC-1983
    1	    935  ! 		ADD A JNL XAB ERROR FOR CONFLICTING RU ATTRIBUTES
    1	    936  ! 		ON $CREATE: RMS$_XCR.
    1	    937  ! 
    1	    938  ! 	V03-018	RAS0171		RON SCHAEFER		28-JUL-1983
    1	    939  ! 		ADD RMS$_BUSY; A STRUCTURE-LESS ERROR (R0-ONLY STATUS)
    1	    940  ! 		REPLACING TEMP3.
    1	    941  ! 
    1	    942  ! 	V03-017	DAS0004		DAVID SOLOMON		28-JUN-1983
    1	    943  ! 		ADD RMS$_FILEPURGED; ADD RMS$_ACPEOF FOR ZALEWSKI.
    1	    944  ! 
    1	    945  ! 	V03-016	KPL0007		PETER LIEBERWIRTH	 8-JUN-1983
    1	    946  ! 		FIX SPELLING IN JNL ERROR MESSAGES, ADD CJF ERROR WHICH
    1	    947  ! 		WILL SOON SUBSUME COP AND CQE.
    1	    948  ! 
    1	    949  ! 	V03-015	DAS0003		DAVID SOLOMON		18-FEB-1983
    1	    950  ! 		ADD XNF (REPLACING TEMP9), TMR (NEW), LWC (NEW).
    1	    951  ! 
    1	    952  ! 	V03-014	KBT0497		KEITH B. THOMPSON	18-FEB-1983
    1	    953  ! 		ADD INCOMPSHR ERROR (REUSE OF TEMP1 SLOT)
    1	    954  ! 
    1	    955  ! 	V03-013	RAS0120		RON SCHAEFER		 2-FEB-1983
    1	    956  ! 		ADD ECHO PSEUDO-STATUS TO SUPPORT ECHO OF SYS$INPUT
    1	    957  ! 		TO SYS$OUTPUT.
    1	    958  ! 
    1	    959  ! 	V03-012	JWH0174		JEFFRY W. HORN		24-JAN-1983
    1	    960  ! 		ADD CQE AND COP ERRORS.
    1	    961  ! 

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page   7
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	    962  ! 	V03-011	KPL0006		PETER LIEBERWIRTH	 7-JAN-1983
    1	    963  ! 		ADD OK_RULK FOR RECOVERY UNIT SUPPORT.
    1	    964  ! 
    1	    965  ! 		ADD REENT ERROR FOR $RENAME.
    1	    966  ! 		
    1	    967  ! 	V03-009	JWH0153		JEFFREY W. HORN		 8-DEC-1982
    1	    968  ! 		ADD NRU ERROR.
    1	    969  ! 
    1	    970  ! 	V03-008	JWH0152		JEFFREY W. HORN		 8-DEC-1982
    1	    971  ! 		ADD JNS ERROR.
    1	    972  ! 
    1	    973  ! 	V03-007 MCN0002		MARIA DEL C. NASR	15-NOV-1982
    1	    974  ! 		REPLACE ORD ERROR CODE ELIMINATED BY MCN0001, SINCE
    1	    975  ! 		THE NETWORK CODE REFERENCES IT.
    1	    976  ! 
    1	    977  ! 	V03-006 MCN0001		MARIA DEL C. NASR	26-OCT-1982
    1	    978  ! 		PRINT KEY OF REFERENCE OR AREA IDENTIFICATION NUMBER
    1	    979  ! 		INSTEAD OF XAB ADDRESS FOR ERRORS RETURNED DURING
    1	    980  ! 		INDEXED FILE CREATION.  ALSO RENAME ALL UNUSED ERROR
    1	    981  ! 		CODES TO TEMP.
    1	    982  ! 
    1	    983  ! 	V03-005	JWH0102		JEFFREY W. HORN		24-SEP-1982
    1	    984  ! 		ADD RUP ERROR.
    1	    985  ! 
    1	    986  ! 	V03-004	RAS0095		RON SCHAEFER		 7-SEP-1982
    1	    987  ! 		ADD OVRDSKQUOTA ERROR.
    1	    988  ! 
    1	    989  ! 	V03-002	JWH0002		JEFFREY W. HORN		26-JUL-1982
    1	    990  ! 		CONVERT TO .MSG FORMAT.   ADD RUM ERROR.
    1	    991  ! 
    1	    992  ! 	V03-001	JWH0001		JEFFREY W. HORN		20-JUL-1982
    1	    993  ! 		ADD JNF, JOP, AND NOJ ERRORS.
    1	    994  ! 
    1	    995  ! 	V02-042	KPL0005		PETER LIEBERWIRTH	 4-FEB-1982
    1	    996  ! 		ADD ERROR MESSAGES RMS$_EXENQLM AND RMS$_DEADLOCK
    1	    997  ! 		CORRECTLY.
    1	    998  ! 
    1	    999  ! 	V02-041	CDS0001		C D SAETHER	24-JAN-1982
    1	   1000  ! 		ADD GBC AND CRMP ERRORS.
    1	   1001  ! 
    1	   1002  ! 	V02-040	JAK0069		J A KRYCKA	15-JAN-1982
    1	   1003  ! 		ADD SUPPORT AND NETFAIL ERROR CODES.
    1	   1004  ! 
    1	   1005  ! 	V02-039	JAK0068		J A KRYCKA	31-DEC-1981
    1	   1006  ! 		MODIFY TEXT FOR SUP, NET, BUG_DAP, AND ENV ERROR MESSAGES.
    1	   1007  ! 
    1	   1008  ! 	V02-038 LJA0001		LAURIE ANDERSON 20-DEC-1981
    1	   1009  ! 		MODIFIED SOME MESSAGES TO READ BETTER.
    1	   1010  ! 
    1	   1011  ! 	V02-037	JAK0063		J A KRYCKA	31-AUG-1981
    1	   1012  ! 		ADD CRE_STM SUCCESS CODE.
    1	   1013  ! 
    1	   1014  ! 	V02-036	KPL0004		PETER LIEBERWIRTH	13-JAN-1981
    1	   1015  ! 		ADD ENQ SEVERE ERROR MESSAGE, TO INDICATE $ENQ/$DEQ FAILURE.
    1	   1016  ! 		ALSO ADD SUCCESS CODES OK_RRL, AND OK_WAT.
    1	   1017  ! 
    1	   1018  ! 	V02-035	REFORMAT	J A KRYCKA	30-JUL-1980

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page   8
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1019  ! 
    1	   1020  ! --
    1	   1021 	PARAMETER RMS$_FACILITY = '00000001'X
    1	   1022 	PARAMETER RMS$V_STVSTATUS = '0000000E'X	 !  MOVE TO BIT 14 OF THE
    1	   1023  !  STATUS CODE IT INDICATES
    1	   1024  !  THAT STV CONTAINS A SECONDARY
    1	   1025  !  STATUS CODE.
    1	   1026 	PARAMETER RMS$_SUC = '00010001'X
    1	   1027 	PARAMETER RMS$_NORMAL = '00010001'X
    1	   1028  ! +
    1	   1029  ! 
    1	   1030  ! 	SUCCESS CODES
    1	   1031  ! 
    1	   1032  ! -
    1	   1033  !  BIT 16 = BIT 15 = 1
    1	   1034 	PARAMETER RMS$_STALL = '00018001'X
    1	   1035  !  (NOTE: USER NEVER RECEIVES THIS CODE)
    1	   1036 	PARAMETER RMS$_PENDING = '00018009'X
    1	   1037 	PARAMETER RMS$_OK_DUP = '00018011'X
    1	   1038 	PARAMETER RMS$_OK_IDX = '00018019'X
    1	   1039  !   (RECORD HAS BEEN INSERTED, BUT INDEX STRUCTURE IS NO LONGER
    1	   1040  !   OPTIMAL.)
    1	   1041 	PARAMETER RMS$_OK_RLK = '00018021'X
    1	   1042  !  (BECAUSE LOCKER SET RLK IN ROP FIELD WHEN RECORD WAS LOCKED.)
    1	   1043 	PARAMETER RMS$_OK_RRL = '00018029'X
    1	   1044  !  (BECAUSE READER SET RRL IN ROP FIELD WHEN ACCESSING RECORD.)
    1	   1045  !  (THIS CODE USED TO BE OK_RRV)
    1	   1046  ! OK_RRV	;MSG <record was inserted successfully in primary>
    1	   1047  !   (BUT IT MAY NOT BE ACCESSIBLE VIA ONE-OR-MORE SECONDARY KEYS,
    1	   1048  !   AND NOT BY RFA ADDRESSING. FILE RE-ORGANIZATION RECOMMENDED!)
    1	   1049 	PARAMETER RMS$_KFF = '00018031'X
    1	   1050 	PARAMETER RMS$_OK_ALK = '00018039'X
    1	   1051 	PARAMETER RMS$_OK_DEL = '00018041'X
    1	   1052 	PARAMETER RMS$_OK_RNF = '00018049'X
    1	   1053 	PARAMETER RMS$_OK_LIM = '00018051'X
    1	   1054 	PARAMETER RMS$_OK_NOP = '00018059'X
    1	   1055 	PARAMETER RMS$_OK_WAT = '00018061'X
    1	   1056  !  (BECAUSE WAT BIT IN ROP WAS SET AND RECORD WAS ALREADY
    1	   1057  !  LOCKED.)
    1	   1058 	PARAMETER RMS$_CRE_STM = '00018069'X
    1	   1059 	PARAMETER RMS$_OK_RULK = '00018071'X
    1	   1060 	PARAMETER RMS$_SYNCH = '00018079'X
    1	   1061 	PARAMETER RMS$_OK_ACT = '00018081'X
    1	   1062 	PARAMETER RMS$_OK_NOCURTID = '00018089'X
    1	   1063  ! +
    1	   1064  ! 
    1	   1065  ! 	SUCCESS CODES PASSED THRU FROM DRIVERS AND ACP -	BIT 15 = 0
    1	   1066  ! 
    1	   1067  ! -
    1	   1068 	PARAMETER RMS$_CONTROLC = '00010651'X	 !  TERMINAL I/O ABORTED DUE TO CTRL/C
    1	   1069 	PARAMETER RMS$_CONTROLO = '00010609'X
    1	   1070  !  TERMINAL I/O ABORTED DUE TO CTRL/O
    1	   1071 	PARAMETER RMS$_CONTROLY = '00010611'X
    1	   1072  !  TERMINAL I/O ABORTED DUE TO CTRL/Y
    1	   1073 	PARAMETER RMS$_CREATED = '00010619'X
    1	   1074  !  FILE WAS CREATED, NOT OPENED
    1	   1075 	PARAMETER RMS$_SUPERSEDE = '00010631'X

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page   9
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1076  !  CREATED FILE SUPERSEDED EXISTING VERSION
    1	   1077 	PARAMETER RMS$_OVRDSKQUOTA = '00010669'X
    1	   1078  !  DISK USAGE EXCEEDS DISK QUOTA
    1	   1079 	PARAMETER RMS$_FILEPURGED = '00010679'X
    1	   1080  !  CREATE FILE CAUSED OLDEST FILE
    1	   1081  !  VERSION TO BE PURGED
    1	   1082  ! +
    1	   1083  ! 
    1	   1084  ! 	WARNING CODES
    1	   1085  ! 
    1	   1086  ! -
    1	   1087  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1088 	PARAMETER RMS$_BOF = '00018198'X
    1	   1089 	PARAMETER RMS$_RNL = '000181A0'X
    1	   1090 	PARAMETER RMS$_RTB = '000181A8'X
    1	   1091 	PARAMETER RMS$_TMO = '000181B0'X
    1	   1092 	PARAMETER RMS$_TNS = '000181B8'X
    1	   1093 	PARAMETER RMS$_BES = '000181C0'X
    1	   1094 	PARAMETER RMS$_PES = '000181C8'X
    1	   1095  ! +
    1	   1096  ! 
    1	   1097  ! 	ERROR CODES - WITHOUT STV (THAT IS, STV MAY BE USED BUT NO ASSOCIATED
    1	   1098  ! 		      CONDITION CODE IS IN STV)
    1	   1099  ! 
    1	   1100  ! -
    1	   1101  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1102 	PARAMETER RMS$_ACT = '0001825A'X
    1	   1103 	PARAMETER RMS$_DEL = '00018262'X
    1	   1104 	PARAMETER RMS$_INCOMPSHR = '0001826A'X
    1	   1105 	PARAMETER RMS$_DNR = '00018272'X
    1	   1106 	PARAMETER RMS$_EOF = '0001827A'X
    1	   1107 	PARAMETER RMS$_FEX = '00018282'X
    1	   1108 	PARAMETER RMS$_FLK = '0001828A'X
    1	   1109 	PARAMETER RMS$_FNF = '00018292'X
    1	   1110 	PARAMETER RMS$_PRV = '0001829A'X
    1	   1111 	PARAMETER RMS$_REX = '000182A2'X
    1	   1112 	PARAMETER RMS$_RLK = '000182AA'X
    1	   1113 	PARAMETER RMS$_RNF = '000182B2'X
    1	   1114  !   (RECORD NEVER WAS IN FILE, OR HAS BEEN DELETED.)
    1	   1115 	PARAMETER RMS$_WLK = '000182BA'X
    1	   1116 	PARAMETER RMS$_EXP = '000182C2'X
    1	   1117 	PARAMETER RMS$_NMF = '000182CA'X
    1	   1118 	PARAMETER RMS$_SUP = '000182D2'X
    1	   1119  !  (NOTE THAT SUPPORT HAS REPLACED SUP EXCEPT WHEN RMS CANNOT
    1	   1120  !  MAP THE DAP STATUS CODE INTO A FAL STATUS CODE.)
    1	   1121  !  (NOTE ALSO THAT SUP SHOULD HAVE BEEN DEFINED AS A SEVERE
    1	   1122  !  ERROR CODE. HOWEVER, SUPPORT IS A SEVERE ERROR CODE.)
    1	   1123 	PARAMETER RMS$_RSA = '000182DA'X
    1	   1124 	PARAMETER RMS$_CRC = '000182E2'X
    1	   1125 	PARAMETER RMS$_WCC = '000182EA'X
    1	   1126 	PARAMETER RMS$_IDR = '000182F2'X
    1	   1127 	PARAMETER RMS$_LWC = '000182FA'X
    1	   1128 	PARAMETER RMS$_UNUSED1 = '00018302'X
    1	   1129 	PARAMETER RMS$_NOVALPRS = '0001830A'X
    1	   1130 	PARAMETER RMS$_KEY_MISMATCH = '00018312'X
    1	   1131 	PARAMETER RMS$_RUH = '0001831A'X
    1	   1132 	PARAMETER RMS$_JND = '00018322'X

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page  10
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1133 	PARAMETER RMS$_BADPHASE = '0001832A'X
    1	   1134 	PARAMETER RMS$_TOWDR = '00018332'X
    1	   1135 	PARAMETER RMS$_NEXDR = '0001833A'X
    1	   1136 	PARAMETER RMS$_INVDRMSG = '00018342'X
    1	   1137 	PARAMETER RMS$_RU_ACTIVE = '0001834A'X
    1	   1138 	PARAMETER RMS$_UNKRUFAC = '00018352'X
    1	   1139 	PARAMETER RMS$_LIMBO = '0001835A'X
    1	   1140 	PARAMETER RMS$_IVATRACE = '00018362'X
    1	   1141 	PARAMETER RMS$_OPNOTSUP = '0001836A'X
    1	   1142 	PARAMETER RMS$_EXTNOTFOU = '00018372'X
    1	   1143 	PARAMETER RMS$_EXT_ERR = '0001837A'X
    1	   1144 	PARAMETER RMS$_SEMANTICS = '00018382'X
    1	   1145 	PARAMETER RMS$_LSCAN = '0001838A'X
    1	   1146 	PARAMETER RMS$_ROOTSRCH = '00018392'X
    1	   1147 	PARAMETER RMS$_IDXSEARCH = '0001839A'X
    1	   1148 	PARAMETER RMS$_NETBTS = '000183A2'X
    1	   1149  ! +
    1	   1150  ! 
    1	   1151  ! 	ERROR CODES - WITH STV ERROR CODE (THAT IS, STV CONTAINS AN ASSOCIATED CONDITION CODE)
    1	   1152  ! 
    1	   1153  ! -
    1	   1154  !  BIT 16 = BIT 15 = BIT 14 = 1
    1	   1155 	PARAMETER RMS$_ACC = '0001C002'X
    1	   1156 	PARAMETER RMS$_CRE = '0001C00A'X
    1	   1157 	PARAMETER RMS$_DAC = '0001C012'X
    1	   1158 	PARAMETER RMS$_ENT = '0001C01A'X
    1	   1159 	PARAMETER RMS$_EXT = '0001C022'X
    1	   1160 	PARAMETER RMS$_FND = '0001C02A'X
    1	   1161 	PARAMETER RMS$_MKD = '0001C032'X
    1	   1162 	PARAMETER RMS$_DPE = '0001C03A'X
    1	   1163 	PARAMETER RMS$_SPL = '0001C042'X
    1	   1164 	PARAMETER RMS$_DNF = '0001C04A'X
    1	   1165 	PARAMETER RMS$_RUF = '0001C052'X
    1	   1166 	PARAMETER RMS$_WRTJNL_AIJ = '0001C05A'X
    1	   1167 	PARAMETER RMS$_WRTJNL_BIJ = '0001C062'X
    1	   1168 	PARAMETER RMS$_WRTJNL_ATJ = '0001C06A'X
    1	   1169 	PARAMETER RMS$_WRTJNL_RUJ = '0001C072'X
    1	   1170 	PARAMETER RMS$_RRF = '0001C07A'X
    1	   1171 	PARAMETER RMS$_DDTM_ERR = '0001C082'X
    1	   1172  ! +
    1	   1173  ! 
    1	   1174  ! 	SEVERE ERROR CODES - WITHOUT STV (THAT IS, STV MAY BE USED BUT NO ASSOCIATED
    1	   1175  ! 			     CONDITION CODE IS IN STV)
    1	   1176  ! 
    1	   1177  ! -
    1	   1178  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1179 	PARAMETER RMS$_DTFCDDREC = '000183EC'X
    1	   1180 	PARAMETER RMS$_AID = '000183F4'X
    1	   1181 	PARAMETER RMS$_ALN = '000183FC'X
    1	   1182 	PARAMETER RMS$_ALQ = '00018404'X
    1	   1183 	PARAMETER RMS$_ANI = '0001840C'X
    1	   1184 	PARAMETER RMS$_AOP = '00018414'X
    1	   1185 	PARAMETER RMS$_BKS = '0001841C'X
    1	   1186 	PARAMETER RMS$_BKZ = '00018424'X
    1	   1187 	PARAMETER RMS$_BLN = '0001842C'X
    1	   1188 	PARAMETER RMS$_BUG = '00018434'X
    1	   1189 	PARAMETER RMS$_BUG_DDI = '0001843C'X

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page  11
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1190 	PARAMETER RMS$_BUG_DAP = '00018444'X
    1	   1191 	PARAMETER RMS$_BUG_RU_ACTIVE = '0001844C'X
    1	   1192 	PARAMETER RMS$_BUG_RURECERR = '00018454'X
    1	   1193 	PARAMETER RMS$_BUG_FLUSH_JNL_FAILED = '0001845C'X
    1	   1194 	PARAMETER RMS$_BUG_RU_ABORT_FAIL = '00018464'X
    1	   1195 	PARAMETER RMS$_BUG_RU_COMMIT_FAIL = '0001846C'X
    1	   1196 	PARAMETER RMS$_BUG_XX6 = '00018474'X
    1	   1197 	PARAMETER RMS$_BUG_XX7 = '0001847C'X
    1	   1198 	PARAMETER RMS$_BUG_XX8 = '00018484'X
    1	   1199 	PARAMETER RMS$_BUSY = '0001848C'X
    1	   1200 	PARAMETER RMS$_CCR = '00018494'X
    1	   1201 	PARAMETER RMS$_CHG = '0001849C'X
    1	   1202 	PARAMETER RMS$_CHK = '000184A4'X
    1	   1203 	PARAMETER RMS$_COD = '000184AC'X
    1	   1204 	PARAMETER RMS$_CUR = '000184B4'X
    1	   1205 	PARAMETER RMS$_DAN = '000184BC'X
    1	   1206 	PARAMETER RMS$_DEV = '000184C4'X
    1	   1207 	PARAMETER RMS$_DIR = '000184CC'X
    1	   1208 	PARAMETER RMS$_DME = '000184D4'X
    1	   1209 	PARAMETER RMS$_DNA = '000184DC'X
    1	   1210 	PARAMETER RMS$_DTP = '000184E4'X
    1	   1211 	PARAMETER RMS$_DUP = '000184EC'X
    1	   1212 	PARAMETER RMS$_DVI = '000184F4'X
    1	   1213 	PARAMETER RMS$_ESA = '000184FC'X
    1	   1214 	PARAMETER RMS$_ESS = '00018504'X
    1	   1215 	PARAMETER RMS$_FAB = '0001850C'X
    1	   1216 	PARAMETER RMS$_FAC = '00018514'X
    1	   1217 	PARAMETER RMS$_FLG = '0001851C'X
    1	   1218 	PARAMETER RMS$_FNA = '00018524'X
    1	   1219 	PARAMETER RMS$_FNM = '0001852C'X
    1	   1220 	PARAMETER RMS$_FSZ = '00018534'X
    1	   1221 	PARAMETER RMS$_FOP = '0001853C'X
    1	   1222 	PARAMETER RMS$_FUL = '00018544'X
    1	   1223 	PARAMETER RMS$_IAL = '0001854C'X
    1	   1224 	PARAMETER RMS$_IAN = '00018554'X
    1	   1225 	PARAMETER RMS$_IDX = '0001855C'X
    1	   1226 	PARAMETER RMS$_IFI = '00018564'X
    1	   1227 	PARAMETER RMS$_IMX = '0001856C'X
    1	   1228 	PARAMETER RMS$_IOP = '00018574'X
    1	   1229 	PARAMETER RMS$_IRC = '0001857C'X
    1	   1230 	PARAMETER RMS$_ISI = '00018584'X
    1	   1231 	PARAMETER RMS$_KBF = '0001858C'X
    1	   1232 	PARAMETER RMS$_KEY = '00018594'X
    1	   1233 	PARAMETER RMS$_KRF = '0001859C'X
    1	   1234 	PARAMETER RMS$_KSZ = '000185A4'X
    1	   1235 	PARAMETER RMS$_LAN = '000185AC'X
    1	   1236 	PARAMETER RMS$_RUNDOWN = '000185B4'X
    1	   1237 	PARAMETER RMS$_LNE = '000185BC'X
    1	   1238 	PARAMETER RMS$_DTFCVT = '000185C4'X
    1	   1239 	PARAMETER RMS$_MRN = '000185CC'X
    1	   1240 	PARAMETER RMS$_MRS = '000185D4'X
    1	   1241 	PARAMETER RMS$_NAM = '000185DC'X
    1	   1242 	PARAMETER RMS$_NEF = '000185E4'X
    1	   1243 	PARAMETER RMS$_DTFQUASYN = '000185EC'X
    1	   1244 	PARAMETER RMS$_NOD = '000185F4'X
    1	   1245 	PARAMETER RMS$_NPK = '000185FC'X
    1	   1246 	PARAMETER RMS$_ORD = '00018604'X	 ! ! NOT USED AS OF V4

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page  12
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1247 	PARAMETER RMS$_ORG = '0001860C'X
    1	   1248 	PARAMETER RMS$_PBF = '00018614'X
    1	   1249 	PARAMETER RMS$_PLG = '0001861C'X
    1	   1250 	PARAMETER RMS$_POS = '00018624'X
    1	   1251 	PARAMETER RMS$_DTFQUAVAL = '0001862C'X
    1	   1252 	PARAMETER RMS$_QUO = '00018634'X
    1	   1253 	PARAMETER RMS$_RAB = '0001863C'X
    1	   1254 	PARAMETER RMS$_RAC = '00018644'X
    1	   1255 	PARAMETER RMS$_RAT = '0001864C'X
    1	   1256 	PARAMETER RMS$_RBF = '00018654'X
    1	   1257 	PARAMETER RMS$_RFA = '0001865C'X
    1	   1258 	PARAMETER RMS$_RFM = '00018664'X
    1	   1259 	PARAMETER RMS$_RHB = '0001866C'X
    1	   1260 	PARAMETER RMS$_RLF = '00018674'X
    1	   1261 	PARAMETER RMS$_ROP = '0001867C'X
    1	   1262 	PARAMETER RMS$_RRV = '00018684'X
    1	   1263 	PARAMETER RMS$_RVU = '0001868C'X
    1	   1264 	PARAMETER RMS$_RSS = '00018694'X
    1	   1265 	PARAMETER RMS$_RST = '0001869C'X
    1	   1266 	PARAMETER RMS$_RSZ = '000186A4'X
    1	   1267 	PARAMETER RMS$_SEQ = '000186AC'X
    1	   1268 	PARAMETER RMS$_SHR = '000186B4'X
    1	   1269 	PARAMETER RMS$_SIZ = '000186BC'X
    1	   1270 	PARAMETER RMS$_SQO = '000186C4'X
    1	   1271 	PARAMETER RMS$_DTFSESEST = '000186CC'X
    1	   1272 	PARAMETER RMS$_SYN = '000186D4'X
    1	   1273 	PARAMETER RMS$_TRE = '000186DC'X
    1	   1274 	PARAMETER RMS$_TYP = '000186E4'X
    1	   1275 	PARAMETER RMS$_UBF = '000186EC'X
    1	   1276 	PARAMETER RMS$_USZ = '000186F4'X
    1	   1277 	PARAMETER RMS$_VER = '000186FC'X
    1	   1278 	PARAMETER RMS$_XNF = '00018704'X
    1	   1279 	PARAMETER RMS$_XAB = '0001870C'X
    1	   1280 	PARAMETER RMS$_ESL = '00018714'X
    1	   1281 	PARAMETER RMS$_DTFSESTER = '0001871C'X
    1	   1282 	PARAMETER RMS$_ENV = '00018724'X
    1	   1283 	PARAMETER RMS$_PLV = '0001872C'X
    1	   1284 	PARAMETER RMS$_MBC = '00018734'X
    1	   1285 	PARAMETER RMS$_RSL = '0001873C'X
    1	   1286 	PARAMETER RMS$_WLD = '00018744'X
    1	   1287 	PARAMETER RMS$_NET = '0001874C'X	 !  (NOTE THAT NETFAIL HAS REPLACED NET EXCEPT WHEN RMS CANNOT
    1	   1288  !  MAP THE DAP STATUS CODE INTO A FAL STATUS CODE.)
    1	   1289 	PARAMETER RMS$_IBF = '00018754'X
    1	   1290 	PARAMETER RMS$_REF = '0001875C'X
    1	   1291 	PARAMETER RMS$_IFL = '00018764'X
    1	   1292 	PARAMETER RMS$_DFL = '0001876C'X
    1	   1293 	PARAMETER RMS$_KNM = '00018774'X
    1	   1294 	PARAMETER RMS$_IBK = '0001877C'X
    1	   1295 	PARAMETER RMS$_KSI = '00018784'X
    1	   1296 	PARAMETER RMS$_LEX = '0001878C'X
    1	   1297 	PARAMETER RMS$_SEG = '00018794'X
    1	   1298 	PARAMETER RMS$_SNE = '0001879C'X	 ! ! NOT USED AS OF V4
    1	   1299 	PARAMETER RMS$_SPE = '000187A4'X	 ! ! NOT USED AS OF V4
    1	   1300 	PARAMETER RMS$_UPI = '000187AC'X
    1	   1301 	PARAMETER RMS$_ACS = '000187B4'X
    1	   1302 	PARAMETER RMS$_STR = '000187BC'X
    1	   1303 	PARAMETER RMS$_FTM = '000187C4'X

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page  13
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1304 	PARAMETER RMS$_GBC = '000187CC'X
    1	   1305 	PARAMETER RMS$_DEADLOCK = '000187D4'X
    1	   1306 	PARAMETER RMS$_EXENQLM = '000187DC'X
    1	   1307 	PARAMETER RMS$_JOP = '000187E4'X
    1	   1308 	PARAMETER RMS$_RUM = '000187EC'X
    1	   1309 	PARAMETER RMS$_JNS = '000187F4'X
    1	   1310 	PARAMETER RMS$_NRU = '000187FC'X
    1	   1311 	PARAMETER RMS$_IFF = '00018804'X
    1	   1312 	PARAMETER RMS$_DTFTRATBL = '0001880C'X
    1	   1313 	PARAMETER RMS$_DTFUNSTYP = '00018814'X
    1	   1314 	PARAMETER RMS$_DTFVERMIS = '0001881C'X
    1	   1315  ! +
    1	   1316  ! 
    1	   1317  ! 	ERROR CODES - WITHOUT STV
    1	   1318  ! 
    1	   1319  ! 	  DTFACC AND DTFCRE WERE ORIGINALLY INCLUDED IN THIS FATAL SEVERITY 
    1	   1320  ! 	  (NO STV) GROUPING.  IN ORDER TO CHANGE THEIR SEVERITY TO ERROR 
    1	   1321  ! 	  (NO STV) AND RETAIN THE SAME MESSAGE CODE VALUE, THE FOLLOWING 
    1	   1322  ! 	  SHIFTS IN SEVERITY FROM FATAL TO ERROR AND THEN BACK AGAIN ARE
    1	   1323  ! 	  DONE, WHILE RETAINING THE SAME ORIGINAL BASE ASSOCIATED WITH EACH.
    1	   1324  ! 
    1	   1325  ! -
    1	   1326  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1327 	PARAMETER RMS$_DTFACC = '00018822'X
    1	   1328  ! +
    1	   1329  ! 
    1	   1330  ! 	SEVERE ERROR CODES - WITHOUT STV
    1	   1331  ! 
    1	   1332  ! -
    1	   1333  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1334 	PARAMETER RMS$_BOGUSCOL = '0001882C'X
    1	   1335 	PARAMETER RMS$_ERRREADCOL = '00018834'X
    1	   1336 	PARAMETER RMS$_ERRWRITECOL = '0001883C'X
    1	   1337 	PARAMETER RMS$_SNS = '00018844'X
    1	   1338 	PARAMETER RMS$_NOEXTEND = '0001884C'X	 ! +
    1	   1339  ! 
    1	   1340  ! 	ERROR CODES - WITHOUT STV
    1	   1341  ! 
    1	   1342  ! -
    1	   1343  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1344 	PARAMETER RMS$_DTFCRE = '00018852'X
    1	   1345  ! +
    1	   1346  ! 
    1	   1347  ! 	SEVERE ERROR CODES - WITHOUT STV
    1	   1348  ! 
    1	   1349  ! -
    1	   1350  !  BIT 16 = BIT 15 = 1, BIT 14 = 0
    1	   1351 	PARAMETER RMS$_DELJNS = '0001885C'X
    1	   1352 	PARAMETER RMS$_NOTSAMEJNL = '00018864'X
    1	   1353 	PARAMETER RMS$_SNPPF = '0001886C'X
    1	   1354  ! +
    1	   1355  ! 
    1	   1356  ! 	SEVERE ERRORS - WITH STV ERROR CODE (THAT IS, STV CONTAINS AN ASSOCIATED CONDITION CODE)
    1	   1357  ! 
    1	   1358  ! -
    1	   1359  !  BIT 16 = BIT 15 = BIT 14 = 1
    1	   1360 	PARAMETER RMS$_ATR = '0001C0CC'X

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page  14
1.14                                                             4-NOV-1994 21:24:10    SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1($RMSDEF)

    1	   1361 	PARAMETER RMS$_ATW = '0001C0D4'X
    1	   1362 	PARAMETER RMS$_CCF = '0001C0DC'X
    1	   1363 	PARAMETER RMS$_CDA = '0001C0E4'X
    1	   1364 	PARAMETER RMS$_CHN = '0001C0EC'X
    1	   1365 	PARAMETER RMS$_RER = '0001C0F4'X
    1	   1366 	PARAMETER RMS$_RMV = '0001C0FC'X
    1	   1367 	PARAMETER RMS$_RPL = '0001C104'X
    1	   1368 	PARAMETER RMS$_SYS = '0001C10C'X
    1	   1369 	PARAMETER RMS$_WER = '0001C114'X
    1	   1370 	PARAMETER RMS$_WPL = '0001C11C'X
    1	   1371 	PARAMETER RMS$_IFA = '0001C124'X
    1	   1372 	PARAMETER RMS$_WBE = '0001C12C'X
    1	   1373 	PARAMETER RMS$_ENQ = '0001C134'X
    1	   1374 	PARAMETER RMS$_NETFAIL = '0001C13C'X
    1	   1375 	PARAMETER RMS$_SUPPORT = '0001C144'X
    1	   1376 	PARAMETER RMS$_CRMP = '0001C14C'X
    1	   1377 	PARAMETER RMS$_DTFCFGFIL = '0001C154'X
    1	   1378 	PARAMETER RMS$_REENT = '0001C15C'X
    1	   1379 	PARAMETER RMS$_ACC_RUJ = '0001C164'X
    1	   1380 	PARAMETER RMS$_TMR = '0001C16C'X
    1	   1381 	PARAMETER RMS$_ACC_AIJ = '0001C174'X
    1	   1382 	PARAMETER RMS$_ACC_BIJ = '0001C17C'X
    1	   1383 	PARAMETER RMS$_ACC_ATJ = '0001C184'X
    1	   1384 	PARAMETER RMS$_DTFDEFFIL = '0001C18C'X
    1	   1385 	PARAMETER RMS$_DTFREGFIL = '0001C194'X
    1	   1386 	PARAMETER RMS$_JNLNOTAUTH = '0001C19C'X
    1	   1387 CDEC$ END OPTIONS
    1	   1388 
	   1389       INTEGER*4 STATUS,L1_LUN/19/,STICS_RATES(179),D_RATES(17)
	   1390       INTEGER*4 WIND_DECOMPRESS,VSTEP,MONTH,DAYOFMONTH
	   1391       REAL*4 D1/6.190722/,D2/1.1225857/      ! Default values used for E/Q calculation
	   1392       REAL*4 E_OVER_Q
	   1393       CHARACTER L1FILENAME*80, HMRNAME*16, SMRNAME*19, BRNAME*9
	   1394       CHARACTER FULL_L1_NAME*80, FIFO*3, TGS*3, RATEFLAG*1
	   1395       CHARACTER*17 MODE(10) /'Science mode     ','Engineering mode ',
	   1396      &                       'Maneuver mode    ','Contingency mode ',
	   1397      &                       'Science mode     ','Engineering mode ',
	   1398      &                       'Maneuver mode    ','Contingency mode ',
	   1399      &                       'Transitional mode','Unknown mode     '/,
	   1400      &             MODE_AT_START
	   1401       LOGICAL*1 BITRATE
	   1402       LOGICAL STARTFOUND,ENDFOUND,USE_SC_CLOCK,COMPARE_TIME_GE,GOODSPIN
	   1403       INTEGER I,J,K,L,M,N,NN,P,CNTR,ITEMP,ITEMP2,NAMELEN,YR2DIGIT,INCREMENT,SUMBR(0:2),SUMHMR,SUMSMR
	   1404       LOGICAL CODE_C,CODE_C2,COMP_CODE  !Compression codes 
	   1405 C
	   1406 C MASS parameters
	   1407 C
	   1408       REAL*4  BULK_SPEED,		!Solar wind speed
	   1409      .	      BULK_UNCER,		!Uncertainty in solar wind speed
	   1410      .	      MASS_HITS,		!Number of valid MASS hits
	   1411      .	      MASS_SPEED_AVG,		!Average MASS speed  
	   1412      .	      MASS_SPEED_SUM,		!Sum of MASS speeds
	   1413      .	      MASS_THERM_AVG,		!Average MASS thermal velocity
	   1414      .	      MASS_THERM_SUM		!Sum of MASS thermal velocities
	   1415 C
	   1416 C SWE parameters
	   1417 C

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page  15
1.14                                                             6-DEC-1996 15:23:37    [WIND.SOFTWARE.STICS]MASS_SWE_SPD.FOR;11

	   1418       REAL*4   GSE_POS_SWE(3),		!Spaceraft position in GSE coordinates.
	   1419      .	       GSE_VEL(3),		!H+ solar wind speed in cartesian coord.
	   1420      .	       GSE_VEL_P(3),		!"   "     "     "    " spherical   "
	   1421      .	       H_DENSITY,		!H+ density                   
	   1422      .	       SWE_HITS,		!Number of valid SWE hits
	   1423      .	       SWE_SPEED_AVG,		!Average SWE speed  
	   1424      .	       SWE_SPEED_SUM,		!Sum of SWE speeds
	   1425      .	       SWE_THERM_AVG,		!Average SWE thermal velocity
	   1426      .	       SWE_THERM_SUM,		!Sum of SWE thermal velocities
	   1427      .	       THERM_VEL,		!Thermal velocity
	   1428      .	       TIME_DIFF		!Time difference in seconds between SWE time 
	   1429 C					 and time sent to SWE subroutine.
	   1430 
	   1431 C S/C position
	   1432       REAL*4 X1_GSE,Y1_GSE,Z1_GSE,     	!Start position
	   1433      .       X2_GSE,Y2_GSE,Z2_GSE,	!Stop position
	   1434      .       Re/6371.0/			!1 Re = 6371 km            
	   1435 
	   1436       INTEGER*4 ERR_SPD_FLAG,		!Set to 1 for bad speed
	   1437      .		FIRSTSPEED/0/,		!Set to -1 after getting speed at start time
	   1438      .          IFILE,			!Number of L1 files used
	   1439      .          INTERVAL,               !Number of Science Records for interval
	   1440      .          OFILE,			!Output file unit number
	   1441      .          OPENMODE,		!Variable for opening next file
	   1442      .          Q,			!Increments for each new interval or data gap
	   1443      .          RATENUM,		!Number of rates selected
	   1444      .          SR_INTERVAL		!Boundary for Science Record interval
	   1445 
	   1446 C     naming the output file
	   1447       LOGICAL BRACK                     !A variable which is .TRUE. if there is
	   1448 C                                       a set of square brackets in the input file name.
	   1449 C                                       If there is, they, and everything between them,
	   1450 C                                       will be stripped out so that the output file is
	   1451 C                                       created in the user's account and not on the
	   1452 C                                       account from which we read the data.
	   1453       INTEGER*4 NINDEX,                 !used in rearranging the input file name to
	   1454 C                                       create the output file name.
	   1455      .          JSAVE                   !used in rearranging the input file name to
	   1456 C                                       create the output file name.
	   1457       CHARACTER*90 LISFIL               !holds the name of the input file
	   1458       CHARACTER INPUTFILES(1:100)*90, 	!L1 filename array for multiple inputs   
	   1459      .          OUTFILENAME*90
	   1460       CHARACTER USERNAME*40,		!User defined output filename
	   1461      .		ERR_MESSAGE*80		!Error message for bad speed
	   1462 
	   1463       CHARACTER RUN_TIME*8, RUN_DATE*9	!run time and date
	   1464  
	   1465       LOGICAL FIRSTFILE,		!Set to true if this is the 1st input file
	   1466      .	      FIRST_TIME		!Set to true for 1st time interval
	   1467 C
	   1468       RECORD /CORE/ SCI
	   1469       RECORD /HDBstr/ HDB
	   1470       RECORD /ST_RATE/ STICS_RATE
	   1471       RECORD /ST_PHA/ STICS_PHA
	   1472       RECORD /T/ START, END, TIME_TO_USE, INT_START_TIME
	   1473 
	   1474       RECORD /MA_RATE/ MASS_RATE   ! receives data on rates from MASS sensor

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page  16
1.14                                                             6-DEC-1996 15:23:37    [WIND.SOFTWARE.STICS]MASS_SWE_SPD.FOR;11

	   1475       RECORD /MA_PHA/ MASS_PHA     ! receives data on tof's from the mass sensor
	   1476 
	   1477 C
	   1478 C Get input L1 filename
	   1479 C
	   1480       L1FILENAME = 'DATA_DIR:WI*L1*.DAT'
	   1481       CALL WIND_GET_FILENAME(L1FILENAME, STATUS)
	   1482       IF(STATUS.NE.1)STOP
	   1483 
	   1484       FIRSTFILE = .TRUE.
	   1485       FIRST_TIME = .TRUE.
	   1486 C
	   1487 C Prompt user for start and stop times
	   1488 C
	   1489       TYPE 10
	   1490   10  FORMAT(' Enter Start time( -1/ means whole file) - Year,Month,Day,Hour,Min,Sec: '$) 
	   1491       ACCEPT*, START.YEAR,MONTH,DAYOFMONTH,START.HR,START.MIN,START.SEC
	   1492       IF(START.YEAR.GE.0)THEN
	   1493 C
	   1494 C Convert month and day to day of year.
	   1495 C
	   1496         CALL CNVRT_T_YRMONDAY_TO_YEARDAY( START, MONTH, DAYOFMONTH)
	   1497         IF(START.YEAR.LT.100)START.YEAR=START.YEAR+1900        ! Allow for 2-digit years
	   1498         IF(START.YEAR.LT.1980)START.YEAR=START.YEAR+100        ! Allow for years beyond 1999
	   1499         TYPE 12
	   1500   12    FORMAT(' Enter End time - Year,Month,Day,Hour,Min,Sec: '$) 
	   1501         ACCEPT*, END.YEAR,MONTH,DAYOFMONTH,END.HR,END.MIN,END.SEC
	   1502 C
	   1503 C Convert month and day to day of year.
	   1504 C
	   1505         CALL CNVRT_T_YRMONDAY_TO_YEARDAY( END, MONTH, DAYOFMONTH)
	   1506         IF(END.YEAR.LT.100)END.YEAR=END.YEAR+1900        ! Allow for 2-digit years
	   1507         IF(END.YEAR.LT.1980)END.YEAR=END.YEAR+100        ! Allow for years beyond 1999
	   1508       ELSE
	   1509         END.YEAR=3000
	   1510       ENDIF
	   1511 C
	   1512 C Get Science Record Interval to average rates over
	   1513 C
	   1514       WRITE(6,*) 'ENTER SCIENCE RECORD INTERVAL'
	   1515       READ(5,*) INTERVAL
	   1516 C
	   1517 C Prompt user for output filename
	   1518 C
	   1519       WRITE(6,*)'Enter name for output file or <RETURN> for default name'
	   1520       READ(5,'(A)') USERNAME
	   1521 
	   1522 C   **********************************************************
	   1523 C   *                                                        *
	   1524 C   *                   CREATE OUTPUT FILE NAME              *
	   1525 C   *                                                        *
	   1526 C   **********************************************************
	   1527 C
	   1528 C   Strip the extension off of the input file name so
	   1529 C   that we can give a new extension to the output file
	   1530 C
	   1531       NINDEX  = 80

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page  17
1.14                                                             6-DEC-1996 15:23:37    [WIND.SOFTWARE.STICS]MASS_SWE_SPD.FOR;11

	   1532       DO WHILE (L1FILENAME(NINDEX:NINDEX) .NE. '_')
	   1533          NINDEX = NINDEX - 1
	   1534       END DO
	   1535 C
	   1536 C   Find out if the input file name contains some directory
	   1537 C   designation.  This, if it exists, it will also be stripped off.
	   1538 C
	   1539       I = 1
	   1540       DO WHILE (.NOT. BRACK .AND. I .LT. NINDEX)
	   1541          IF (L1FILENAME(I:I) .EQ. '[') BRACK = .TRUE.
	   1542          I = I + 1
	   1543       END DO
	   1544 C
	   1545 C   Now, finally, load the input file name into the output
	   1546 C   file name and add proper extension.
	   1547 C
	   1548       JSAVE = 1
	   1549       DO 3 I = 1, NINDEX
	   1550          IF (BRACK) THEN
	   1551             IF (L1FILENAME(I:I) .EQ. ']') BRACK = .FALSE.
	   1552          ELSE
	   1553             LISFIL(JSAVE:JSAVE) = L1FILENAME(I:I)
	   1554             JSAVE = JSAVE + 1
	   1555          ENDIF
	   1556    3  CONTINUE
	   1557       LISFIL(1:9) = ' MASS_SWE'
	   1558       LISFIL(JSAVE+1:JSAVE+7) = 'SPD.TBL'        
	   1559 
	   1560       IF(USERNAME(1:12) .NE. '            ')THEN
	   1561         OUTFILENAME = USERNAME
	   1562       ELSE
	   1563         OUTFILENAME = LISFIL				! default name
	   1564       ENDIF
	   1565 
	   1566 C**********************************************************************
	   1567 
	   1568 C======================================================================
	   1569 C		OPEN L1 INPUT FILE AND READ DATA
	   1570 C======================================================================
	   1571 C
	   1572 C
	   1573 C Open L1 file for input, and read first SR, Core, HDB, and STICS RATES
	   1574 C
	   1575  1000 CONTINUE
	   1576       IF (FIRSTFILE .EQ. .FALSE.) THEN
	   1577         IFILE = IFILE + 1
	   1578 	OPENMODE = 2
	   1579 	CALL WIND_L1_OPEN_NEXT(L1_LUN,OPENMODE,L1FILENAME,L1_FILE_HEADER,STATUS)
	   1580       ELSE
	   1581         IFILE = 1
	   1582         FIRSTFILE = .FALSE.
	   1583         CALL WIND_L1_OPEN( L1_LUN, L1FILENAME, L1_FILE_HEADER, STATUS)
	   1584       ENDIF
	   1585       IF (STATUS .NE. 1) GOTO 9010
	   1586 
	   1587       INQUIRE(FILE=L1FILENAME,NAME=FULL_L1_NAME)
	   1588       INPUTFILES(IFILE) = FULL_L1_NAME

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page  18
1.14                                                             6-DEC-1996 15:23:37    [WIND.SOFTWARE.STICS]MASS_SWE_SPD.FOR;11

	   1589       WRITE(6,1001) FULL_L1_NAME
	   1590  1001 FORMAT(' OPEN FILE ',A)
	   1591 
	   1592       NAMELEN = INDEX(FULL_L1_NAME,' ') - 1
	   1593       IF (NAMELEN .LT. 1) NAMELEN=LEN(FULL_L1_NAME)
	   1594 
	   1595   13  CALL WIND_L1_READ_SR( L1_LUN, CNTR, L1_SR_HEADER, STATUS )
	   1596       IF(STATUS.EQ.RMS$_EOF)GO TO 1990
	   1597       IF (STATUS .NE. 1) GOTO 9020
	   1598       CALL WIND_L1_GET_BASIC( L1_LUN, SCI, STATUS)
	   1599       IF (STATUS .NE. 1) GOTO 9030
	   1600       CALL WIND_L1_GET_HDB( L1_LUN, HDB, STATUS)
	   1601       IF (STATUS .NE. 1) GOTO 9050
	   1602 
	   1603 C
	   1604 C Find first good spin, get year and DOY from it.
	   1605 C
	   1606       N=0
	   1607       GOODSPIN=.FALSE.
	   1608       DO 14 WHILE(.NOT.GOODSPIN)
	   1609         K=N/32+1
	   1610         NN=MOD(N,32)
	   1611         GOODSPIN=BTEST(L1_SR_HEADER.PRESENT(K),NN) 
	   1612         N=N+1
	   1613         IF(N.GT.59)GOTO 13 ! This SCI-REC all bad; get next
	   1614   14  CONTINUE
	   1615 C
	   1616 C If low bitrate, make sure that N points to an even spin (odd spins 
	   1617 C have been emptied by concatenation).
	   1618 C If high bitrate, decrement because N was incremented after the 1st 
	   1619 C good spin was found.
	   1620 C
	   1621       IF(.NOT.SCI.EDB(N).BITRATE)THEN
	   1622         N=N+MOD(N,2)
	   1623         IF(N.GE.60)GOTO 13
	   1624       ELSE
	   1625         N=N-1
	   1626       ENDIF
	   1627 C
	   1628 c Get S/C position at beginning of time period
	   1629 c
	   1630       IF(IFILE .EQ. 1) THEN
	   1631          X1_GSE = L1_SR_HEADER.GSE_POS.X/Re
	   1632          Y1_GSE = L1_SR_HEADER.GSE_POS.Y/Re
	   1633          Z1_GSE = L1_SR_HEADER.GSE_POS.Z/Re 
	   1634          WRITE(6,*)X1_GSE,Y1_GSE,Z1_GSE
	   1635       ENDIF
	   1636 
	   1637 
	   1638 C    ******************************************************************************
	   1639 C    *										  *
	   1640 C    *                OPEN OUTPUT FILE AND WRITE HEADER INFORMATION               *
	   1641 C    *										  *
	   1642 C    ******************************************************************************
	   1643       IF(IFILE .EQ. 1) THEN
	   1644         OPEN(UNIT= 20, NAME=OUTFILENAME, DEFAULTFILE='TABLE_DIR:', FORM='FORMATTED', 
	   1645      &     TYPE='NEW', RECL=200)

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page  19
1.14                                                             6-DEC-1996 15:23:37    [WIND.SOFTWARE.STICS]MASS_SWE_SPD.FOR;11

	   1646 
	   1647 	CALL TIME(RUN_TIME)			!Get run time
	   1648 	CALL DATE(RUN_DATE)			!Get run date
	   1649 
	   1650         WRITE(20,30)
	   1651   30    FORMAT(' MASS and SWE Solar Wind Speeds')
	   1652 	WRITE(20,'(A)') ' Run time  '//RUN_TIME//'   '//RUN_DATE
	   1653 
	   1654         WRITE(20,35) FULL_L1_NAME(1:NAMELEN)
	   1655   35    FORMAT(T10,'Input Level 1 Filename: ',A)
	   1656 	WRITE(20,*)
	   1657 	WRITE(20,37)
	   1658   37	FORMAT(1X,'YEAR DOY:HR:MN:SC',2X,'MASS_SPEED MASS_TH_VEL MASS_HITS', 
	   1659      .            2X,'SWE_SPEED SWE_TH_VEL SWE_HITS')
	   1660 
	   1661       ENDIF
	   1662 C
	   1663 C Set flags for start and stop
	   1664 C
	   1665       STARTFOUND=.FALSE.
	   1666       ENDFOUND=.FALSE.
	   1667 
	   1668  50   MASS_HITS = 0
	   1669       MASS_SPEED_SUM = 0
	   1670       MASS_THERM_SUM = 0
	   1671       SWE_HITS = 0
	   1672       SWE_SPEED_SUM = 0
	   1673       SWE_THERM_SUM = 0
	   1674 C
	   1675 C Set Sci Rec boundary
	   1676 C
	   1677       SR_INTERVAL = L1_SR_HEADER.SR_COUNT + INTERVAL
	   1678 C
	   1679 C Get the Basic Core data
	   1680 C
	   1681  100  CALL WIND_L1_GET_BASIC( L1_LUN, SCI, STATUS)
	   1682       IF (STATUS .NE. 1) GOTO 9030
	   1683 C
	   1684 C Get Housekeeping Data Block
	   1685 C
	   1686       CALL WIND_L1_GET_HDB( L1_LUN, HDB, STATUS)
	   1687       IF (STATUS .NE. 1) GOTO 9050
	   1688 C
	   1689 C If HDB flag is bad, skip entire science record
	   1690 C
	   1691       IF(HDB.Qual.NE.0)GOTO 905
	   1692 
	   1693 C
	   1694 C Decompress STICS rates for one science record and output
	   1695 C
	   1696       TIME_TO_USE = SCI.EDB(0).W_TIME
	   1697 C
	   1698 C Compare time read to start time. If the time read is greater than or equal to the user-
	   1699 C specified start time, then begin processing data.
	   1700 C
	   1701       IF(.NOT.STARTFOUND)THEN
	   1702         STARTFOUND=COMPARE_TIME_GE(TIME_TO_USE,START)

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page  20
1.14                                                             6-DEC-1996 15:23:37    [WIND.SOFTWARE.STICS]MASS_SWE_SPD.FOR;11

	   1703       ENDIF
	   1704 
	   1705       IF(STARTFOUND)THEN
	   1706 C
	   1707 C Compare time read to end time. If time read is greater than the user-specified end time, 
	   1708 C we're done. Go to the part of the code that closes files and STOP's program.
	   1709 C
	   1710           ENDFOUND=COMPARE_TIME_GE(TIME_TO_USE,END)
	   1711           IF(ENDFOUND)GO TO 907
	   1712 C
	   1713 C Get start time for first interval
	   1714 C
	   1715 	  IF (FIRST_TIME) THEN
	   1716 	    INT_START_TIME = TIME_TO_USE
	   1717 	    FIRST_TIME = .FALSE.
	   1718       	    SR_INTERVAL = L1_SR_HEADER.SR_COUNT + INTERVAL
	   1719 	  ENDIF
	   1720 C
	   1721 C Get MASS Speed at start time and at the beginning of every Sci Record.
	   1722 C 
	   1723           CALL WIND_L1_GET_MASS(L1_LUN,MASS_RATE,MASS_PHA,STATUS)   ! mass data
	   1724           IF (STATUS .NE. 1) GOTO 9085
	   1725 
	   1726       	  CALL SMS_MASS_SPEED(HDB, MASS_RATE,  	!input
	   1727      .         BULK_SPEED, BULK_UNCER, ERR_SPD_FLAG , ERR_MESSAGE)	!output
	   1728 
	   1729           IF(ERR_SPD_FLAG .EQ. 0) THEN
	   1730 	    IF((BULK_UNCER .GT. 0) .AND. (BULK_UNCER .LT. 150.0)) THEN
	   1731 	        MASS_HITS = MASS_HITS + 1.0
	   1732 	        MASS_SPEED_SUM  = MASS_SPEED_SUM + BULK_SPEED
	   1733 		MASS_THERM_SUM  = MASS_THERM_SUM + BULK_UNCER
	   1734 	    ENDIF
	   1735           ELSE
	   1736 	      WRITE(6,*) ERR_MESSAGE
	   1737           ENDIF
	   1738 C
	   1739 C Convert day of year to month, day.
	   1740 C
	   1741 	  CALL CNVRT_YRDY_TO_YRMNDY(JZEXT(TIME_TO_USE.YEAR),JZEXT(TIME_TO_USE.DOY),MON,DAY)
	   1742 C
	   1743 C Get SWE data. JZEXT -- zero-extend makes the time variables i*4 for compatibility--- 
	   1744 C
	   1745           CALL GET_SWE_KP(JZEXT(TIME_TO_USE.YEAR), MON, DAY, JZEXT(TIME_TO_USE.HR), 
	   1746      .			  JZEXT(TIME_TO_USE.MIN), JZEXT(TIME_TO_USE.SEC), 
	   1747      .			  GSE_POS_SWE, GSE_VEL, GSE_VEL_P,THERM_VEL, H_DENSITY, TIME_DIFF)
	   1748           IF((TIME_DIFF .LT. 45.0) .AND.		!allow 45 secs difference in SWE time
	   1749      .	       (GSE_VEL_P(1) .GE. 200) .AND. (GSE_VEL_P(1) .LE. 1000)) THEN
	   1750    
	   1751                SWE_HITS = SWE_HITS +1.0
	   1752                SWE_SPEED_SUM = SWE_SPEED_SUM + GSE_VEL_P(1)
	   1753 	       SWE_THERM_SUM = SWE_THERM_SUM + THERM_VEL
	   1754 	  ENDIF  
	   1755 
	   1756  
	   1757         ENDIF !{startfound}
	   1758 
	   1759 C

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page  21
1.14                                                             6-DEC-1996 15:23:37    [WIND.SOFTWARE.STICS]MASS_SWE_SPD.FOR;11

	   1760 C Read next Science Record
	   1761 C
	   1762  905  CALL WIND_L1_READ_SR( L1_LUN, CNTR, L1_SR_HEADER, STATUS )
	   1763 
	   1764 
	   1765       IF (.NOT. STARTFOUND) GO TO 100
	   1766 
	   1767       IF((ABS(L1_SR_HEADER.SR_COUNT - SR_INTERVAL) .GT. 500) .AND. (STATUS .NE. RMS$_EOF))
	   1768      +     GOTO 905   !In case of bad Sci Rec Num
	   1769 
	   1770 C
	   1771 C Average rates over interval. Average rates if END_TIME reached or at EOF.
	   1772 C
	   1773  907  IF((L1_SR_HEADER.SR_COUNT .GE. SR_INTERVAL) .OR.
	   1774      +   (ENDFOUND) .OR. (STATUS .EQ. RMS$_EOF))THEN
	   1775 
	   1776 C
	   1777 C Find average speed
	   1778 C
	   1779          IF(MASS_HITS.GT.0) THEN
	   1780 	   MASS_SPEED_AVG = MASS_SPEED_SUM/MASS_HITS
	   1781 	   MASS_THERM_AVG = MASS_THERM_SUM/MASS_HITS
	   1782 	 ELSE 
	   1783 	   MASS_SPEED_AVG = 0
	   1784 	   MASS_THERM_AVG = 0
	   1785 	 ENDIF
	   1786 
	   1787          IF(SWE_HITS.GT.0) THEN
	   1788 	   SWE_SPEED_AVG = SWE_SPEED_SUM/SWE_HITS
	   1789 	   SWE_THERM_AVG = SWE_THERM_SUM/SWE_HITS
	   1790 	 ELSE 
	   1791 	   SWE_SPEED_AVG = 0
	   1792 	   SWE_THERM_AVG = 0
	   1793 	 ENDIF
	   1794 
	   1795 C
	   1796 C Write rates and interval end time to output file
	   1797 C
	   1798          WRITE(20,940)INT_START_TIME.YEAR,INT_START_TIME.DOY,INT_START_TIME.HR,
	   1799      +                INT_START_TIME.MIN,INT_START_TIME.SEC,MASS_SPEED_AVG,
	   1800      +                MASS_THERM_AVG,MASS_HITS,SWE_SPEED_AVG,SWE_THERM_AVG,SWE_HITS
	   1801  940     FORMAT(1X,I4,1X,I3,3(':',I2.2),2(4X,F6.1),5X,F6.0,2X,2(4X,F6.1),5X,F4.0)
	   1802 
	   1803 	 INT_START_TIME = TIME_TO_USE 
	   1804 
	   1805          IF(ENDFOUND) GO TO 2000
	   1806          IF(STATUS.EQ.RMS$_EOF)GO TO 1990
	   1807          GO TO 50
	   1808       ENDIF !{L1_SR_HEADER.SR_COUNT...}
	   1809 
	   1810       IF (STATUS .NE. 1) GOTO 9020
	   1811          
	   1812       GO TO 100
	   1813 C
	   1814 C Close files and STOP
	   1815 C
	   1816 1990  IF(START.YEAR .GE. 0)GO TO 1000

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page  22
1.14                                                             6-DEC-1996 15:23:37    [WIND.SOFTWARE.STICS]MASS_SWE_SPD.FOR;11

	   1817 2000  CALL WIND_L1_CLOSE( L1_LUN, STATUS )      ! Close input file
	   1818       IF (STATUS .NE. 1) GOTO 9090
	   1819 c
	   1820 c Get S/C position at end of time period
	   1821 c
	   1822       X2_GSE = L1_SR_HEADER.GSE_POS.X/Re
	   1823       Y2_GSE = L1_SR_HEADER.GSE_POS.Y/Re 
	   1824       Z2_GSE = L1_SR_HEADER.GSE_POS.Z/Re 
	   1825       WRITE(6,*)X2_GSE,Y2_GSE,Z2_GSE
	   1826 
	   1827       CLOSE(UNIT=20)                            ! Close output file
	   1828       STOP
	   1829 C
	   1830 C Come here for errors
	   1831 C
	   1832 9010  TYPE *,'ERROR OPENING L1 FILE; STATUS=',STATUS
	   1833       STOP
	   1834 9020  TYPE *,'ERROR READING SCIENCE RECORD ',CNTR,'; STATUS=',STATUS
	   1835       STOP
	   1836 9030  TYPE *,'ERROR GETTING BASIC CORE; STATUS=',STATUS
	   1837       STOP
	   1838 9050  TYPE *,'ERROR GETTING HDB; STATUS=',STATUS
	   1839       STOP
	   1840 9085  TYPE *,'ERROR GETTING MASS DATA; STATUS=',STATUS
	   1841       STOP
	   1842 9090  TYPE *,'ERROR CLOSING L1 FILE; STATUS=',STATUS
	   1843       STOP
	   1844       END

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page  23
1.14                            Symbol Table                     6-DEC-1996 15:23:37    [WIND.SOFTWARE.STICS]MASS_SWE_SPD.FOR;11



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                 200 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                               113972 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT *32
  3 $IODATA$                               504 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                                6952   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                1232 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA
  6 L1_HEADERS                             644 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA

    Total Space Allocated               123504


ENTRY POINTS

    Address   Type  Name        
                                
  4-00000000        MASS_SWE_SPD


VARIABLES

    Address   Type  Name                Address   Type  Name                Address   Type  Name           
                                                                                                           
  2-00000018  L*1   BITRATE           2-00000078  I*4   ITEMP             1-0000000C  R*4   RE             
  2-000000C8# L*4   BRACK             2-0000007C  I*4   ITEMP2            2-00000150  CHAR  RUN_DATE       
  2-00000100  CHAR  BRNAME            2-00000064  I*4   J                 2-00000020  CHAR  RUN_TIME       
  2-0000009C  R*4   BULK_SPEED      REG-00000017  I*4   JSAVE             2-000000E8  CHAR  SMRNAME        
  2-000000A0  R*4   BULK_UNCER      REG-########  I*4   K               REG-00000005  I*4   SR_INTERVAL    
  2-00000074  I*4   CNTR              2-00000068  I*4   L               REG-0000000F  L*4   STARTFOUND     
  2-00000090  L*4   CODE_C            2-00000460  CHAR  L1FILENAME        2-00000048  I*4   STATUS         
  2-00000094  L*4   CODE_C2           1-00000000  I*4   L1_LUN            2-00000088  I*4   SUMHMR         
  2-00000098  L*4   COMP_CODE         2-00000500  CHAR  LISFIL            2-0000008C  I*4   SUMSMR         
  1-00000004  R*4   D1                2-0000006C  I*4   M                 0-00000040# R*4   SWE_HITS       
  1-00000008  R*4   D2                0-0000004C# R*4   MASS_HITS         0-0000003C# R*4   SWE_SPEED_AVG  
  2-000000D0  R*4   DAY               0-00000048# R*4   MASS_SPEED_AVG  REG-00000026  R*4   SWE_SPEED_SUM  
  2-00000058  I*4   DAYOFMONTH      REG-00000024  R*4   MASS_SPEED_SUM    0-00000038# R*4   SWE_THERM_AVG  
REG-0000000E  L*4   ENDFOUND          0-00000044# R*4   MASS_THERM_AVG  REG-00000027  R*4   SWE_THERM_SUM  
  2-000028E8  CHAR  ERR_MESSAGE     REG-00000025  R*4   MASS_THERM_SUM    2-00000008  CHAR  TGS            
  2-000000B0  I*4   ERR_SPD_FLAG      2-00000110  CHAR  MODE_AT_START     2-000000A8  R*4   THERM_VEL      
  2-0000005C  R*4   E_OVER_Q          2-000000CC  I*4   MON               2-000000AC  R*4   TIME_DIFF      
  2-00000000  CHAR  FIFO              2-00000054  I*4   MONTH             2-00000128  CHAR  USERNAME       
  0-00000050  L*4   FIRSTFILE       REG-########  I*4   N                 2-00000060  L*4   USE_SC_CLOCK   
  1-00000010  I*4   FIRSTSPEED      REG-00000006  I*4   NAMELEN           2-00000050  I*4   VSTEP          
  0-00000054  L*4   FIRST_TIME      REG-00000001  I*4   NINDEX            2-0000004C  I*4   WIND_DECOMPRESS
  2-000004B0  CHAR  FULL_L1_NAME    REG-########  I*4   NN                0-00000058  R*4   X1_GSE         
REG-########  L*4   GOODSPIN          2-000000BC  I*4   OFILE             0-00000050  R*4   X2_GSE         
  2-000000D8  CHAR  HMRNAME           0-00000058  I*4   OPENMODE          0-0000005C  R*4   Y1_GSE         
  2-000000A4  R*4   H_DENSITY         2-00002888  CHAR  OUTFILENAME       0-00000054  R*4   Y2_GSE         
REG-########  I*4   I                 2-00000070  I*4   P                 2-00000080  I*4   YR2DIGIT       
  2-000000B4  I*4   IFILE             2-000000C0  I*4   Q                 0-00000060  R*4   Z1_GSE         
  2-00000084  I*4   INCREMENT         2-00000010  CHAR  RATEFLAG          0-00000058  R*4   Z2_GSE         
  2-000000B8  I*4   INTERVAL          2-000000C4  I*4   RATENUM                                            


MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page  24
1.14                            Symbol Table                     6-DEC-1996 15:23:37    [WIND.SOFTWARE.STICS]MASS_SWE_SPD.FOR;11

RECORDS

    Address   Name            Structure                Bytes     Address   Name            Structure                Bytes
                                                                                                                         
  2-00000030  END             T                            8   2-00002938  SCI             CORE                      7384
  2-00004610  HDB             HDBSTR                     324   2-00000028  START           T                            8
  2-00000040  INT_START_TIME  T                            8   2-00007278  STICS_PHA       ST_PHA                   36720
  6-00000000  L1_FILE_HEADER  ST_L1_FILE_HEADER          400   2-00004758  STICS_RATE      ST_RATE                  11040
  6-00000190  L1_SR_HEADER    ST_L1_SR_HEADER            244   2-00000038  TIME_TO_USE     T                            8
  2-00010968  MASS_PHA        MA_PHA                   45960                                                             
  2-000101E8  MASS_RATE       MA_RATE                   1920                                                             


ARRAYS

     Address  Type  Name               Bytes  Dimensions

  2-0001BCF0  I*4   D_RATES               68  (17)
  2-0000016C  R*4   GSE_POS_SWE           12  (3)
  2-00000178  R*4   GSE_VEL               12  (3)
  2-00000184  R*4   GSE_VEL_P             12  (3)
  2-00000560  CHAR  INPUTFILES          9000  (100)
  1-00000018  CHAR  MODE                 170  (10)
  2-00000190  I*4   STICS_RATES          716  (179)
  2-00000160  I*4   SUMBR                 12  (0:2)



LABELS

    Address   Label     Address   Label     Address   Label     Address   Label     Address   Label     Address   Label
                                                                                                                       
  4-000007A4   3          **       14     4-00000F60   50         **       940        **       2000       **       9050
      **       10         **       30         **       100    4-00000878   1000       **       9010       **       9085
      **       12         **       35     4-00001290   905        **       1001       **       9020       **       9090
      **       13         **       37     4-000012EC   907    4-0000156C   1990       **       9030                    


FUNCTIONS AND SUBROUTINES REFERENCED

  Type  Name                                Type  Name                                Type  Name                             
                                                                                                                             
        CNVRT_T_YRMONDAY_TO_YEARDAY               WIND_GET_FILENAME                         WIND_L1_OPEN                     
        CNVRT_YRDY_TO_YRMNDY                      WIND_L1_CLOSE                             WIND_L1_OPEN_NEXT                
  L*4   COMPARE_TIME_GE                           WIND_L1_GET_BASIC                         WIND_L1_READ_SR                  
        GET_SWE_KP                                WIND_L1_GET_HDB                                                            
        SMS_MASS_SPEED                            WIND_L1_GET_MASS                                                           

MASS_SWE_SPD                                                     6-DEC-1996 15:23:49    DEC Fortran V6.2-508                Page  25
1.14                            Symbol Table                     6-DEC-1996 15:23:37    [WIND.SOFTWARE.STICS]MASS_SWE_SPD.FOR;11

	   1845 
	   1846 


  +---------------------------------------------------+
  |               KEY TO ADDRESS CODE FORMATS         |
  |   ppp-oooooooo  - In Psect ppp, Offset oooooooo   |
  |   ***-********  - External                        |
  |               # - Suffix: Also In Registers       |
  |   REG-rrrrrrrr  - In Register rrrrrrrr            |
  |   REG-########  - In Various Registers            |
  |        **       - Not Used; Not Allocated         |
  +---------------------------------------------------+


COMMAND QUALIFIERS

  /ALIGNMENT=(COMMONS=(PACKED,NOMULTILANGUAGE),RECORDS=PACKED)
  /ASSUME=(ACCURACY_SENSITIVE,BACKSLASH,NODUMMY_ALIASES,NOUNDERSCORE)
  /CHECK=(ASSERTIONS,BOUNDS,FORMAT,FP_EXCEPTIONS,OVERFLOW,NOUNDERFLOW)
  /DEBUG=(NOSYMBOLS,TRACEBACK)
  /DESIGN=(NOCOMMENTS)
  /SHOW=(DICTIONARY,INCLUDE,MAP,PREPROCESSOR)
  /STANDARD=(NOSEMANTIC,NOSOURCE_FORM,NOSYNTAX)
  /WARNINGS=(NOALIGNMENT,NOARGUMENT_CHECKING,NODECLARATIONS,GENERAL,NOTRUNCATED_SOURCE,UNCALLED,
             UNINITIALIZED,UNREACHABLE,UNUSED)
  /NOAUTOMATIC  /BLAS=NOMAPPED  /CONVERT=NATIVE  /NOCROSS_REFERENCE  /NOD_LINES  /ERROR_LIMIT=30  /EXTEND_SOURCE
  /NOPAD_SOURCE  /NOF77  /FLOAT=G_FLOAT  /IEEE_MODE=FAST  /ROUNDING_MODE=NEAREST
  /GRANULARITY=QUADWORD  /INSTRUCTION_SET=FLOATING  /INTEGER_SIZE=32  /NOMACHINE_CODE
  /MATH_LIBRARY=ACCURATE  /NAMES=UPPERCASE  /OPTIMIZE=(LEVEL=4,UNROLL=0)  /REAL_SIZE=32  /NORECURSIVE
  /NOSEPARATE_COMPILATION  /NOSYNCHRONOUS_EXCEPTIONS  /NOSYNTAX_ONLY  /TERMINAL=NOSTATISTICS  /NOTIE  /VMS
  /NOANALYSIS_DATA
  /NODIAGNOSTICS
  /INCLUDE=(.FOR,.f,FORT$INCLUDE:.FOR,FORT$INCLUDE:.f)
  /LIST=SMS1:[WIND.SOFTWARE.STICS]MASS_SWE_SPD.LIS;5
  /OBJECT=SMS1:[WIND.SOFTWARE.STICS]MASS_SWE_SPD.OBJ;5
  /NOLIBRARY
   sys$lib=SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1

COMPILER: DEC Fortran V6.2-508-274F

COMPILATION STATISTICS

  CPU time:          2.73 seconds
  Elapsed time:      4.78 seconds
  Pagefaults:         388
  I/O Count:           52
