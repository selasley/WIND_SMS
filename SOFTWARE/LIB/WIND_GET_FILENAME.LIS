WIND_GET_FILENAME                                               21-APR-1995 15:27:22    DEC Fortran V6.2-508                Page   1
                                                                 3-JAN-1995 17:44:56    [WIND.SOFTWARE.LIB]WIND_GET_FILENAME.FOR;21

	      1       SUBROUTINE WIND_GET_FILENAME ( FILENAM, STATUS )
	      2 !+
	      3 !	SUBROUTINE WIND_GET_FILENAME
	      4 !	asks for a FILENAME and checks if this file exists.
	      5 !	STATUS	= 0	File does not exist
	      6 !		= 1	File exists
	      7 !
	      8 !	This version:   1.6    3-JAN-1995
	      9 !
	     10 !     REFERENCE:
	     11 !
	     12 !     USAGE and PARAMETERS:
	     13 !       CALL WIND_GET_FILENAME( FILENAM, STATUS )
	     14 !
	     15 !     CALLS/FUNCTIONS:
	     16 !       CALL TICHAR
	     17 !       CALL TILOG
	     18 !       CALL SELECT_FILE
	     19 !       = CHLAST
	     20 !       = INDEX
	     21 !       INQUIRE
	     22 !
	     23 !     CREATION:
	     24 !	18-FEB-1994	H. BROER	University of Maryland, Space Physics Group
	     25 !
	     26 !     REVISIONS:
	     27 !  1.1	22-JUN-1994	H. BROER	generalize for all files
	     28 !  1.2   4-NOV-1994     L. Bleau        changed KB to TTOUT in WRITE statements
	     29 !  1.3   9-NOV-1994     L. Bleau        allow wildcards in filename
	     30 !  1.4  10-NOV-1994     L. Bleau        make DATA_DIR:WI*LZ*.DAT the default name
	     31 !  1.5  29-NOV-1994	L. Bleau	change FILENAM to CHARACTER*(*)
	     32 !  1.6   3-JAN-1995     L. Bleau        changed internal logical vars to
	     33 !                                       LOGICAL, was LOGICAL*1, which caused
	     34 !                                       error when passed to TILOG
	     35 !-
	     36 CDEC$	IDENT	'1.6'
	     37 
	     38       IMPLICIT NONE
	     39 
	     40       INCLUDE	'INC_DIR:WIND_Lun.INC/NOLIST'
	     70       INCLUDE	'($SSDEF)/NOLIST'
	   1495 
	   1496       INTEGER*4		CHLAST,		! internal value
	   1497      :			KK,		! internal value
	   1498      :			LL,		! internal value
	   1499      :			MM,		! internal value
	   1500      :			STATUS,		! Reporting execution status
	   1501      :			CONFIRM/0/	! set zero to indicate to SELECT_FILE
	   1502 					! not to confirm file selection
	   1503 
	   1504       INTEGER*2 MESLEN			! message length
	   1505 
	   1506       LOGICAL		FILEEXIST,	! internal logical flag
	   1507      :			OK		! internal logical flag
	   1508 
	   1509       CHARACTER*(*)	FILENAM 	! resulting filename
	   1510 

WIND_GET_FILENAME                                               21-APR-1995 15:27:22    DEC Fortran V6.2-508                Page   2
1.6                                                              3-JAN-1995 17:44:56    [WIND.SOFTWARE.LIB]WIND_GET_FILENAME.FOR;21

	   1511       CHARACTER*80	FILENA,		! internal filename
	   1512      :			INFILE,		! internal filename
	   1513      :			PATTERN,	! internal filename
	   1514      :			MESSAGE		! internal message
	   1515 
	   1516       KK	= CHLAST( FILENAM )
	   1517 
	   1518       IF( KK .LT. 2 )   THEN
	   1519           INFILE	= 'DATA_DIR:WI*LZ*.DAT'
	   1520       ELSE
	   1521           INFILE	= FILENAM
	   1522       ENDIF
	   1523 
	   1524  1000 CONTINUE
	   1525 
	   1526       FILENAM	= INFILE
	   1527 
	   1528       WRITE( TTOUT, 100 )	'FILENAME = '
	   1529   100 FORMAT( 1H , A, $ )
	   1530 
	   1531       CALL TICHAR( FILENAM, *1000 )
	   1532 C
	   1533 C If user entered nothing, use copy contents of INFILE to FILENAM and use it
	   1534 C If user entered a filename without a device or directory name, copy the
	   1535 C device and directory name from INFILE, prefix it to user's response, and
	   1536 C store back in FILENAM 
	   1537 C
	   1538       IF( FILENAM .EQ. ' ') THEN
	   1539           FILENAM = INFILE
	   1540       ELSE
	   1541 
	   1542           KK	= MAX( INDEX( FILENAM, ':' ), INDEX( FILENAM, ']' ))
	   1543           LL	= MAX( INDEX( INFILE, ':' ), INDEX( INFILE, ']' ))
	   1544 
	   1545           IF( KK .EQ. 0 .AND. LL .NE. 0) THEN
	   1546               KK	= CHLAST( FILENAM )
	   1547               FILENA(1:LL)	= INFILE(1:LL)
	   1548               FILENA(LL+1:)	= FILENAM(1:KK)
	   1549               FILENAM	= FILENA
	   1550           ENDIF
	   1551       ENDIF
	   1552 
	   1553 1100  CONTINUE
	   1554 C
	   1555 C Execute this code only if user specified a wildcard character in FILENAM
	   1556 C If user made no selection (STATUS = 0) or if there is some error
	   1557 C (STATUS <> 1) go back and prompt again
	   1558 C
	   1559       IF( INDEX( FILENAM, '*' ) .NE. 0 .OR. INDEX( FILENAM, '%' ) .NE. 0) THEN
	   1560           PATTERN = FILENAM
	   1561           CALL SELECT_FILE( PATTERN, ' ', CONFIRM, FILENAM, KK, STATUS )
	   1562           IF (STATUS .EQ. 0) GOTO 1000
	   1563           IF (STATUS .NE. 1) THEN
	   1564               MESLEN = 0
	   1565               CALL LIB$SYS_GETMSG (STATUS, MESLEN, MESSAGE, , )
	   1566               IF( MESLEN .NE. 0) WRITE( TTOUT, *) MESSAGE(1:MESLEN)
	   1567               GOTO 1000

WIND_GET_FILENAME                                               21-APR-1995 15:27:22    DEC Fortran V6.2-508                Page   3
1.6                                                              3-JAN-1995 17:44:56    [WIND.SOFTWARE.LIB]WIND_GET_FILENAME.FOR;21

	   1568           ENDIF
	   1569       ENDIF
	   1570 
	   1571 C Remove ; and version number from filename before opening
	   1572  
	   1573       MM	= INDEX( FILENAM, ';' )
	   1574       IF (MM .NE. 0) FILENAM(MM:)=' '
	   1575 
	   1576       INQUIRE ( FILE= FILENAM, EXIST= FILEEXIST )
	   1577 
	   1578       IF( FILEEXIST )   THEN
	   1579 
	   1580           INQUIRE ( FILE= FILENAM, NAME= FILENA )
	   1581 
	   1582           WRITE( TTOUT, 120 )   'EXPLICIT FILENAME = ', FILENA
	   1583   120 FORMAT( 1H , A, A )
	   1584           OK		= .TRUE.
	   1585           WRITE( TTOUT, 100 )   'IS THIS OKAY ?'
	   1586           CALL TILOG( OK, *1000 )
	   1587 
	   1588           IF( OK )   THEN
	   1589               FILENAM	= FILENA
	   1590               STATUS	= SS$_NORMAL
	   1591           ELSE
	   1592               GOTO 1000
	   1593           ENDIF
	   1594 
	   1595       ELSE
	   1596 
	   1597           WRITE( TTOUT, 120 )   'FILE DOES NOT EXIST: ', FILENAM
	   1598 
	   1599           OK		= .TRUE.
	   1600           WRITE( TTOUT, 100 )   'FILENAME OK ?'
	   1601           CALL TILOG( OK, *1000 )
	   1602 
	   1603           IF( .NOT.OK )    THEN
	   1604               OK		= .TRUE.
	   1605               WRITE( TTOUT, 100 )   'TRY AGAIN ?'
	   1606               CALL TILOG( OK, *1000 )
	   1607               IF( OK )    THEN
	   1608                   GOTO 1000
	   1609               ELSE
	   1610                   STATUS	= '18928'X
	   1611               ENDIF
	   1612           ELSE
	   1613               STATUS	= 0
	   1614           ENDIF
	   1615 
	   1616       ENDIF
	   1617 
	   1618       RETURN
	   1619 
	   1620       END

WIND_GET_FILENAME                                               21-APR-1995 15:27:22    DEC Fortran V6.2-508                Page   4
1.6                             Symbol Table                     3-JAN-1995 17:44:56    [WIND.SOFTWARE.LIB]WIND_GET_FILENAME.FOR;21



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 $DATA$                                   4 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  2 $BSS$                                  328 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  3 $IODATA$                                48 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT OCTA
  4 $CODE$                                1988   PIC CON REL LCL   SHR   EXE NORD NOWRT OCTA
  5 $LINK$                                 512 NOPIC CON REL LCL NOSHR NOEXE   RD NOWRT OCTA

    Total Space Allocated                 2880


ENTRY POINTS

    Address   Type  Name             
                                     
  4-00000000        WIND_GET_FILENAME


VARIABLES

    Address   Type  Name          Address   Type  Name          Address   Type  Name          Address   Type  Name     
                                                                                                                       
  1-00000000  I*4   CONFIRM     2-00000058  CHAR  INFILE      2-000000F8  CHAR  MESSAGE         **      I*4   STATUS   
  2-00000000  L*4   FILEEXIST   0-00000040  I*4   KK        REG-00000000  I*4   MM                                     
  2-00000008  CHAR  FILENA    REG-0000000F  I*4   LL          0-00000044  L*4   OK                                     
      **      CHAR  FILENAM     0-00000038# I*2   MESLEN      2-000000A8  CHAR  PATTERN                                


LABELS

    Address   Label     Address   Label     Address   Label     Address   Label
                                                                               
      **       100        **       120    4-00000120   1000   4-0000030C   1100


FUNCTIONS AND SUBROUTINES REFERENCED

  Type  Name                   Type  Name                   Type  Name                
                                                                                      
  I*4   CHLAST                       SELECT_FILE                  TILOG               
        LIB$SYS_GETMSG               TICHAR                                           

WIND_GET_FILENAME                                               21-APR-1995 15:27:22    DEC Fortran V6.2-508                Page   5
1.6                             Symbol Table                     3-JAN-1995 17:44:56    [WIND.SOFTWARE.LIB]WIND_GET_FILENAME.FOR;21



  +---------------------------------------------------+
  |               KEY TO ADDRESS CODE FORMATS         |
  |   ppp-oooooooo  - In Psect ppp, Offset oooooooo   |
  |   ***-********  - External                        |
  |               # - Suffix: Also In Registers       |
  |   REG-rrrrrrrr  - In Register rrrrrrrr            |
  |   REG-########  - In Various Registers            |
  |        **       - Not Used; Not Allocated         |
  +---------------------------------------------------+


COMMAND QUALIFIERS

  /ALIGNMENT=(COMMONS=(PACKED,NOMULTILANGUAGE),RECORDS=PACKED)
  /ASSUME=(ACCURACY_SENSITIVE,BACKSLASH,NODUMMY_ALIASES,NOUNDERSCORE)
  /CHECK=(NOASSERTIONS,NOBOUNDS,FORMAT,NOFP_EXCEPTIONS,NOOVERFLOW,NOUNDERFLOW)
  /DEBUG=(NOSYMBOLS,TRACEBACK)
  /DESIGN=(NOCOMMENTS)
  /SHOW=(DICTIONARY,INCLUDE,MAP,PREPROCESSOR)
  /STANDARD=(NOSEMANTIC,NOSOURCE_FORM,NOSYNTAX)
  /WARNINGS=(NOALIGNMENT,NOARGUMENT_CHECKING,NODECLARATIONS,GENERAL,NOTRUNCATED_SOURCE,UNCALLED,
             UNINITIALIZED,UNREACHABLE,UNUSED)
  /NOAUTOMATIC  /BLAS=NOMAPPED  /CONVERT=NATIVE  /NOCROSS_REFERENCE  /NOD_LINES  /ERROR_LIMIT=30  /EXTEND_SOURCE
  /NOPAD_SOURCE  /NOF77  /FLOAT=G_FLOAT  /IEEE_MODE=FAST  /ROUNDING_MODE=NEAREST
  /GRANULARITY=QUADWORD  /INSTRUCTION_SET=FLOATING  /INTEGER_SIZE=32  /NOMACHINE_CODE
  /MATH_LIBRARY=ACCURATE  /NAMES=UPPERCASE  /OPTIMIZE=(LEVEL=4,UNROLL=0)  /REAL_SIZE=32  /NORECURSIVE
  /NOSEPARATE_COMPILATION  /NOSYNCHRONOUS_EXCEPTIONS  /NOSYNTAX_ONLY  /TERMINAL=NOSTATISTICS  /NOTIE  /VMS
  /NOANALYSIS_DATA
  /NODIAGNOSTICS
  /INCLUDE=(.FOR,.f,FORT$INCLUDE:.FOR,FORT$INCLUDE:.f)
  /LIST=SMS1:[WIND.SOFTWARE.LIB]WIND_GET_FILENAME.LIS;7
  /OBJECT=SMS1:[WIND.SOFTWARE.LIB]WIND_GET_FILENAME.OBJ;8
  /NOLIBRARY
   sys$lib=SYS$COMMON:[SYSLIB]FORSYSDEF.TLB;1

COMPILER: DEC Fortran V6.2-508-274F

COMPILATION STATISTICS

  CPU time:          1.10 seconds
  Elapsed time:      2.79 seconds
  Pagefaults:         219
  I/O Count:           18
