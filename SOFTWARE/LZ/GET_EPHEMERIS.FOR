        SUBROUTINE GET_EPHEMERIS(OR_NAME,AT_NAME,STATUS)
C
C Purpose:
C
C This routine gets ORbit and ATtitude data from a CDF file, which originally
C came from a CDROM.  The data are stored in memory arrays along with their
C corresponding Epoch times and are eventually written into the headers of the
C L1 file that is being generated.  It utilizes the Common Data Format (CDF)
C utility routines to get the data.
C
C Created:   5-APR-1995   John Paquette
C
C This version:   1.4   27-FEB-1997
C
C Revision History:
C   6-APR-1995	L Bleau		added CHECK_STATUS routine, changed comments
C  10-APR-1995	J PAQUETTE	get all data from ORbit and ATtitude files
C   1-JUN-1995  L Bleau		change to allow only one type of data to be
C				accessed by passing blank filename
C  31-JAN-1996	L Bleau		read orbit, attitude files in different loops,
C				don't assume they are same length, save length
C				in variables NREC_OR and NREC_AT in common
C				block EPHDATA 
C  27-FEB-1997	L Bleau		check for CDF generate with future version of
C				CDF software and allow it
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CDEC$	IDENT '1.4'
        IMPLICIT NONE
        INCLUDE 'INC_DIR:L1FMT.INC'
        INCLUDE 'INC_DIR:L1_HDR_INFO.INC'
        INCLUDE 'CDF$INC:CDF.INC'
        INTEGER*4 STATUS,NUM_DIMS,DIM_SIZES(CDF_MAX_DIMS),ENCODING,MAJORITY
	INTEGER*4 REC_NUM,MAX_REC,NUM_VARS,NUM_ATTRS,OR_ID,AT_ID
        INTEGER*4 INDICES(1)/1/,VAR_NUM_EPOCH,VAR_NUM_GCI_POS,VAR_NUM_GCI_VEL,VAR_NUM_GSE_POS,VAR_NUM_GSE_VEL,
     &            VAR_NUM_GSM_POS,VAR_NUM_GSM_VEL,VAR_NUM_GCI_R_ASC,VAR_NUM_GCI_DECL,VAR_NUM_GSE_R_ASC,
     &            VAR_NUM_GSE_DECL,VAR_NUM_GSM_R_ASC,VAR_NUM_GSM_DECL,VAR_NUM_GCI_SUN_VECTOR,VAR_NUM_SPIN_RATE
        CHARACTER OR_NAME*(*),AT_NAME*(*)
	LOGICAL GET_OR,GET_AT
C
D	type *,or_name
D	type *,at_name
	GET_OR = OR_NAME .NE. ' '
	GET_AT = AT_NAME .NE. ' '
	IF (.NOT. GET_OR .AND. .NOT. GET_AT) RETURN
C
C Open CDF ORbit file
C
	IF (GET_OR) THEN
          CALL CDF_OPEN(OR_NAME,OR_ID,STATUS)
          IF (STATUS .NE. CDF_OK .AND. STATUS .NE. FUTURE_CDF) RETURN
	ENDIF
C
C Open CDF ATtitude file
C
	IF (GET_AT) THEN
          CALL CDF_OPEN(AT_NAME,AT_ID,STATUS)
          IF (STATUS .NE. CDF_OK .AND. STATUS .NE. FUTURE_CDF) RETURN
	ENDIF
C
C Find number of record; assume same number in both files
C
	IF (GET_OR) THEN
          CALL CDF_INQUIRE(OR_ID,NUM_DIMS,DIM_SIZES,ENCODING,MAJORITY,NREC_OR,NUM_VARS,NUM_ATTRS,STATUS)
          IF (STATUS .NE. CDF_OK) RETURN
	ELSE
          CALL CDF_INQUIRE(AT_ID,NUM_DIMS,DIM_SIZES,ENCODING,MAJORITY,NREC_AT,NUM_VARS,NUM_ATTRS,STATUS)
          IF (STATUS .NE. CDF_OK) RETURN
	ENDIF
C
C Get variable number of data we wish to retrieve
C
	IF (GET_OR) THEN
          VAR_NUM_EPOCH     = CDF_VAR_NUM(OR_ID,'Epoch')
          VAR_NUM_GCI_POS   = CDF_VAR_NUM(OR_ID,'GCI_POS')
          VAR_NUM_GCI_VEL   = CDF_VAR_NUM(OR_ID,'GCI_VEL')
          VAR_NUM_GSE_POS   = CDF_VAR_NUM(OR_ID,'GSE_POS')
          VAR_NUM_GSE_VEL   = CDF_VAR_NUM(OR_ID,'GSE_VEL')
          VAR_NUM_GSM_POS   = CDF_VAR_NUM(OR_ID,'GSM_POS')
          VAR_NUM_GSM_VEL   = CDF_VAR_NUM(OR_ID,'GSM_VEL')
          VAR_NUM_GCI_SUN_VECTOR = CDF_VAR_NUM(OR_ID,'SUN_VECTOR')
	ENDIF
	IF (GET_AT) THEN
          VAR_NUM_SPIN_RATE = CDF_VAR_NUM(AT_ID,'BODY_SPIN_RATE')
          VAR_NUM_GCI_R_ASC = CDF_VAR_NUM(AT_ID,'GCI_R_ASCENSION')
          VAR_NUM_GCI_DECL  = CDF_VAR_NUM(AT_ID,'GCI_DECLINATION')
          VAR_NUM_GSE_R_ASC = CDF_VAR_NUM(AT_ID,'GSE_R_ASCENSION')
          VAR_NUM_GSE_DECL  = CDF_VAR_NUM(AT_ID,'GSE_DECLINATION')
          VAR_NUM_GSM_R_ASC = CDF_VAR_NUM(AT_ID,'GSM_R_ASCENSION')
          VAR_NUM_GSM_DECL  = CDF_VAR_NUM(AT_ID,'GSM_DECLINATION')
	ENDIF
C
C Loop through orbit file, fetching the Epoch time, GCI,GSE,GSM position,
C and velocity information from each record and storing them in the arrays of
C structures in common block EPHDATA 
C
	IF (GET_OR) THEN
          DO 200 REC_NUM=1,NREC_OR
            INDICES(1) = 1
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_EPOCH,REC_NUM,INDICES,EPH_EPOCH(REC_NUM),STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
C
            INDICES(1) = 1
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GCI_POS,REC_NUM,INDICES,GCI_POS(REC_NUM).X,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GCI_VEL,REC_NUM,INDICES,GCI_VEL(REC_NUM).X,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GSE_POS,REC_NUM,INDICES,GSE_POS(REC_NUM).X,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GSE_VEL,REC_NUM,INDICES,GSE_VEL(REC_NUM).X,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GSM_POS,REC_NUM,INDICES,GSM_POS(REC_NUM).X,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GSM_VEL,REC_NUM,INDICES,GSM_VEL(REC_NUM).X,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GCI_SUN_VECTOR,REC_NUM,INDICES,GCI_SUN_VECTOR(REC_NUM).X,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
C
            INDICES(1) = 2
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GCI_POS,REC_NUM,INDICES,GCI_POS(REC_NUM).Y,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GCI_VEL,REC_NUM,INDICES,GCI_VEL(REC_NUM).Y,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GSE_POS,REC_NUM,INDICES,GSE_POS(REC_NUM).Y,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GSE_VEL,REC_NUM,INDICES,GSE_VEL(REC_NUM).Y,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GSM_POS,REC_NUM,INDICES,GSM_POS(REC_NUM).Y,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GSM_VEL,REC_NUM,INDICES,GSM_VEL(REC_NUM).Y,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GCI_SUN_VECTOR,REC_NUM,INDICES,GCI_SUN_VECTOR(REC_NUM).Y,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
C
            INDICES(1) = 3
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GCI_POS,REC_NUM,INDICES,GCI_POS(REC_NUM).Z,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GCI_VEL,REC_NUM,INDICES,GCI_VEL(REC_NUM).Z,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GSE_POS,REC_NUM,INDICES,GSE_POS(REC_NUM).Z,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GSE_VEL,REC_NUM,INDICES,GSE_VEL(REC_NUM).Z,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GSM_POS,REC_NUM,INDICES,GSM_POS(REC_NUM).Z,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GSM_VEL,REC_NUM,INDICES,GSM_VEL(REC_NUM).Z,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_GCI_SUN_VECTOR,REC_NUM,INDICES,GCI_SUN_VECTOR(REC_NUM).Z,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
200       CONTINUE
	ENDIF
C
C Loop through attitude file, fetching the Epoch time, declination, and right
C ascension information from each record and storing them in the arrays of
C structures in common block EPHDATA 
C
	IF (GET_AT) THEN
          DO 220 REC_NUM=1,NREC_AT
            INDICES(1) = 1
            CALL CDF_VAR_GET(OR_ID,VAR_NUM_EPOCH,REC_NUM,INDICES,EPH_EPOCH(REC_NUM),STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
C
            CALL CDF_VAR_GET(AT_ID,VAR_NUM_SPIN_RATE,REC_NUM,INDICES,SPIN_RATE,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
C
            CALL CDF_VAR_GET(AT_ID,VAR_NUM_GCI_R_ASC,REC_NUM,INDICES,GCI_ATT(REC_NUM).R_ASC,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(AT_ID,VAR_NUM_GSE_R_ASC,REC_NUM,INDICES,GSE_ATT(REC_NUM).R_ASC,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(AT_ID,VAR_NUM_GSM_R_ASC,REC_NUM,INDICES,GSM_ATT(REC_NUM).R_ASC,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
C
            CALL CDF_VAR_GET(AT_ID,VAR_NUM_GCI_DECL,REC_NUM,INDICES,GCI_ATT(REC_NUM).DECL,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(AT_ID,VAR_NUM_GSE_DECL,REC_NUM,INDICES,GSE_ATT(REC_NUM).DECL,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
            CALL CDF_VAR_GET(AT_ID,VAR_NUM_GSM_DECL,REC_NUM,INDICES,GSM_ATT(REC_NUM).DECL,STATUS)
            IF (STATUS .NE. CDF_OK) RETURN
220       CONTINUE
	ENDIF
C
C Close both files
C
	IF (GET_OR) THEN
          CALL CDF_CLOSE(OR_ID,STATUS)
          IF (STATUS .NE. CDF_OK) RETURN
	ENDIF
	IF (GET_AT) THEN
          CALL CDF_CLOSE(AT_ID,STATUS)
          IF (STATUS .NE. CDF_OK) RETURN
	ENDIF
C
	RETURN
        END

	SUBROUTINE CHECK_STATUS(STATUS)
        IMPLICIT NONE
	INTEGER STATUS
        INCLUDE 'CDF$INC:CDF.INC'
        CHARACTER MESSAGE*(CDF_STATUSTEXT_LEN)
C
        IF (STATUS .NE. CDF_OK) THEN
          TYPE *,STATUS
          CALL CDF_ERROR(STATUS,MESSAGE)
          TYPE *,MESSAGE
        ENDIF
	RETURN
	END
