#if defined (MSDOS)
#define SHORTY 1
#elif defined (__MSDOS__)
#define SHORTY 1
#endif
#if defined (vms)
#define VMS_OS 1
#define SYS_OK 1
#endif
#if defined (unix)
#define UNIX_OS 1
#define SYS_OK  0
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <time.h>
#include <math.h>
#include <cdf.h>
/* define the runtime parameters data structure */
struct {
   char infname[80];        /* input file parameter */
   char ffdfname[80];       /* flatfile description parameter */
   char incdfname[80];      /* input CDF/skeleton filename parameter */
   char outcdfname[80];	    /* output CDF filename parameter */
   long progress;           /* send progress output */
   long debug;              /* send debug output */
   long sendtolog;          /* send output to log file 0=false,1=true */
   long maxlogrecs;         /* max # of lines to write to logfile */
   long sendtoterm;         /* send output to terminal */
   long haltateof;          /* halt only when input file EOF reached */
   long numrecs;            /* #input recs to process iff haltateof=0 */
   long autocase;           /* case to use when auto-naming 0=lower,1=upper */
} RPARMS;
/* define the structure to hold list of input file names and paths */
long FLISTne;
struct FLISTelem {
   char Pathname[80];       /* name of input path(s) */
   char Filename[80];       /* name of input file(s) */
} FLISTz;
struct FLISTelem *FLIST;
/* define the structure to hold information about the output CDF file */
struct {
   CDFid outCDFid;          /* id of output cdf */
   long  encoding;          /* encoding of output cdf */
   long  CDFrec;            /* CDF record number */
} OUTCDF;
/* define the structure to hold CDF variable information */
long CLISTne;
struct CLISTelem {
   long flagone;           /* flag indicating if first min/max values  */
   long ccount;            /* max number of characters in valid value  */
   void *vmin;             /* pointer to autogenerated validmin values */
   void *vmax;             /* pointer to autogenerated validmax values */
   char form[10];          /* autogenerated format value */
} CLISTz;
struct CLISTelem *CLIST;
/* define structure to hold the input file variable descriptions */
long VLISTne;
struct VLISTelem {
   char vname[20];      /* variable name in input file */
   char cdfvname[20];   /* variable name in cdf file, if NULL then = vname */
   char format[10];     /* C language format */
   long cdfvarnum;      /* cdf variable number, -1=not a CDF var */
   long cdfvartype;     /* cdf variable type */
   long clistnum;       /* index of var in list of cdf variable list */
   long ccount;         /* num of chars in largest valid conversion  */
   long ndims;          /* number of dims, 0=scalar,1=vector,2=image */
   long dims[3];        /* dimension sizes */
   long nelems;         /* total number of elements */
   long eperr;          /* elements per record */
   long Elem[2];        /* element#'s, special case: non-contiguous data */
   long length;         /* #bytes in flatfile by var iff formatted */
   long constant;       /* var is constant, 0=false,1=true */
   long header;         /* var is in header, 0=false,1=true */
   long eol;            /* var is followed by endofline,0=false,1=true */
   long majority;       /* order of elements if 2D,0=row,1=column */
   long bsubr;          /* begin subrecord#, 0=not start of subrec */
   long esubr;          /* end subrecord#, 0=not end of subrec */
   double fillval;      /* data fillval for replace with ISTP fill */
   short int autovalids;/* autogenerate validmin/max 0=f,1=t */
   short int autoscales;/* autogenerate scalemin/max 0=f,1=t */
   short int autoformat;/* autogenerate format values 0=f,1=t */
   short int autofill;	/* autoreplace fillval with ISTP value */
   void *buffer;        /* pointer to input buffer */
   void *dataptr;       /* pointer to data buffer */
} VLISTz;
struct VLISTelem *VLIST;
/* define structure to hold the ordered list for file reading */
long OLISTne;
struct OLISTelem{
   short int vnum;		/* variable number */
   short int velem;		/* variable element number */
   short int rflag;		/* read flag */
   short int pflag;		/* process flag */
} OLISTz;
struct OLISTelem *OLIST;
/* define the structure to hold any subrecord information */
long SRECSne;
struct SRECSelem {
   long   countr;	/* subrecord counter */
   long   nreps;        /* number of repetitions */
   double delta;        /* delta-T (ms) between reps */
} SRECSz;
struct SRECSelem *SRECS;
/* define the structure to hold non-variable info about input file */
struct {
   long format;         /* 0=freeform,1=formatted */
   long dtype;          /* 0=text,1=binary    freeform must be textual */
   long ttype;          /* 0=ASCII,1=EBCDIC */
   long btype;          /* vax,sun,ibmpc etc. used only if formatted binary */
   long buflen;         /* length of file input buffer */
   long recnum;         /* current input file record number */
   char delimiter;      /* parsing delimiter, used only if freeform text */
   FILE *fptr;          /* pointer to input stream */
   char *buffer;        /* pointer to input buffer */
   char *bptr;          /* pointer that floats in input buffer */
} INFILE;
/* define structure to hold info about log file */
struct {
   long nrecs;          /* logfile record counter */
   long maxrecs;        /* max log file number of records */
   char fname[80];      /* name of log file */
   char message[80];    /* buffer for messages to be output */
   FILE *fptr;          /* pointer to logfile stream */
} LOGFILE;
/* define structure to hold info about Epoch generation */
struct {
    long algorithm;     /* generation algorithm */
    long operand[10];   /* generation operands */
    long EpGenerator;   /* input variable which triggers epoch calculations */
    long Epvarnum;      /* cdf variable# of Epoch */
    double FirstEp;     /* value of first epoch computed */
    double BaseEp;      /* value of base Epoch of algorithm=4 */
} EpALG;
/* Declare function prototypes for makeCDF */
extern void StripName PROTOARGs((char *oldname, char *newname));
extern void MSG_control PROTOARGs((long mtype, char *instring, long status));
extern long Validate_BOOLEAN PROTOARGs((char *instring));
extern long Validate_POSINT PROTOARGs((char *instring));
extern double Validate_FILLVAL PROTOARGs((char *instring, long cdfvartype));
extern long Validate_FORMAT PROTOARGs((char *ins, char *out,
                                       long *ilength, long *cdfvartype));
extern long Separate_Varnames PROTOARGs((char *instring, char *vname1,
                              char *vname2, long *velem1, long *velem2));
extern long Import_RPARMS PROTOARGs((FILE *file_ptr));
extern long Import_INFILE PROTOARGs((FILE *file_ptr));
extern long Import_EpALG PROTOARGs((FILE *file_ptr));
extern long Import_Variables PROTOARGs((FILE *file_ptr));
extern long Import_FFD PROTOARGs((void));
extern long SREC_Bounds PROTOARGs((long subrecno,long *firstvar,long *lastvar));
extern long Build_OLIST PROTOARGs((void));
extern long inCDFform PROTOARGs((char *filename));
extern long Generate_CDFskeleton PROTOARGs((void));
extern long Match_Variables PROTOARGs((void));
extern long Fix_Format PROTOARGs((char *oldformat, char *newformat));
extern long Allocate_Buffers PROTOARGs((void));
extern long Determine_Bufsize PROTOARGs((void));
extern void Read_Infile PROTOARGs((void));
extern long Open_Infile PROTOARGs((long ifile));
extern long Parser1 PROTOARGs((long vnum, long velem));
extern long Parser2 PROTOARGs((long vnum, long velem));
extern long Parser3 PROTOARGs((long vnum, long velem));
extern long AutoMinMax PROTOARGs((long vnum));
extern long AutoFiller PROTOARGs((long vnum));
extern long AutoFormat PROTOARGs((long vnum, char *form));
extern long Open_OutCDF PROTOARGs((void));
extern long WriteEpochToCDF PROTOARGs((double depoch, long CDFrec));
extern long WriteToCDF PROTOARGs((long vnum, long CDFrec));
extern long Generate_LFILEID PROTOARGs((char *lfileid));
extern long Set_LFILEID PROTOARGs((char *lfileid));
extern long Set_AutoVattrs PROTOARGs((void));
extern long AbbrSCname PROTOARGs((char *source, char *attr));
extern long AutoNamer PROTOARGs((char *oldname, char *newname));
extern long ShortName PROTOARGs((char *lfileid));
extern long Cleanup_makeCDF PROTOARGs((long ifile));
extern long Build_FLIST PROTOARGs((void));
extern long Generate_Epoch PROTOARGs((double *EpVAL));
extern long Determine_EpGenerator PROTOARGs((void));
extern long epochParse2 PROTOARGs((char *instring, double *Etime));
extern long epochParse3 PROTOARGs((char *instring, double *Etime));
extern long epochParse4 PROTOARGs((char *instring, double *Etime));
extern long julian_date PROTOARGs((long y, long m, long d));
extern long Get_Year PROTOARGs((long vnum, long *lyear));
extern long Get_Month PROTOARGs((long vnum, long *lmonth));
extern long Get_Day PROTOARGs((long vnum, long *lday));
extern void Convert_DOY PROTOARGs((long lyear, long *lmonth, long *lday));
extern long Get_Hour PROTOARGs((long vnum, double *dval));
extern long Get_Minute PROTOARGs((long vnum, double *dval));
extern long Get_Second PROTOARGs((long vnum, double *dval));
extern long Get_MSecs PROTOARGs((long vnum, double *dval));
extern long Get_Epoch PROTOARGs((long vnum, double *dval));
extern long Get_BaseEpoch PROTOARGs((double *dval));
extern long Compute_Epoch PROTOARGs((double *dval));
extern long Parse_Filename PROTOARGs((char *fname));
