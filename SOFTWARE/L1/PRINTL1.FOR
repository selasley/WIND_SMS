	PROGRAM PRINTL1
C
C This program reads the L1 data files on disk and prints out the times, rates
C and PHA words.
C
      IMPLICIT NONE

      INCLUDE 'INC_DIR:EDBDEF.INC/NOLIST'
      INCLUDE 'INC_DIR:L1FMT.INC/NOLIST'
      INCLUDE '($RMSDEF)/NOLIST'

      INTEGER*4	JJ,STATUS,SPIN,KK,MM,RECCNTR,IOUT/17/,HKNUM,L1_LUN/8/
      INTEGER START,LAST,NDUMP,SENSOR,WHAT,WHICH
      LOGICAL DUMP_HEADER,DUMP_RATE,DUMP_PHA,DUMP_SWICS,DUMP_MASS,DUMP_STICS
      LOGICAL DUMP_THE_HDB,DUMP_THE_HK,DUMP_CORE
      CHARACTER*80 L1FILENAME,LISTFILENAME
      CHARACTER*30 FORMAT_TIME
      RECORD /CORE/ SCI
      RECORD /HKeep/ HKeep
      RECORD /HDBstr/ HDB
      RECORD /SW_RATE/ SWICS_RATE
      RECORD /SW_PHA/ SWICS_PHA
      RECORD /MA_RATE/ MASS_RATE
      RECORD /MA_PHA/ MASS_PHA
      RECORD /ST_RATE/ STICS_RATE
      RECORD /ST_PHA/ STICS_PHA
      INTEGER FORTERR,RMSSTC,RMSSTV,LUN,VAXERR
      LOGICAL NRT_MODE
      CHARACTER VALUE*10
      INTEGER*4 GET_LOGICAL,NCH
C
C Translate logical name WIND_NRT_MODE
C If it's defined set variable NRT_MODE to .TRUE., else leave it .FALSE.
C
      NRT_MODE = .FALSE.
      NCH = GET_LOGICAL( 'WIND_NRT_MODE', VALUE )
      IF (NCH .NE. 0) NRT_MODE = .TRUE.
C
C Get input file
C Use different pattern if processing L1 files which came from NRT data
C
      L1FILENAME = 'WIND_L1_DATA:WI*L1*.DAT'
      IF (NRT_MODE) L1FILENAME = 'WIND_NRT_DATA:WI*L1*.*'
      WRITE(6,1010) 'L1-FILE:'
1010  FORMAT(1X,A)
      CALL WIND_GET_FILENAME(L1FILENAME, STATUS)
      IF(STATUS.NE.1)STOP
C
C Construct output filename
C
      LISTFILENAME = L1FILENAME
      KK = INDEX(LISTFILENAME, ']')
      LISTFILENAME = LISTFILENAME(KK+1:)
      MM = INDEX(LISTFILENAME, '.')
      IF (MM .NE. 0) THEN
        LISTFILENAME(MM:) = '.DMP'
      ELSE
        MM = INDEX(LISTFILENAME, ' ')
        LISTFILENAME(MM:) = '.DMP'
      ENDIF
      WRITE(6,1010) 'LISTING FILE:'
      CALL WIND_GET_FILENAME(LISTFILENAME, STATUS)
      KK = INDEX(LISTFILENAME, ';')
      IF (KK .NE. 0) LISTFILENAME(KK:) = ' '
C
C Get run parameters
C
      WRITE(6,1001) 
1001  FORMAT(' Number of first record to dump (1=first): ',$)
      READ(5,*,END=9000) START
      IF (START .LT. 1) STOP
      WRITE(6,1002) 
1002  FORMAT(' Number of records to dump: ',$)
      READ(5,*,END=9000) NDUMP
      IF (NDUMP .LT. 1) STOP
      LAST = START + NDUMP - 1
      WRITE(6,1003)
1003  FORMAT(' What to dump (1=sensor data, 2=HDB, 3=HK, 4=headers, 5=Basic Core, 6=all): ',$)
      READ(5,*,END=9000) WHAT
      SENSOR = 0
      WHICH = 0
      IF (WHAT .EQ. 1 .OR. WHAT .EQ. 6) THEN
        WRITE(6,1004)
1004    FORMAT(' What to dump (1=SWICS, 2=MASS, 3=STICS, 4=all): ',$)
        READ(5,*,END=9000) SENSOR
        WRITE(6,1005)
1005    FORMAT(' What to dump (1=RATE, 2=PHA, 3=both): ',$)
        READ(5,*,END=9000) WHICH
      ENDIF
C
      DUMP_HEADER = WHAT .EQ. 4 .OR. WHAT .EQ. 6
      DUMP_RATE = WHICH .EQ. 1 .OR. WHICH .EQ. 3
      DUMP_PHA = WHICH .EQ. 2 .OR. WHICH .EQ. 3
      DUMP_SWICS = SENSOR .EQ. 1 .OR. SENSOR .EQ. 4
      DUMP_MASS = SENSOR .EQ. 2 .OR. SENSOR .EQ. 4
      DUMP_STICS = SENSOR .EQ. 3 .OR. SENSOR .EQ. 4
      DUMP_THE_HDB = WHAT .EQ. 2 .OR. WHAT .EQ. 6
      DUMP_THE_HK = WHAT .EQ. 3 .OR. WHAT .EQ. 6
      DUMP_CORE = WHAT .EQ. 5 .OR. WHAT .EQ. 6
C
      CALL WIND_L1_OPEN( L1_LUN, L1FILENAME, L1_FILE_HEADER, STATUS)
      IF (STATUS .NE. 1) GOTO 9001
      OPEN(UNIT=IOUT, FILE=LISTFILENAME, STATUS='NEW', ERR=9010, IOSTAT=STATUS)
C
C Dump file header if requested
C
      IF (DUMP_HEADER) CALL DUMP_FILE_HEADER(IOUT,L1_FILE_HEADER)
C
C Skip START-1 Science Records
C The next call to WIND_L1_READ_SR will get the START'th Sci Rec
C
      CALL WIND_L1_SKIP_SR( L1_LUN, START-1, STATUS )
      IF (STATUS .NE. 1) GOTO 9002
C
C Read next Science Record
C
100   CONTINUE
      CALL WIND_L1_READ_SR( L1_LUN, RECCNTR, L1_SR_HEADER, STATUS )
      IF (STATUS .NE. 1) GOTO 9002
C
      WRITE(IOUT,1007) RECCNTR,L1_SR_HEADER.SR_COUNT
1007  FORMAT(/' RECORD ',I4,'   ORIGINAL SCI REC# ',I8)
C
C Dump Science Record header if requested
C
      IF (DUMP_HEADER) CALL DUMP_SR_HEADER(IOUT,L1_SR_HEADER)
C
C Get the Basic Core data
C
      CALL WIND_L1_GET_BASIC( L1_LUN, SCI, STATUS)
      IF (STATUS .NE. 1) GOTO 9003
C
C Dump the Basic Core data if requested
C
      IF (DUMP_CORE) THEN
        DO SPIN=0,59
          WRITE(IOUT,1008) SPIN,FORMAT_TIME(SCI.EDB(SPIN).W_TIME),SCI.EDB(SPIN).EPOCH,
     &                 FORMAT_TIME(SCI.EDB(SPIN).SC_TIME),SCI.EDB(SPIN).SC_EPOCH
1008    FORMAT(/' SPIN ',I2,T10,'W_TIME:  ',A30,5X,F15.0/
     &                      T10,'SC_TIME: ',A30,5X,F15.0)
	  CALL DUMP_BASIC(IOUT,SCI,SPIN)
	ENDDO
      ENDIF
C
C Get the Housekeeping Data Block (HDB) and dump it
C
      IF (DUMP_THE_HDB) THEN
        CALL WIND_L1_GET_HDB( L1_LUN, HDB, STATUS)
        IF (STATUS .NE. 1) GOTO 9005
        CALL DUMP_HDB(IOUT,HDB)
C
        SPIN = 0
        WRITE(IOUT,1008) SPIN,FORMAT_TIME(SCI.EDB(0).W_TIME),SCI.EDB(0).EPOCH,
     &                 FORMAT_TIME(SCI.EDB(0).SC_TIME),SCI.EDB(0).SC_EPOCH
      ENDIF
C
C Get the Housekeeping Records (HKs)
C HKNUM will have number of HKs in data structure HKeep
C
      IF (DUMP_THE_HK) THEN
        CALL WIND_L1_GET_HK( L1_LUN, HKeep, HKNUM, STATUS)
        IF (STATUS .NE. 1) GOTO 9004
        CALL DUMP_HK(IOUT,HKeep)
      ENDIF
C
C Get SWICS rates and PHA
C
      IF (DUMP_SWICS) THEN
        CALL WIND_L1_GET_SWICS( L1_LUN, SWICS_RATE, SWICS_PHA, STATUS )
        IF (STATUS .NE. 1) GOTO 9006
C
C Now write them out formatted by voltage step for all 60 voltage steps
C
        DO SPIN=0,59
          WRITE(IOUT,1012) SPIN
          WRITE(IOUT,1008) SPIN,FORMAT_TIME(SCI.EDB(SPIN).W_TIME),SCI.EDB(SPIN).EPOCH,
     &                 FORMAT_TIME(SCI.EDB(SPIN).SC_TIME),SCI.EDB(SPIN).SC_EPOCH
          WRITE(IOUT,1011)  (SWICS_RATE.EDB(SPIN).RATE(KK),KK=0,115)
1011      FORMAT(1X,20Z3.2)
1012      FORMAT(/' DUMP OF SWICS RATES IN SPIN ',I2)
        END DO
C
        DO SPIN=0,59
          JJ = SCI.EDB( SPIN ).SWICS_Len * 4
          WRITE(IOUT,1013) SPIN,JJ
          WRITE(IOUT,1008) SPIN,FORMAT_TIME(SCI.EDB(SPIN).W_TIME),SCI.EDB(SPIN).EPOCH,
     &                 FORMAT_TIME(SCI.EDB(SPIN).SC_TIME),SCI.EDB(SPIN).SC_EPOCH
          WRITE(IOUT,1011)  (SWICS_PHA.EDB(SPIN).PHA(KK),KK=0,JJ-1)
1013      FORMAT(/' DUMP OF SWICS PHA IN SPIN ',I2,'    #VALUES ',I4)
        END DO
      ENDIF
C
C Get MASS rates and PHA
C
      IF (DUMP_MASS) THEN
        CALL WIND_L1_GET_MASS( L1_LUN, MASS_RATE, MASS_PHA, STATUS )
        IF (STATUS .NE. 1) GOTO 9007
C
C Now write them out formatted by voltage step for all 60 voltage steps
C
        DO SPIN=0,59
          WRITE(IOUT,1014) SPIN
          WRITE(IOUT,1008) SPIN,FORMAT_TIME(SCI.EDB(SPIN).W_TIME),SCI.EDB(SPIN).EPOCH,
     &                 FORMAT_TIME(SCI.EDB(SPIN).SC_TIME),SCI.EDB(SPIN).SC_EPOCH
          WRITE(IOUT,1011)  (MASS_RATE.EDB(SPIN).RATE(KK),KK=0,26)
1014      FORMAT(/' DUMP OF MASS RATES IN SPIN ',I2)
        END DO
C
        DO SPIN=0,59
          JJ = SCI.EDB( SPIN ).MASS_Len * 2
          WRITE(IOUT,1015) SPIN,JJ
          WRITE(IOUT,1008) SPIN,FORMAT_TIME(SCI.EDB(SPIN).W_TIME),SCI.EDB(SPIN).EPOCH,
     &                 FORMAT_TIME(SCI.EDB(SPIN).SC_TIME),SCI.EDB(SPIN).SC_EPOCH
          WRITE(IOUT,1011)  (MASS_PHA.EDB(SPIN).PHA(KK),KK=0,JJ-1)
1015      FORMAT(/' DUMP OF MASS PHA IN SPIN ',I2,'    #VALUES ',I4)
        END DO
      ENDIF
C
C Get STICS rates and PHA
C
      IF (DUMP_STICS) THEN
        CALL WIND_L1_GET_STICS( L1_LUN, STICS_RATE, STICS_PHA, STATUS )
        IF (STATUS .NE. 1) GOTO 9008
C
C Now write them out formatted by voltage step for all 60 voltage steps
C
        DO SPIN=0,59
          WRITE(IOUT,1016) SPIN
          WRITE(IOUT,1008) SPIN,FORMAT_TIME(SCI.EDB(SPIN).W_TIME),SCI.EDB(SPIN).EPOCH,
     &                 FORMAT_TIME(SCI.EDB(SPIN).SC_TIME),SCI.EDB(SPIN).SC_EPOCH
          WRITE(IOUT,1011)  (STICS_RATE.EDB(SPIN).RATE(KK),KK=0,179)
1016      FORMAT(/'  DUMP OF STICS RATES IN SPIN ',I2)
        END DO
C
        DO SPIN=0,59
          JJ = SCI.EDB( SPIN ).STICS_Len * 4
          WRITE(IOUT,1017) SPIN,JJ
          WRITE(IOUT,1008) SPIN,FORMAT_TIME(SCI.EDB(SPIN).W_TIME),SCI.EDB(SPIN).EPOCH,
     &                 FORMAT_TIME(SCI.EDB(SPIN).SC_TIME),SCI.EDB(SPIN).SC_EPOCH
          WRITE(IOUT,1011)  (STICS_PHA.EDB(SPIN).PHA(KK),KK=0,JJ-1)
1017      FORMAT(/' DUMP OF STICS PHA IN SPIN ',I2,'    #VALUES ',I4)
        END DO
      ENDIF
C
      IF (RECCNTR .LT. LAST) GOTO 100
C
C All done, close files
C
8000  CALL WIND_L1_CLOSE( L1_LUN, STATUS )
      IF (STATUS .NE. 1) GOTO 9009
      STOP
C
C Come here for errors
C
9000  STOP
9001  TYPE *,'ERROR OPENING L1 FILE'
      GOTO 9900
9002  CALL ERRSNS(FORTERR,RMSSTC,RMSSTV,LUN,VAXERR)
      IF (RMSSTC .EQ. RMS$_EOF) GOTO 8000
      TYPE *,'ERROR READING SCIENCE RECORD ',RECCNTR
      GOTO 9900
9003  TYPE *,'ERROR GETTING BASIC CORE'
      GOTO 9900
9004  TYPE *,'ERROR GETTING HK'
      GOTO 9900
9005  TYPE *,'ERROR GETTING HDB'
      GOTO 9900
9006  TYPE *,'ERROR GETTING SWICS DATA'
      GOTO 9900
9007  TYPE *,'ERROR GETTING MASS DATA'
      GOTO 9900
9008  TYPE *,'ERROR GETTING STICS DATA'
      GOTO 9900
9009  TYPE *,'ERROR CLOSING L1 FILE'
      GOTO 9900
9010  TYPE *,'ERROR OPENING OUTPUT FILE'
      GOTO 9900
9900  CALL LIB$STOP(%VAL(STATUS))
      END
